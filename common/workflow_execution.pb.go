// The MIT License (MIT)
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/workflow_execution.proto

package common

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	enums "go.temporal.io/temporal-proto/enums"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowExecution struct {
	WorkflowId string `protobuf:"bytes,1,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	RunId      string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
}

func (m *WorkflowExecution) Reset()      { *m = WorkflowExecution{} }
func (*WorkflowExecution) ProtoMessage() {}
func (*WorkflowExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60ee7a8b5b4b60f, []int{0}
}
func (m *WorkflowExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecution.Merge(m, src)
}
func (m *WorkflowExecution) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecution.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecution proto.InternalMessageInfo

func (m *WorkflowExecution) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *WorkflowExecution) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type WorkflowExecutionFilter struct {
	WorkflowId string `protobuf:"bytes,1,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	RunId      string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
}

func (m *WorkflowExecutionFilter) Reset()      { *m = WorkflowExecutionFilter{} }
func (*WorkflowExecutionFilter) ProtoMessage() {}
func (*WorkflowExecutionFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60ee7a8b5b4b60f, []int{1}
}
func (m *WorkflowExecutionFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionFilter.Merge(m, src)
}
func (m *WorkflowExecutionFilter) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionFilter.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionFilter proto.InternalMessageInfo

func (m *WorkflowExecutionFilter) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *WorkflowExecutionFilter) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type WorkerVersionInfo struct {
	Impl           string `protobuf:"bytes,1,opt,name=impl,proto3" json:"impl,omitempty"`
	FeatureVersion string `protobuf:"bytes,2,opt,name=featureVersion,proto3" json:"featureVersion,omitempty"`
}

func (m *WorkerVersionInfo) Reset()      { *m = WorkerVersionInfo{} }
func (*WorkerVersionInfo) ProtoMessage() {}
func (*WorkerVersionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60ee7a8b5b4b60f, []int{2}
}
func (m *WorkerVersionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerVersionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerVersionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerVersionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerVersionInfo.Merge(m, src)
}
func (m *WorkerVersionInfo) XXX_Size() int {
	return m.Size()
}
func (m *WorkerVersionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerVersionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerVersionInfo proto.InternalMessageInfo

func (m *WorkerVersionInfo) GetImpl() string {
	if m != nil {
		return m.Impl
	}
	return ""
}

func (m *WorkerVersionInfo) GetFeatureVersion() string {
	if m != nil {
		return m.FeatureVersion
	}
	return ""
}

type WorkflowExecutionInfo struct {
	Execution        *WorkflowExecution                 `protobuf:"bytes,1,opt,name=execution,proto3" json:"execution,omitempty"`
	Type             *WorkflowType                      `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	StartTime        *types.Int64Value                  `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	CloseTime        *types.Int64Value                  `protobuf:"bytes,4,opt,name=closeTime,proto3" json:"closeTime,omitempty"`
	CloseStatus      enums.WorkflowExecutionCloseStatus `protobuf:"varint,5,opt,name=closeStatus,proto3,enum=enums.WorkflowExecutionCloseStatus" json:"closeStatus,omitempty"`
	HistoryLength    int64                              `protobuf:"varint,6,opt,name=historyLength,proto3" json:"historyLength,omitempty"`
	ParentDomainId   string                             `protobuf:"bytes,7,opt,name=parentDomainId,proto3" json:"parentDomainId,omitempty"`
	ParentExecution  *WorkflowExecution                 `protobuf:"bytes,8,opt,name=parentExecution,proto3" json:"parentExecution,omitempty"`
	ExecutionTime    int64                              `protobuf:"varint,9,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	Memo             *Memo                              `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes *SearchAttributes                  `protobuf:"bytes,11,opt,name=searchAttributes,proto3" json:"searchAttributes,omitempty"`
	AutoResetPoints  *ResetPoints                       `protobuf:"bytes,12,opt,name=autoResetPoints,proto3" json:"autoResetPoints,omitempty"`
}

func (m *WorkflowExecutionInfo) Reset()      { *m = WorkflowExecutionInfo{} }
func (*WorkflowExecutionInfo) ProtoMessage() {}
func (*WorkflowExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60ee7a8b5b4b60f, []int{3}
}
func (m *WorkflowExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionInfo.Merge(m, src)
}
func (m *WorkflowExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionInfo proto.InternalMessageInfo

func (m *WorkflowExecutionInfo) GetExecution() *WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetType() *WorkflowType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetStartTime() *types.Int64Value {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetCloseTime() *types.Int64Value {
	if m != nil {
		return m.CloseTime
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetCloseStatus() enums.WorkflowExecutionCloseStatus {
	if m != nil {
		return m.CloseStatus
	}
	return enums.WorkflowExecutionCloseStatusRunning
}

func (m *WorkflowExecutionInfo) GetHistoryLength() int64 {
	if m != nil {
		return m.HistoryLength
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetParentDomainId() string {
	if m != nil {
		return m.ParentDomainId
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetParentExecution() *WorkflowExecution {
	if m != nil {
		return m.ParentExecution
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetExecutionTime() int64 {
	if m != nil {
		return m.ExecutionTime
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetMemo() *Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetSearchAttributes() *SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetAutoResetPoints() *ResetPoints {
	if m != nil {
		return m.AutoResetPoints
	}
	return nil
}

type WorkflowExecutionConfiguration struct {
	TaskList                            *TaskList `protobuf:"bytes,1,opt,name=taskList,proto3" json:"taskList,omitempty"`
	ExecutionStartToCloseTimeoutSeconds int32     `protobuf:"varint,2,opt,name=executionStartToCloseTimeoutSeconds,proto3" json:"executionStartToCloseTimeoutSeconds,omitempty"`
	TaskStartToCloseTimeoutSeconds      int32     `protobuf:"varint,3,opt,name=taskStartToCloseTimeoutSeconds,proto3" json:"taskStartToCloseTimeoutSeconds,omitempty"`
}

func (m *WorkflowExecutionConfiguration) Reset()      { *m = WorkflowExecutionConfiguration{} }
func (*WorkflowExecutionConfiguration) ProtoMessage() {}
func (*WorkflowExecutionConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60ee7a8b5b4b60f, []int{4}
}
func (m *WorkflowExecutionConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionConfiguration.Merge(m, src)
}
func (m *WorkflowExecutionConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionConfiguration proto.InternalMessageInfo

func (m *WorkflowExecutionConfiguration) GetTaskList() *TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *WorkflowExecutionConfiguration) GetExecutionStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.ExecutionStartToCloseTimeoutSeconds
	}
	return 0
}

func (m *WorkflowExecutionConfiguration) GetTaskStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.TaskStartToCloseTimeoutSeconds
	}
	return 0
}

type PendingActivityInfo struct {
	ActivityID             string                     `protobuf:"bytes,1,opt,name=activityID,proto3" json:"activityID,omitempty"`
	ActivityType           *ActivityType              `protobuf:"bytes,2,opt,name=activityType,proto3" json:"activityType,omitempty"`
	State                  enums.PendingActivityState `protobuf:"varint,3,opt,name=state,proto3,enum=enums.PendingActivityState" json:"state,omitempty"`
	HeartbeatDetails       []byte                     `protobuf:"bytes,4,opt,name=heartbeatDetails,proto3" json:"heartbeatDetails,omitempty"`
	LastHeartbeatTimestamp int64                      `protobuf:"varint,5,opt,name=lastHeartbeatTimestamp,proto3" json:"lastHeartbeatTimestamp,omitempty"`
	LastStartedTimestamp   int64                      `protobuf:"varint,6,opt,name=lastStartedTimestamp,proto3" json:"lastStartedTimestamp,omitempty"`
	Attempt                int32                      `protobuf:"varint,7,opt,name=attempt,proto3" json:"attempt,omitempty"`
	MaximumAttempts        int32                      `protobuf:"varint,8,opt,name=maximumAttempts,proto3" json:"maximumAttempts,omitempty"`
	ScheduledTimestamp     int64                      `protobuf:"varint,9,opt,name=scheduledTimestamp,proto3" json:"scheduledTimestamp,omitempty"`
	ExpirationTimestamp    int64                      `protobuf:"varint,10,opt,name=expirationTimestamp,proto3" json:"expirationTimestamp,omitempty"`
	LastFailureReason      string                     `protobuf:"bytes,11,opt,name=lastFailureReason,proto3" json:"lastFailureReason,omitempty"`
	LastWorkerIdentity     string                     `protobuf:"bytes,12,opt,name=lastWorkerIdentity,proto3" json:"lastWorkerIdentity,omitempty"`
	LastFailureDetails     []byte                     `protobuf:"bytes,13,opt,name=lastFailureDetails,proto3" json:"lastFailureDetails,omitempty"`
}

func (m *PendingActivityInfo) Reset()      { *m = PendingActivityInfo{} }
func (*PendingActivityInfo) ProtoMessage() {}
func (*PendingActivityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60ee7a8b5b4b60f, []int{5}
}
func (m *PendingActivityInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingActivityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingActivityInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingActivityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingActivityInfo.Merge(m, src)
}
func (m *PendingActivityInfo) XXX_Size() int {
	return m.Size()
}
func (m *PendingActivityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingActivityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PendingActivityInfo proto.InternalMessageInfo

func (m *PendingActivityInfo) GetActivityID() string {
	if m != nil {
		return m.ActivityID
	}
	return ""
}

func (m *PendingActivityInfo) GetActivityType() *ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *PendingActivityInfo) GetState() enums.PendingActivityState {
	if m != nil {
		return m.State
	}
	return enums.PendingActivityStateScheduled
}

func (m *PendingActivityInfo) GetHeartbeatDetails() []byte {
	if m != nil {
		return m.HeartbeatDetails
	}
	return nil
}

func (m *PendingActivityInfo) GetLastHeartbeatTimestamp() int64 {
	if m != nil {
		return m.LastHeartbeatTimestamp
	}
	return 0
}

func (m *PendingActivityInfo) GetLastStartedTimestamp() int64 {
	if m != nil {
		return m.LastStartedTimestamp
	}
	return 0
}

func (m *PendingActivityInfo) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *PendingActivityInfo) GetMaximumAttempts() int32 {
	if m != nil {
		return m.MaximumAttempts
	}
	return 0
}

func (m *PendingActivityInfo) GetScheduledTimestamp() int64 {
	if m != nil {
		return m.ScheduledTimestamp
	}
	return 0
}

func (m *PendingActivityInfo) GetExpirationTimestamp() int64 {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return 0
}

func (m *PendingActivityInfo) GetLastFailureReason() string {
	if m != nil {
		return m.LastFailureReason
	}
	return ""
}

func (m *PendingActivityInfo) GetLastWorkerIdentity() string {
	if m != nil {
		return m.LastWorkerIdentity
	}
	return ""
}

func (m *PendingActivityInfo) GetLastFailureDetails() []byte {
	if m != nil {
		return m.LastFailureDetails
	}
	return nil
}

type PendingChildExecutionInfo struct {
	WorkflowID        string                  `protobuf:"bytes,1,opt,name=workflowID,proto3" json:"workflowID,omitempty"`
	RunID             string                  `protobuf:"bytes,2,opt,name=runID,proto3" json:"runID,omitempty"`
	WorkflowTypName   string                  `protobuf:"bytes,3,opt,name=workflowTypName,proto3" json:"workflowTypName,omitempty"`
	InitiatedID       int64                   `protobuf:"varint,4,opt,name=initiatedID,proto3" json:"initiatedID,omitempty"`
	ParentClosePolicy enums.ParentClosePolicy `protobuf:"varint,5,opt,name=parentClosePolicy,proto3,enum=enums.ParentClosePolicy" json:"parentClosePolicy,omitempty"`
}

func (m *PendingChildExecutionInfo) Reset()      { *m = PendingChildExecutionInfo{} }
func (*PendingChildExecutionInfo) ProtoMessage() {}
func (*PendingChildExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60ee7a8b5b4b60f, []int{6}
}
func (m *PendingChildExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingChildExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingChildExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingChildExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingChildExecutionInfo.Merge(m, src)
}
func (m *PendingChildExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *PendingChildExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingChildExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PendingChildExecutionInfo proto.InternalMessageInfo

func (m *PendingChildExecutionInfo) GetWorkflowID() string {
	if m != nil {
		return m.WorkflowID
	}
	return ""
}

func (m *PendingChildExecutionInfo) GetRunID() string {
	if m != nil {
		return m.RunID
	}
	return ""
}

func (m *PendingChildExecutionInfo) GetWorkflowTypName() string {
	if m != nil {
		return m.WorkflowTypName
	}
	return ""
}

func (m *PendingChildExecutionInfo) GetInitiatedID() int64 {
	if m != nil {
		return m.InitiatedID
	}
	return 0
}

func (m *PendingChildExecutionInfo) GetParentClosePolicy() enums.ParentClosePolicy {
	if m != nil {
		return m.ParentClosePolicy
	}
	return enums.ParentClosePolicyAbandon
}

type ParentExecutionInfo struct {
	DomainUUID  string             `protobuf:"bytes,1,opt,name=domainUUID,proto3" json:"domainUUID,omitempty"`
	Domain      string             `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Execution   *WorkflowExecution `protobuf:"bytes,3,opt,name=execution,proto3" json:"execution,omitempty"`
	InitiatedId int64              `protobuf:"varint,4,opt,name=initiatedId,proto3" json:"initiatedId,omitempty"`
}

func (m *ParentExecutionInfo) Reset()      { *m = ParentExecutionInfo{} }
func (*ParentExecutionInfo) ProtoMessage() {}
func (*ParentExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60ee7a8b5b4b60f, []int{7}
}
func (m *ParentExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParentExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParentExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParentExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParentExecutionInfo.Merge(m, src)
}
func (m *ParentExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *ParentExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ParentExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ParentExecutionInfo proto.InternalMessageInfo

func (m *ParentExecutionInfo) GetDomainUUID() string {
	if m != nil {
		return m.DomainUUID
	}
	return ""
}

func (m *ParentExecutionInfo) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ParentExecutionInfo) GetExecution() *WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *ParentExecutionInfo) GetInitiatedId() int64 {
	if m != nil {
		return m.InitiatedId
	}
	return 0
}

func init() {
	proto.RegisterType((*WorkflowExecution)(nil), "common.WorkflowExecution")
	proto.RegisterType((*WorkflowExecutionFilter)(nil), "common.WorkflowExecutionFilter")
	proto.RegisterType((*WorkerVersionInfo)(nil), "common.WorkerVersionInfo")
	proto.RegisterType((*WorkflowExecutionInfo)(nil), "common.WorkflowExecutionInfo")
	proto.RegisterType((*WorkflowExecutionConfiguration)(nil), "common.WorkflowExecutionConfiguration")
	proto.RegisterType((*PendingActivityInfo)(nil), "common.PendingActivityInfo")
	proto.RegisterType((*PendingChildExecutionInfo)(nil), "common.PendingChildExecutionInfo")
	proto.RegisterType((*ParentExecutionInfo)(nil), "common.ParentExecutionInfo")
}

func init() { proto.RegisterFile("common/workflow_execution.proto", fileDescriptor_f60ee7a8b5b4b60f) }

var fileDescriptor_f60ee7a8b5b4b60f = []byte{
	// 987 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0xf7, 0xfe, 0x1d, 0xa7, 0xf5, 0x49, 0x9a, 0x8f, 0x71, 0xfe, 0x65, 0xdb, 0x4a, 0x8b, 0xe5,
	0x56, 0xc8, 0x42, 0xc5, 0x06, 0x83, 0x0a, 0x5c, 0x70, 0x11, 0xe2, 0x46, 0x58, 0x2a, 0x60, 0x4d,
	0xd2, 0x22, 0x71, 0x83, 0x26, 0xde, 0xb1, 0x3d, 0xea, 0xee, 0xce, 0x6a, 0xe7, 0x6c, 0x13, 0xdf,
	0xf1, 0x08, 0xdc, 0xf1, 0x0a, 0x7d, 0x14, 0x2e, 0x73, 0xd9, 0x4b, 0xe2, 0x08, 0xa9, 0x57, 0xa8,
	0x8f, 0x80, 0x76, 0x76, 0xc6, 0x5f, 0x6b, 0x68, 0xe1, 0x26, 0xd9, 0xf3, 0x3b, 0xbf, 0x73, 0xe6,
	0x9c, 0x39, 0x1f, 0x63, 0x78, 0x7f, 0x20, 0xc3, 0x50, 0x46, 0xed, 0x73, 0x99, 0x3c, 0x1f, 0x06,
	0xf2, 0xfc, 0x27, 0x7e, 0xc1, 0x07, 0x29, 0x0a, 0x19, 0xb5, 0xe2, 0x44, 0xa2, 0x24, 0x9b, 0x39,
	0xe1, 0xee, 0x3e, 0x8f, 0xd2, 0x50, 0xb5, 0xf5, 0xdf, 0x5c, 0x75, 0xb7, 0x66, 0x6c, 0xf3, 0x7f,
	0x06, 0xf4, 0x46, 0x52, 0x8e, 0x02, 0xde, 0xd6, 0xd2, 0x59, 0x3a, 0x6c, 0x9f, 0x27, 0x2c, 0x8e,
	0x79, 0x62, 0x8c, 0x1a, 0x3d, 0xd8, 0xff, 0xc1, 0x9c, 0xf5, 0xd8, 0x1e, 0x45, 0x3c, 0x00, 0x1b,
	0x40, 0xcf, 0x77, 0x9d, 0xba, 0xd3, 0xac, 0xd2, 0x05, 0x84, 0x1c, 0x40, 0x25, 0x49, 0xa3, 0x9e,
	0xef, 0xfe, 0x4f, 0xab, 0x72, 0xa1, 0xf1, 0x3d, 0xbc, 0x57, 0x70, 0x75, 0x2c, 0x02, 0xe4, 0xc9,
	0x7f, 0x76, 0xa8, 0x63, 0xe3, 0xc9, 0x33, 0x9e, 0x28, 0x21, 0xa3, 0x5e, 0x34, 0x94, 0x84, 0xc0,
	0x86, 0x08, 0xe3, 0xc0, 0x38, 0xd1, 0xdf, 0xe4, 0x03, 0xd8, 0x19, 0x72, 0x86, 0x69, 0xc2, 0x0d,
	0xd3, 0xf8, 0x59, 0x41, 0x1b, 0xbf, 0x56, 0xe0, 0xff, 0x85, 0x10, 0xb5, 0xd7, 0xcf, 0xa1, 0x3a,
	0xbb, 0x69, 0xed, 0x7a, 0xab, 0x73, 0xa7, 0x65, 0x2e, 0xb2, 0x60, 0x41, 0xe7, 0x5c, 0xd2, 0x84,
	0x0d, 0x9c, 0xc4, 0x5c, 0x1f, 0xb8, 0xd5, 0x39, 0x58, 0xb5, 0x39, 0x9d, 0xc4, 0x9c, 0x6a, 0x06,
	0xf9, 0x12, 0xaa, 0x0a, 0x59, 0x82, 0xa7, 0x22, 0xe4, 0x6e, 0x59, 0xd3, 0xef, 0xb5, 0xf2, 0xea,
	0xb4, 0x6c, 0x75, 0x5a, 0xbd, 0x08, 0x1f, 0x7d, 0xf6, 0x8c, 0x05, 0x29, 0xa7, 0x73, 0x76, 0x66,
	0x3a, 0x08, 0xa4, 0xe2, 0xda, 0x74, 0xe3, 0x1d, 0x4c, 0x67, 0x6c, 0xf2, 0x18, 0xb6, 0xb4, 0x70,
	0x82, 0x0c, 0x53, 0xe5, 0x56, 0xea, 0x4e, 0x73, 0xa7, 0x73, 0xbf, 0x95, 0xf7, 0x4d, 0x21, 0xb3,
	0xa3, 0x39, 0x95, 0x2e, 0xda, 0x91, 0x07, 0x70, 0x6b, 0x2c, 0x14, 0xca, 0x64, 0xf2, 0x84, 0x47,
	0x23, 0x1c, 0xbb, 0x9b, 0x75, 0xa7, 0x59, 0xa6, 0xcb, 0x60, 0x56, 0x87, 0x98, 0x25, 0x3c, 0xc2,
	0xae, 0x0c, 0x99, 0xc8, 0xea, 0x79, 0x23, 0xaf, 0xc3, 0x32, 0x4a, 0x8e, 0x60, 0x37, 0x47, 0x66,
	0x07, 0xbb, 0x37, 0xdf, 0x76, 0xe7, 0xab, 0x16, 0x59, 0x48, 0xb3, 0x32, 0xe8, 0x8b, 0xa9, 0xe6,
	0x21, 0x2d, 0x81, 0xa4, 0x0e, 0x1b, 0x21, 0x0f, 0xa5, 0x0b, 0xda, 0xff, 0xb6, 0xf5, 0xff, 0x2d,
	0x0f, 0x25, 0xd5, 0x1a, 0xd2, 0x85, 0x3d, 0xc5, 0x59, 0x32, 0x18, 0x1f, 0x22, 0x26, 0xe2, 0x2c,
	0x45, 0xae, 0xdc, 0x2d, 0xcd, 0x76, 0x2d, 0xfb, 0x64, 0x45, 0x4f, 0x0b, 0x16, 0xe4, 0x2b, 0xd8,
	0x65, 0x29, 0x4a, 0xca, 0x15, 0xc7, 0xbe, 0x14, 0x11, 0x2a, 0x77, 0x5b, 0x3b, 0xa9, 0x59, 0x27,
	0x0b, 0x2a, 0xba, 0xca, 0x6d, 0xbc, 0x76, 0xc0, 0x2b, 0x56, 0x43, 0x46, 0x43, 0x31, 0x4a, 0x13,
	0xa6, 0xf3, 0x7d, 0x08, 0x37, 0x91, 0xa9, 0xe7, 0x4f, 0x84, 0x42, 0xd3, 0xa1, 0x7b, 0xd6, 0xf5,
	0xa9, 0xc1, 0xe9, 0x8c, 0x41, 0xfa, 0x70, 0x7f, 0x76, 0x11, 0x27, 0xba, 0x91, 0xe4, 0x91, 0x6d,
	0x0a, 0x99, 0xe2, 0x09, 0x1f, 0xc8, 0xc8, 0x57, 0xba, 0x6d, 0x2b, 0xf4, 0x5d, 0xa8, 0xe4, 0x18,
	0xbc, 0xcc, 0xfb, 0x3f, 0x38, 0x2b, 0x6b, 0x67, 0x6f, 0x61, 0x35, 0xfe, 0xdc, 0x80, 0x5a, 0x9f,
	0x47, 0xbe, 0x88, 0x46, 0x87, 0x03, 0x14, 0x2f, 0x04, 0x4e, 0xf4, 0x08, 0x7a, 0x00, 0xcc, 0xca,
	0x5d, 0xbb, 0x23, 0xe6, 0x08, 0xf9, 0x02, 0xb6, 0xad, 0x74, 0xba, 0x66, 0xe2, 0x0e, 0x17, 0x74,
	0x74, 0x89, 0x49, 0x3e, 0x81, 0x8a, 0x42, 0x86, 0xf9, 0xd4, 0xed, 0x74, 0xee, 0x99, 0xee, 0x5f,
	0x09, 0x22, 0xeb, 0x74, 0x4e, 0x73, 0x26, 0xf9, 0x10, 0xf6, 0xc6, 0x9c, 0x25, 0x78, 0xc6, 0x19,
	0x76, 0x39, 0x32, 0x11, 0x28, 0x3d, 0x78, 0xdb, 0xb4, 0x80, 0x93, 0x47, 0x70, 0x3b, 0x60, 0x0a,
	0xbf, 0xb1, 0x78, 0x96, 0xaf, 0x42, 0x16, 0xc6, 0x7a, 0xda, 0xca, 0xf4, 0x6f, 0xb4, 0xa4, 0x03,
	0x07, 0x99, 0x46, 0x5f, 0x15, 0xf7, 0xe7, 0x56, 0xf9, 0x68, 0xad, 0xd5, 0x11, 0x17, 0x6e, 0x30,
	0x44, 0x1e, 0xc6, 0xa8, 0x47, 0xab, 0x42, 0xad, 0x48, 0x9a, 0xb0, 0x1b, 0xb2, 0x0b, 0x11, 0xa6,
	0xe1, 0x61, 0x8e, 0x28, 0x3d, 0x53, 0x15, 0xba, 0x0a, 0x93, 0x16, 0x10, 0x35, 0x18, 0x73, 0x3f,
	0x0d, 0x16, 0x4f, 0xcd, 0xa7, 0x67, 0x8d, 0x86, 0x7c, 0x0c, 0x35, 0x7e, 0x11, 0x8b, 0xbc, 0x0d,
	0xe7, 0x06, 0xa0, 0x0d, 0xd6, 0xa9, 0xc8, 0x43, 0xd8, 0xcf, 0xa2, 0x3f, 0x66, 0x22, 0x48, 0x13,
	0x4e, 0x39, 0x53, 0x32, 0xd2, 0x33, 0x55, 0xa5, 0x45, 0x45, 0x16, 0x4f, 0x06, 0xe6, 0xab, 0xbe,
	0xe7, 0xf3, 0x08, 0x05, 0x4e, 0xf4, 0xf4, 0x54, 0xe9, 0x1a, 0x8d, 0xe5, 0x1b, 0x27, 0xb6, 0x3a,
	0xb7, 0x74, 0x75, 0xd6, 0x68, 0x1a, 0x7f, 0x38, 0x70, 0xc7, 0xd4, 0xfa, 0x68, 0x2c, 0x02, 0x7f,
	0x79, 0xf3, 0x2f, 0x3e, 0x4d, 0xdd, 0xc2, 0xd3, 0xd4, 0xb5, 0x4f, 0x53, 0x77, 0xf1, 0x69, 0xea,
	0x66, 0xb7, 0x7d, 0x3e, 0x5f, 0xf1, 0xdf, 0x31, 0xb3, 0xd2, 0xab, 0x74, 0x15, 0x26, 0x75, 0xd8,
	0x12, 0x91, 0x40, 0xc1, 0x90, 0xfb, 0xbd, 0xae, 0x6e, 0xa2, 0x32, 0x5d, 0x84, 0xc8, 0x31, 0xec,
	0xe7, 0xbb, 0x4d, 0x4f, 0x4b, 0x5f, 0x06, 0x62, 0x30, 0x31, 0x8b, 0xda, 0xb5, 0xad, 0xba, 0xaa,
	0xa7, 0x45, 0x93, 0xc6, 0x4b, 0x07, 0x6a, 0xfd, 0xe5, 0x25, 0x69, 0x33, 0xf4, 0xf5, 0xe6, 0x7d,
	0xfa, 0x74, 0x9e, 0xe1, 0x1c, 0x21, 0xb7, 0x61, 0x33, 0x97, 0x4c, 0x8a, 0x46, 0x5a, 0x7e, 0x13,
	0xcb, 0xff, 0xe2, 0x4d, 0x5c, 0x4a, 0xd9, 0x2f, 0xa6, 0xec, 0x7f, 0xfd, 0xe2, 0xf2, 0xca, 0x2b,
	0xbd, 0xba, 0xf2, 0x4a, 0x6f, 0xae, 0x3c, 0xe7, 0xe7, 0xa9, 0xe7, 0xbc, 0x9c, 0x7a, 0xce, 0x6f,
	0x53, 0xcf, 0xb9, 0x9c, 0x7a, 0xce, 0xef, 0x53, 0xcf, 0x79, 0x3d, 0xf5, 0x4a, 0x6f, 0xa6, 0x9e,
	0xf3, 0xcb, 0xb5, 0x57, 0xba, 0xbc, 0xf6, 0x4a, 0xaf, 0xae, 0xbd, 0x12, 0xb8, 0x42, 0xb6, 0xb2,
	0x1e, 0x96, 0x09, 0x0b, 0xf2, 0x77, 0xcf, 0x84, 0xd3, 0x77, 0x7e, 0x7c, 0x30, 0x5a, 0xd0, 0x09,
	0xd9, 0xb6, 0xdf, 0x1f, 0x69, 0x9e, 0xf9, 0x4d, 0x74, 0xb6, 0xa9, 0xa5, 0x4f, 0xff, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0x2a, 0x75, 0x71, 0xb4, 0x67, 0x09, 0x00, 0x00,
}

func (this *WorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecution)
	if !ok {
		that2, ok := that.(WorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	return true
}
func (this *WorkflowExecutionFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionFilter)
	if !ok {
		that2, ok := that.(WorkflowExecutionFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	return true
}
func (this *WorkerVersionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkerVersionInfo)
	if !ok {
		that2, ok := that.(WorkerVersionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Impl != that1.Impl {
		return false
	}
	if this.FeatureVersion != that1.FeatureVersion {
		return false
	}
	return true
}
func (this *WorkflowExecutionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionInfo)
	if !ok {
		that2, ok := that.(WorkflowExecutionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.CloseTime.Equal(that1.CloseTime) {
		return false
	}
	if this.CloseStatus != that1.CloseStatus {
		return false
	}
	if this.HistoryLength != that1.HistoryLength {
		return false
	}
	if this.ParentDomainId != that1.ParentDomainId {
		return false
	}
	if !this.ParentExecution.Equal(that1.ParentExecution) {
		return false
	}
	if this.ExecutionTime != that1.ExecutionTime {
		return false
	}
	if !this.Memo.Equal(that1.Memo) {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	if !this.AutoResetPoints.Equal(that1.AutoResetPoints) {
		return false
	}
	return true
}
func (this *WorkflowExecutionConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionConfiguration)
	if !ok {
		that2, ok := that.(WorkflowExecutionConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TaskList.Equal(that1.TaskList) {
		return false
	}
	if this.ExecutionStartToCloseTimeoutSeconds != that1.ExecutionStartToCloseTimeoutSeconds {
		return false
	}
	if this.TaskStartToCloseTimeoutSeconds != that1.TaskStartToCloseTimeoutSeconds {
		return false
	}
	return true
}
func (this *PendingActivityInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PendingActivityInfo)
	if !ok {
		that2, ok := that.(PendingActivityInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActivityID != that1.ActivityID {
		return false
	}
	if !this.ActivityType.Equal(that1.ActivityType) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !bytes.Equal(this.HeartbeatDetails, that1.HeartbeatDetails) {
		return false
	}
	if this.LastHeartbeatTimestamp != that1.LastHeartbeatTimestamp {
		return false
	}
	if this.LastStartedTimestamp != that1.LastStartedTimestamp {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if this.MaximumAttempts != that1.MaximumAttempts {
		return false
	}
	if this.ScheduledTimestamp != that1.ScheduledTimestamp {
		return false
	}
	if this.ExpirationTimestamp != that1.ExpirationTimestamp {
		return false
	}
	if this.LastFailureReason != that1.LastFailureReason {
		return false
	}
	if this.LastWorkerIdentity != that1.LastWorkerIdentity {
		return false
	}
	if !bytes.Equal(this.LastFailureDetails, that1.LastFailureDetails) {
		return false
	}
	return true
}
func (this *PendingChildExecutionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PendingChildExecutionInfo)
	if !ok {
		that2, ok := that.(PendingChildExecutionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkflowID != that1.WorkflowID {
		return false
	}
	if this.RunID != that1.RunID {
		return false
	}
	if this.WorkflowTypName != that1.WorkflowTypName {
		return false
	}
	if this.InitiatedID != that1.InitiatedID {
		return false
	}
	if this.ParentClosePolicy != that1.ParentClosePolicy {
		return false
	}
	return true
}
func (this *ParentExecutionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParentExecutionInfo)
	if !ok {
		that2, ok := that.(ParentExecutionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainUUID != that1.DomainUUID {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	if this.InitiatedId != that1.InitiatedId {
		return false
	}
	return true
}
func (this *WorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common.WorkflowExecution{")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common.WorkflowExecutionFilter{")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkerVersionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common.WorkerVersionInfo{")
	s = append(s, "Impl: "+fmt.Sprintf("%#v", this.Impl)+",\n")
	s = append(s, "FeatureVersion: "+fmt.Sprintf("%#v", this.FeatureVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&common.WorkflowExecutionInfo{")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	if this.StartTime != nil {
		s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	}
	if this.CloseTime != nil {
		s = append(s, "CloseTime: "+fmt.Sprintf("%#v", this.CloseTime)+",\n")
	}
	s = append(s, "CloseStatus: "+fmt.Sprintf("%#v", this.CloseStatus)+",\n")
	s = append(s, "HistoryLength: "+fmt.Sprintf("%#v", this.HistoryLength)+",\n")
	s = append(s, "ParentDomainId: "+fmt.Sprintf("%#v", this.ParentDomainId)+",\n")
	if this.ParentExecution != nil {
		s = append(s, "ParentExecution: "+fmt.Sprintf("%#v", this.ParentExecution)+",\n")
	}
	s = append(s, "ExecutionTime: "+fmt.Sprintf("%#v", this.ExecutionTime)+",\n")
	if this.Memo != nil {
		s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	}
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	if this.AutoResetPoints != nil {
		s = append(s, "AutoResetPoints: "+fmt.Sprintf("%#v", this.AutoResetPoints)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&common.WorkflowExecutionConfiguration{")
	if this.TaskList != nil {
		s = append(s, "TaskList: "+fmt.Sprintf("%#v", this.TaskList)+",\n")
	}
	s = append(s, "ExecutionStartToCloseTimeoutSeconds: "+fmt.Sprintf("%#v", this.ExecutionStartToCloseTimeoutSeconds)+",\n")
	s = append(s, "TaskStartToCloseTimeoutSeconds: "+fmt.Sprintf("%#v", this.TaskStartToCloseTimeoutSeconds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PendingActivityInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&common.PendingActivityInfo{")
	s = append(s, "ActivityID: "+fmt.Sprintf("%#v", this.ActivityID)+",\n")
	if this.ActivityType != nil {
		s = append(s, "ActivityType: "+fmt.Sprintf("%#v", this.ActivityType)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "HeartbeatDetails: "+fmt.Sprintf("%#v", this.HeartbeatDetails)+",\n")
	s = append(s, "LastHeartbeatTimestamp: "+fmt.Sprintf("%#v", this.LastHeartbeatTimestamp)+",\n")
	s = append(s, "LastStartedTimestamp: "+fmt.Sprintf("%#v", this.LastStartedTimestamp)+",\n")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	s = append(s, "MaximumAttempts: "+fmt.Sprintf("%#v", this.MaximumAttempts)+",\n")
	s = append(s, "ScheduledTimestamp: "+fmt.Sprintf("%#v", this.ScheduledTimestamp)+",\n")
	s = append(s, "ExpirationTimestamp: "+fmt.Sprintf("%#v", this.ExpirationTimestamp)+",\n")
	s = append(s, "LastFailureReason: "+fmt.Sprintf("%#v", this.LastFailureReason)+",\n")
	s = append(s, "LastWorkerIdentity: "+fmt.Sprintf("%#v", this.LastWorkerIdentity)+",\n")
	s = append(s, "LastFailureDetails: "+fmt.Sprintf("%#v", this.LastFailureDetails)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PendingChildExecutionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&common.PendingChildExecutionInfo{")
	s = append(s, "WorkflowID: "+fmt.Sprintf("%#v", this.WorkflowID)+",\n")
	s = append(s, "RunID: "+fmt.Sprintf("%#v", this.RunID)+",\n")
	s = append(s, "WorkflowTypName: "+fmt.Sprintf("%#v", this.WorkflowTypName)+",\n")
	s = append(s, "InitiatedID: "+fmt.Sprintf("%#v", this.InitiatedID)+",\n")
	s = append(s, "ParentClosePolicy: "+fmt.Sprintf("%#v", this.ParentClosePolicy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ParentExecutionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&common.ParentExecutionInfo{")
	s = append(s, "DomainUUID: "+fmt.Sprintf("%#v", this.DomainUUID)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	s = append(s, "InitiatedId: "+fmt.Sprintf("%#v", this.InitiatedId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringWorkflowExecution(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *WorkflowExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkerVersionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerVersionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerVersionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeatureVersion) > 0 {
		i -= len(m.FeatureVersion)
		copy(dAtA[i:], m.FeatureVersion)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.FeatureVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Impl) > 0 {
		i -= len(m.Impl)
		copy(dAtA[i:], m.Impl)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.Impl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoResetPoints != nil {
		{
			size, err := m.AutoResetPoints.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowExecution(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowExecution(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowExecution(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ExecutionTime != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.ExecutionTime))
		i--
		dAtA[i] = 0x48
	}
	if m.ParentExecution != nil {
		{
			size, err := m.ParentExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowExecution(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.ParentDomainId) > 0 {
		i -= len(m.ParentDomainId)
		copy(dAtA[i:], m.ParentDomainId)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.ParentDomainId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.HistoryLength != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.HistoryLength))
		i--
		dAtA[i] = 0x30
	}
	if m.CloseStatus != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.CloseStatus))
		i--
		dAtA[i] = 0x28
	}
	if m.CloseTime != nil {
		{
			size, err := m.CloseTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowExecution(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowExecution(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowExecution(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowExecution(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskStartToCloseTimeoutSeconds != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.TaskStartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x18
	}
	if m.ExecutionStartToCloseTimeoutSeconds != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.ExecutionStartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowExecution(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingActivityInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingActivityInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingActivityInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastFailureDetails) > 0 {
		i -= len(m.LastFailureDetails)
		copy(dAtA[i:], m.LastFailureDetails)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.LastFailureDetails)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.LastWorkerIdentity) > 0 {
		i -= len(m.LastWorkerIdentity)
		copy(dAtA[i:], m.LastWorkerIdentity)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.LastWorkerIdentity)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.LastFailureReason) > 0 {
		i -= len(m.LastFailureReason)
		copy(dAtA[i:], m.LastFailureReason)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.LastFailureReason)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ExpirationTimestamp != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.ExpirationTimestamp))
		i--
		dAtA[i] = 0x50
	}
	if m.ScheduledTimestamp != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.ScheduledTimestamp))
		i--
		dAtA[i] = 0x48
	}
	if m.MaximumAttempts != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.MaximumAttempts))
		i--
		dAtA[i] = 0x40
	}
	if m.Attempt != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x38
	}
	if m.LastStartedTimestamp != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.LastStartedTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.LastHeartbeatTimestamp != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.LastHeartbeatTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.HeartbeatDetails) > 0 {
		i -= len(m.HeartbeatDetails)
		copy(dAtA[i:], m.HeartbeatDetails)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.HeartbeatDetails)))
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowExecution(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActivityID) > 0 {
		i -= len(m.ActivityID)
		copy(dAtA[i:], m.ActivityID)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.ActivityID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingChildExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingChildExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingChildExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ParentClosePolicy != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.ParentClosePolicy))
		i--
		dAtA[i] = 0x28
	}
	if m.InitiatedID != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.InitiatedID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.WorkflowTypName) > 0 {
		i -= len(m.WorkflowTypName)
		copy(dAtA[i:], m.WorkflowTypName)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.WorkflowTypName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RunID) > 0 {
		i -= len(m.RunID)
		copy(dAtA[i:], m.RunID)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.RunID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WorkflowID) > 0 {
		i -= len(m.WorkflowID)
		copy(dAtA[i:], m.WorkflowID)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.WorkflowID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParentExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParentExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParentExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InitiatedId != 0 {
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(m.InitiatedId))
		i--
		dAtA[i] = 0x20
	}
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowExecution(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainUUID) > 0 {
		i -= len(m.DomainUUID)
		copy(dAtA[i:], m.DomainUUID)
		i = encodeVarintWorkflowExecution(dAtA, i, uint64(len(m.DomainUUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorkflowExecution(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorkflowExecution(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	return n
}

func (m *WorkerVersionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Impl)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	l = len(m.FeatureVersion)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.CloseTime != nil {
		l = m.CloseTime.Size()
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.CloseStatus != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.CloseStatus))
	}
	if m.HistoryLength != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.HistoryLength))
	}
	l = len(m.ParentDomainId)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.ParentExecution != nil {
		l = m.ParentExecution.Size()
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.ExecutionTime != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.ExecutionTime))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.AutoResetPoints != nil {
		l = m.AutoResetPoints.Size()
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.ExecutionStartToCloseTimeoutSeconds != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.ExecutionStartToCloseTimeoutSeconds))
	}
	if m.TaskStartToCloseTimeoutSeconds != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.TaskStartToCloseTimeoutSeconds))
	}
	return n
}

func (m *PendingActivityInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivityID)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.State))
	}
	l = len(m.HeartbeatDetails)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.LastHeartbeatTimestamp != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.LastHeartbeatTimestamp))
	}
	if m.LastStartedTimestamp != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.LastStartedTimestamp))
	}
	if m.Attempt != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.Attempt))
	}
	if m.MaximumAttempts != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.MaximumAttempts))
	}
	if m.ScheduledTimestamp != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.ScheduledTimestamp))
	}
	if m.ExpirationTimestamp != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.ExpirationTimestamp))
	}
	l = len(m.LastFailureReason)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	l = len(m.LastWorkerIdentity)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	l = len(m.LastFailureDetails)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	return n
}

func (m *PendingChildExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkflowID)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	l = len(m.RunID)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	l = len(m.WorkflowTypName)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.InitiatedID != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.InitiatedID))
	}
	if m.ParentClosePolicy != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.ParentClosePolicy))
	}
	return n
}

func (m *ParentExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainUUID)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovWorkflowExecution(uint64(l))
	}
	if m.InitiatedId != 0 {
		n += 1 + sovWorkflowExecution(uint64(m.InitiatedId))
	}
	return n
}

func sovWorkflowExecution(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorkflowExecution(x uint64) (n int) {
	return sovWorkflowExecution(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *WorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecution{`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionFilter{`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkerVersionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkerVersionInfo{`,
		`Impl:` + fmt.Sprintf("%v", this.Impl) + `,`,
		`FeatureVersion:` + fmt.Sprintf("%v", this.FeatureVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionInfo{`,
		`Execution:` + strings.Replace(this.Execution.String(), "WorkflowExecution", "WorkflowExecution", 1) + `,`,
		`Type:` + strings.Replace(fmt.Sprintf("%v", this.Type), "WorkflowType", "WorkflowType", 1) + `,`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Int64Value", "types.Int64Value", 1) + `,`,
		`CloseTime:` + strings.Replace(fmt.Sprintf("%v", this.CloseTime), "Int64Value", "types.Int64Value", 1) + `,`,
		`CloseStatus:` + fmt.Sprintf("%v", this.CloseStatus) + `,`,
		`HistoryLength:` + fmt.Sprintf("%v", this.HistoryLength) + `,`,
		`ParentDomainId:` + fmt.Sprintf("%v", this.ParentDomainId) + `,`,
		`ParentExecution:` + strings.Replace(this.ParentExecution.String(), "WorkflowExecution", "WorkflowExecution", 1) + `,`,
		`ExecutionTime:` + fmt.Sprintf("%v", this.ExecutionTime) + `,`,
		`Memo:` + strings.Replace(fmt.Sprintf("%v", this.Memo), "Memo", "Memo", 1) + `,`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "SearchAttributes", 1) + `,`,
		`AutoResetPoints:` + strings.Replace(fmt.Sprintf("%v", this.AutoResetPoints), "ResetPoints", "ResetPoints", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionConfiguration{`,
		`TaskList:` + strings.Replace(fmt.Sprintf("%v", this.TaskList), "TaskList", "TaskList", 1) + `,`,
		`ExecutionStartToCloseTimeoutSeconds:` + fmt.Sprintf("%v", this.ExecutionStartToCloseTimeoutSeconds) + `,`,
		`TaskStartToCloseTimeoutSeconds:` + fmt.Sprintf("%v", this.TaskStartToCloseTimeoutSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PendingActivityInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PendingActivityInfo{`,
		`ActivityID:` + fmt.Sprintf("%v", this.ActivityID) + `,`,
		`ActivityType:` + strings.Replace(fmt.Sprintf("%v", this.ActivityType), "ActivityType", "ActivityType", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`HeartbeatDetails:` + fmt.Sprintf("%v", this.HeartbeatDetails) + `,`,
		`LastHeartbeatTimestamp:` + fmt.Sprintf("%v", this.LastHeartbeatTimestamp) + `,`,
		`LastStartedTimestamp:` + fmt.Sprintf("%v", this.LastStartedTimestamp) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`MaximumAttempts:` + fmt.Sprintf("%v", this.MaximumAttempts) + `,`,
		`ScheduledTimestamp:` + fmt.Sprintf("%v", this.ScheduledTimestamp) + `,`,
		`ExpirationTimestamp:` + fmt.Sprintf("%v", this.ExpirationTimestamp) + `,`,
		`LastFailureReason:` + fmt.Sprintf("%v", this.LastFailureReason) + `,`,
		`LastWorkerIdentity:` + fmt.Sprintf("%v", this.LastWorkerIdentity) + `,`,
		`LastFailureDetails:` + fmt.Sprintf("%v", this.LastFailureDetails) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PendingChildExecutionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PendingChildExecutionInfo{`,
		`WorkflowID:` + fmt.Sprintf("%v", this.WorkflowID) + `,`,
		`RunID:` + fmt.Sprintf("%v", this.RunID) + `,`,
		`WorkflowTypName:` + fmt.Sprintf("%v", this.WorkflowTypName) + `,`,
		`InitiatedID:` + fmt.Sprintf("%v", this.InitiatedID) + `,`,
		`ParentClosePolicy:` + fmt.Sprintf("%v", this.ParentClosePolicy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ParentExecutionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ParentExecutionInfo{`,
		`DomainUUID:` + fmt.Sprintf("%v", this.DomainUUID) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Execution:` + strings.Replace(this.Execution.String(), "WorkflowExecution", "WorkflowExecution", 1) + `,`,
		`InitiatedId:` + fmt.Sprintf("%v", this.InitiatedId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringWorkflowExecution(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *WorkflowExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowExecution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowExecution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowExecution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowExecution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerVersionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowExecution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerVersionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerVersionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Impl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Impl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowExecution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowExecution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &WorkflowType{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &types.Int64Value{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloseTime == nil {
				m.CloseTime = &types.Int64Value{}
			}
			if err := m.CloseTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseStatus", wireType)
			}
			m.CloseStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CloseStatus |= enums.WorkflowExecutionCloseStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryLength", wireType)
			}
			m.HistoryLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentDomainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentDomainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentExecution == nil {
				m.ParentExecution = &WorkflowExecution{}
			}
			if err := m.ParentExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionTime", wireType)
			}
			m.ExecutionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoResetPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoResetPoints == nil {
				m.AutoResetPoints = &ResetPoints{}
			}
			if err := m.AutoResetPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowExecution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowExecution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionStartToCloseTimeoutSeconds", wireType)
			}
			m.ExecutionStartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionStartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStartToCloseTimeoutSeconds", wireType)
			}
			m.TaskStartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskStartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowExecution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingActivityInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowExecution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingActivityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingActivityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= enums.PendingActivityState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatDetails", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeartbeatDetails = append(m.HeartbeatDetails[:0], dAtA[iNdEx:postIndex]...)
			if m.HeartbeatDetails == nil {
				m.HeartbeatDetails = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatTimestamp", wireType)
			}
			m.LastHeartbeatTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeartbeatTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStartedTimestamp", wireType)
			}
			m.LastStartedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastStartedTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumAttempts", wireType)
			}
			m.MaximumAttempts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumAttempts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTimestamp", wireType)
			}
			m.ScheduledTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			m.ExpirationTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastFailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWorkerIdentity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastWorkerIdentity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailureDetails", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastFailureDetails = append(m.LastFailureDetails[:0], dAtA[iNdEx:postIndex]...)
			if m.LastFailureDetails == nil {
				m.LastFailureDetails = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowExecution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingChildExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowExecution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingChildExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingChildExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTypName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowTypName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedID", wireType)
			}
			m.InitiatedID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentClosePolicy", wireType)
			}
			m.ParentClosePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentClosePolicy |= enums.ParentClosePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowExecution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParentExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowExecution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParentExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParentExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedId", wireType)
			}
			m.InitiatedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowExecution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflowExecution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkflowExecution(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkflowExecution
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowExecution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkflowExecution
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWorkflowExecution
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWorkflowExecution
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWorkflowExecution        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkflowExecution          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWorkflowExecution = fmt.Errorf("proto: unexpected end of group")
)
