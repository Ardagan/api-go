// The MIT License (MIT)
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: workflowservice/request_response.proto

package workflowservice

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	common "go.temporal.io/temporal-proto/common"
	enums "go.temporal.io/temporal-proto/enums"
	token "go.temporal.io/temporal-proto/token"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RegisterDomainRequest struct {
	Name                                   string                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description                            string                                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	OwnerEmail                             string                                    `protobuf:"bytes,3,opt,name=ownerEmail,proto3" json:"ownerEmail,omitempty"`
	WorkflowExecutionRetentionPeriodInDays int32                                     `protobuf:"varint,4,opt,name=workflowExecutionRetentionPeriodInDays,proto3" json:"workflowExecutionRetentionPeriodInDays,omitempty"`
	EmitMetric                             bool                                      `protobuf:"varint,5,opt,name=emitMetric,proto3" json:"emitMetric,omitempty"`
	Clusters                               []*common.ClusterReplicationConfiguration `protobuf:"bytes,6,rep,name=clusters,proto3" json:"clusters,omitempty"`
	ActiveClusterName                      string                                    `protobuf:"bytes,7,opt,name=activeClusterName,proto3" json:"activeClusterName,omitempty"`
	// A key-value map for any customized purpose.
	Data                     map[string]string    `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SecurityToken            string               `protobuf:"bytes,9,opt,name=securityToken,proto3" json:"securityToken,omitempty"`
	IsGlobalDomain           bool                 `protobuf:"varint,10,opt,name=isGlobalDomain,proto3" json:"isGlobalDomain,omitempty"`
	HistoryArchivalStatus    enums.ArchivalStatus `protobuf:"varint,11,opt,name=historyArchivalStatus,proto3,enum=enums.ArchivalStatus" json:"historyArchivalStatus,omitempty"`
	HistoryArchivalURI       string               `protobuf:"bytes,12,opt,name=historyArchivalURI,proto3" json:"historyArchivalURI,omitempty"`
	VisibilityArchivalStatus enums.ArchivalStatus `protobuf:"varint,13,opt,name=visibilityArchivalStatus,proto3,enum=enums.ArchivalStatus" json:"visibilityArchivalStatus,omitempty"`
	VisibilityArchivalURI    string               `protobuf:"bytes,14,opt,name=visibilityArchivalURI,proto3" json:"visibilityArchivalURI,omitempty"`
}

func (m *RegisterDomainRequest) Reset()      { *m = RegisterDomainRequest{} }
func (*RegisterDomainRequest) ProtoMessage() {}
func (*RegisterDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{0}
}
func (m *RegisterDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterDomainRequest.Merge(m, src)
}
func (m *RegisterDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterDomainRequest proto.InternalMessageInfo

func (m *RegisterDomainRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterDomainRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RegisterDomainRequest) GetOwnerEmail() string {
	if m != nil {
		return m.OwnerEmail
	}
	return ""
}

func (m *RegisterDomainRequest) GetWorkflowExecutionRetentionPeriodInDays() int32 {
	if m != nil {
		return m.WorkflowExecutionRetentionPeriodInDays
	}
	return 0
}

func (m *RegisterDomainRequest) GetEmitMetric() bool {
	if m != nil {
		return m.EmitMetric
	}
	return false
}

func (m *RegisterDomainRequest) GetClusters() []*common.ClusterReplicationConfiguration {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *RegisterDomainRequest) GetActiveClusterName() string {
	if m != nil {
		return m.ActiveClusterName
	}
	return ""
}

func (m *RegisterDomainRequest) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RegisterDomainRequest) GetSecurityToken() string {
	if m != nil {
		return m.SecurityToken
	}
	return ""
}

func (m *RegisterDomainRequest) GetIsGlobalDomain() bool {
	if m != nil {
		return m.IsGlobalDomain
	}
	return false
}

func (m *RegisterDomainRequest) GetHistoryArchivalStatus() enums.ArchivalStatus {
	if m != nil {
		return m.HistoryArchivalStatus
	}
	return enums.ArchivalStatusDefault
}

func (m *RegisterDomainRequest) GetHistoryArchivalURI() string {
	if m != nil {
		return m.HistoryArchivalURI
	}
	return ""
}

func (m *RegisterDomainRequest) GetVisibilityArchivalStatus() enums.ArchivalStatus {
	if m != nil {
		return m.VisibilityArchivalStatus
	}
	return enums.ArchivalStatusDefault
}

func (m *RegisterDomainRequest) GetVisibilityArchivalURI() string {
	if m != nil {
		return m.VisibilityArchivalURI
	}
	return ""
}

type RegisterDomainResponse struct {
}

func (m *RegisterDomainResponse) Reset()      { *m = RegisterDomainResponse{} }
func (*RegisterDomainResponse) ProtoMessage() {}
func (*RegisterDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{1}
}
func (m *RegisterDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterDomainResponse.Merge(m, src)
}
func (m *RegisterDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterDomainResponse proto.InternalMessageInfo

type ListDomainsRequest struct {
	PageSize      int32                           `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	NextPageToken *token.HistoryContinuationToken `protobuf:"bytes,2,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
}

func (m *ListDomainsRequest) Reset()      { *m = ListDomainsRequest{} }
func (*ListDomainsRequest) ProtoMessage() {}
func (*ListDomainsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{2}
}
func (m *ListDomainsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDomainsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDomainsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDomainsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDomainsRequest.Merge(m, src)
}
func (m *ListDomainsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListDomainsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDomainsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDomainsRequest proto.InternalMessageInfo

func (m *ListDomainsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListDomainsRequest) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type ListDomainsResponse struct {
	Domains       []*DescribeDomainResponse       `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	NextPageToken *token.HistoryContinuationToken `protobuf:"bytes,2,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
}

func (m *ListDomainsResponse) Reset()      { *m = ListDomainsResponse{} }
func (*ListDomainsResponse) ProtoMessage() {}
func (*ListDomainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{3}
}
func (m *ListDomainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDomainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDomainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDomainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDomainsResponse.Merge(m, src)
}
func (m *ListDomainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListDomainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDomainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDomainsResponse proto.InternalMessageInfo

func (m *ListDomainsResponse) GetDomains() []*DescribeDomainResponse {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ListDomainsResponse) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type DescribeDomainRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *DescribeDomainRequest) Reset()      { *m = DescribeDomainRequest{} }
func (*DescribeDomainRequest) ProtoMessage() {}
func (*DescribeDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{4}
}
func (m *DescribeDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescribeDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescribeDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescribeDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeDomainRequest.Merge(m, src)
}
func (m *DescribeDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *DescribeDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeDomainRequest proto.InternalMessageInfo

func (m *DescribeDomainRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DescribeDomainRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type DescribeDomainResponse struct {
	DomainInfo               *common.DomainInfo                     `protobuf:"bytes,1,opt,name=domainInfo,proto3" json:"domainInfo,omitempty"`
	Configuration            *common.DomainConfiguration            `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
	ReplicationConfiguration *common.DomainReplicationConfiguration `protobuf:"bytes,3,opt,name=replicationConfiguration,proto3" json:"replicationConfiguration,omitempty"`
	FailoverVersion          int64                                  `protobuf:"varint,4,opt,name=failoverVersion,proto3" json:"failoverVersion,omitempty"`
	IsGlobalDomain           bool                                   `protobuf:"varint,5,opt,name=isGlobalDomain,proto3" json:"isGlobalDomain,omitempty"`
}

func (m *DescribeDomainResponse) Reset()      { *m = DescribeDomainResponse{} }
func (*DescribeDomainResponse) ProtoMessage() {}
func (*DescribeDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{5}
}
func (m *DescribeDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescribeDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescribeDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescribeDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeDomainResponse.Merge(m, src)
}
func (m *DescribeDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *DescribeDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeDomainResponse proto.InternalMessageInfo

func (m *DescribeDomainResponse) GetDomainInfo() *common.DomainInfo {
	if m != nil {
		return m.DomainInfo
	}
	return nil
}

func (m *DescribeDomainResponse) GetConfiguration() *common.DomainConfiguration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *DescribeDomainResponse) GetReplicationConfiguration() *common.DomainReplicationConfiguration {
	if m != nil {
		return m.ReplicationConfiguration
	}
	return nil
}

func (m *DescribeDomainResponse) GetFailoverVersion() int64 {
	if m != nil {
		return m.FailoverVersion
	}
	return 0
}

func (m *DescribeDomainResponse) GetIsGlobalDomain() bool {
	if m != nil {
		return m.IsGlobalDomain
	}
	return false
}

type UpdateDomainRequest struct {
	Name                     string                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdatedInfo              *common.UpdateDomainInfo               `protobuf:"bytes,2,opt,name=updatedInfo,proto3" json:"updatedInfo,omitempty"`
	Configuration            *common.DomainConfiguration            `protobuf:"bytes,3,opt,name=configuration,proto3" json:"configuration,omitempty"`
	ReplicationConfiguration *common.DomainReplicationConfiguration `protobuf:"bytes,4,opt,name=replicationConfiguration,proto3" json:"replicationConfiguration,omitempty"`
	SecurityToken            string                                 `protobuf:"bytes,5,opt,name=securityToken,proto3" json:"securityToken,omitempty"`
	DeleteBadBinary          string                                 `protobuf:"bytes,6,opt,name=deleteBadBinary,proto3" json:"deleteBadBinary,omitempty"`
}

func (m *UpdateDomainRequest) Reset()      { *m = UpdateDomainRequest{} }
func (*UpdateDomainRequest) ProtoMessage() {}
func (*UpdateDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{6}
}
func (m *UpdateDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDomainRequest.Merge(m, src)
}
func (m *UpdateDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDomainRequest proto.InternalMessageInfo

func (m *UpdateDomainRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateDomainRequest) GetUpdatedInfo() *common.UpdateDomainInfo {
	if m != nil {
		return m.UpdatedInfo
	}
	return nil
}

func (m *UpdateDomainRequest) GetConfiguration() *common.DomainConfiguration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *UpdateDomainRequest) GetReplicationConfiguration() *common.DomainReplicationConfiguration {
	if m != nil {
		return m.ReplicationConfiguration
	}
	return nil
}

func (m *UpdateDomainRequest) GetSecurityToken() string {
	if m != nil {
		return m.SecurityToken
	}
	return ""
}

func (m *UpdateDomainRequest) GetDeleteBadBinary() string {
	if m != nil {
		return m.DeleteBadBinary
	}
	return ""
}

type UpdateDomainResponse struct {
	DomainInfo               *common.DomainInfo                     `protobuf:"bytes,1,opt,name=domainInfo,proto3" json:"domainInfo,omitempty"`
	Configuration            *common.DomainConfiguration            `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
	ReplicationConfiguration *common.DomainReplicationConfiguration `protobuf:"bytes,3,opt,name=replicationConfiguration,proto3" json:"replicationConfiguration,omitempty"`
	FailoverVersion          int64                                  `protobuf:"varint,4,opt,name=failoverVersion,proto3" json:"failoverVersion,omitempty"`
	IsGlobalDomain           bool                                   `protobuf:"varint,5,opt,name=isGlobalDomain,proto3" json:"isGlobalDomain,omitempty"`
}

func (m *UpdateDomainResponse) Reset()      { *m = UpdateDomainResponse{} }
func (*UpdateDomainResponse) ProtoMessage() {}
func (*UpdateDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{7}
}
func (m *UpdateDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDomainResponse.Merge(m, src)
}
func (m *UpdateDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDomainResponse proto.InternalMessageInfo

func (m *UpdateDomainResponse) GetDomainInfo() *common.DomainInfo {
	if m != nil {
		return m.DomainInfo
	}
	return nil
}

func (m *UpdateDomainResponse) GetConfiguration() *common.DomainConfiguration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *UpdateDomainResponse) GetReplicationConfiguration() *common.DomainReplicationConfiguration {
	if m != nil {
		return m.ReplicationConfiguration
	}
	return nil
}

func (m *UpdateDomainResponse) GetFailoverVersion() int64 {
	if m != nil {
		return m.FailoverVersion
	}
	return 0
}

func (m *UpdateDomainResponse) GetIsGlobalDomain() bool {
	if m != nil {
		return m.IsGlobalDomain
	}
	return false
}

type DeprecateDomainRequest struct {
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SecurityToken string `protobuf:"bytes,2,opt,name=securityToken,proto3" json:"securityToken,omitempty"`
}

func (m *DeprecateDomainRequest) Reset()      { *m = DeprecateDomainRequest{} }
func (*DeprecateDomainRequest) ProtoMessage() {}
func (*DeprecateDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{8}
}
func (m *DeprecateDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeprecateDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeprecateDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeprecateDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeprecateDomainRequest.Merge(m, src)
}
func (m *DeprecateDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeprecateDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeprecateDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeprecateDomainRequest proto.InternalMessageInfo

func (m *DeprecateDomainRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeprecateDomainRequest) GetSecurityToken() string {
	if m != nil {
		return m.SecurityToken
	}
	return ""
}

type DeprecateDomainResponse struct {
}

func (m *DeprecateDomainResponse) Reset()      { *m = DeprecateDomainResponse{} }
func (*DeprecateDomainResponse) ProtoMessage() {}
func (*DeprecateDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{9}
}
func (m *DeprecateDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeprecateDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeprecateDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeprecateDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeprecateDomainResponse.Merge(m, src)
}
func (m *DeprecateDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeprecateDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeprecateDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeprecateDomainResponse proto.InternalMessageInfo

type StartWorkflowExecutionRequest struct {
	Domain                              string                      `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowId                          string                      `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	WorkflowType                        *common.WorkflowType        `protobuf:"bytes,3,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	TaskList                            *common.TaskList            `protobuf:"bytes,4,opt,name=taskList,proto3" json:"taskList,omitempty"`
	Input                               []byte                      `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ExecutionStartToCloseTimeoutSeconds int32                       `protobuf:"varint,6,opt,name=executionStartToCloseTimeoutSeconds,proto3" json:"executionStartToCloseTimeoutSeconds,omitempty"`
	TaskStartToCloseTimeoutSeconds      int32                       `protobuf:"varint,7,opt,name=taskStartToCloseTimeoutSeconds,proto3" json:"taskStartToCloseTimeoutSeconds,omitempty"`
	Identity                            string                      `protobuf:"bytes,8,opt,name=identity,proto3" json:"identity,omitempty"`
	RequestId                           string                      `protobuf:"bytes,9,opt,name=requestId,proto3" json:"requestId,omitempty"`
	WorkflowIdReusePolicy               enums.WorkflowIdReusePolicy `protobuf:"varint,10,opt,name=workflowIdReusePolicy,proto3,enum=enums.WorkflowIdReusePolicy" json:"workflowIdReusePolicy,omitempty"`
	RetryPolicy                         *common.RetryPolicy         `protobuf:"bytes,11,opt,name=retryPolicy,proto3" json:"retryPolicy,omitempty"`
	CronSchedule                        string                      `protobuf:"bytes,12,opt,name=cronSchedule,proto3" json:"cronSchedule,omitempty"`
	Memo                                *common.Memo                `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes                    *common.SearchAttributes    `protobuf:"bytes,14,opt,name=searchAttributes,proto3" json:"searchAttributes,omitempty"`
	Header                              *common.Header              `protobuf:"bytes,15,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *StartWorkflowExecutionRequest) Reset()      { *m = StartWorkflowExecutionRequest{} }
func (*StartWorkflowExecutionRequest) ProtoMessage() {}
func (*StartWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{10}
}
func (m *StartWorkflowExecutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartWorkflowExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartWorkflowExecutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartWorkflowExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartWorkflowExecutionRequest.Merge(m, src)
}
func (m *StartWorkflowExecutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartWorkflowExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartWorkflowExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartWorkflowExecutionRequest proto.InternalMessageInfo

func (m *StartWorkflowExecutionRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *StartWorkflowExecutionRequest) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *StartWorkflowExecutionRequest) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *StartWorkflowExecutionRequest) GetTaskList() *common.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *StartWorkflowExecutionRequest) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *StartWorkflowExecutionRequest) GetExecutionStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.ExecutionStartToCloseTimeoutSeconds
	}
	return 0
}

func (m *StartWorkflowExecutionRequest) GetTaskStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.TaskStartToCloseTimeoutSeconds
	}
	return 0
}

func (m *StartWorkflowExecutionRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *StartWorkflowExecutionRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *StartWorkflowExecutionRequest) GetWorkflowIdReusePolicy() enums.WorkflowIdReusePolicy {
	if m != nil {
		return m.WorkflowIdReusePolicy
	}
	return enums.WorkflowIdReusePolicyAllowDuplicate
}

func (m *StartWorkflowExecutionRequest) GetRetryPolicy() *common.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *StartWorkflowExecutionRequest) GetCronSchedule() string {
	if m != nil {
		return m.CronSchedule
	}
	return ""
}

func (m *StartWorkflowExecutionRequest) GetMemo() *common.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *StartWorkflowExecutionRequest) GetSearchAttributes() *common.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

func (m *StartWorkflowExecutionRequest) GetHeader() *common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type StartWorkflowExecutionResponse struct {
	RunId string `protobuf:"bytes,1,opt,name=runId,proto3" json:"runId,omitempty"`
}

func (m *StartWorkflowExecutionResponse) Reset()      { *m = StartWorkflowExecutionResponse{} }
func (*StartWorkflowExecutionResponse) ProtoMessage() {}
func (*StartWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{11}
}
func (m *StartWorkflowExecutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartWorkflowExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartWorkflowExecutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartWorkflowExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartWorkflowExecutionResponse.Merge(m, src)
}
func (m *StartWorkflowExecutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartWorkflowExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartWorkflowExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartWorkflowExecutionResponse proto.InternalMessageInfo

func (m *StartWorkflowExecutionResponse) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type GetWorkflowExecutionHistoryRequest struct {
	Domain                 string                          `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Execution              *common.WorkflowExecution       `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
	MaximumPageSize        int32                           `protobuf:"varint,3,opt,name=maximumPageSize,proto3" json:"maximumPageSize,omitempty"`
	NextPageToken          *token.HistoryContinuationToken `protobuf:"bytes,4,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
	WaitForNewEvent        bool                            `protobuf:"varint,5,opt,name=waitForNewEvent,proto3" json:"waitForNewEvent,omitempty"`
	HistoryEventFilterType enums.HistoryEventFilterType    `protobuf:"varint,6,opt,name=HistoryEventFilterType,proto3,enum=enums.HistoryEventFilterType" json:"HistoryEventFilterType,omitempty"`
}

func (m *GetWorkflowExecutionHistoryRequest) Reset()      { *m = GetWorkflowExecutionHistoryRequest{} }
func (*GetWorkflowExecutionHistoryRequest) ProtoMessage() {}
func (*GetWorkflowExecutionHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{12}
}
func (m *GetWorkflowExecutionHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkflowExecutionHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkflowExecutionHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkflowExecutionHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowExecutionHistoryRequest.Merge(m, src)
}
func (m *GetWorkflowExecutionHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkflowExecutionHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowExecutionHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowExecutionHistoryRequest proto.InternalMessageInfo

func (m *GetWorkflowExecutionHistoryRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *GetWorkflowExecutionHistoryRequest) GetExecution() *common.WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *GetWorkflowExecutionHistoryRequest) GetMaximumPageSize() int32 {
	if m != nil {
		return m.MaximumPageSize
	}
	return 0
}

func (m *GetWorkflowExecutionHistoryRequest) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *GetWorkflowExecutionHistoryRequest) GetWaitForNewEvent() bool {
	if m != nil {
		return m.WaitForNewEvent
	}
	return false
}

func (m *GetWorkflowExecutionHistoryRequest) GetHistoryEventFilterType() enums.HistoryEventFilterType {
	if m != nil {
		return m.HistoryEventFilterType
	}
	return enums.HistoryEventFilterTypeAllEvent
}

type GetWorkflowExecutionHistoryResponse struct {
	History       *common.History                 `protobuf:"bytes,1,opt,name=history,proto3" json:"history,omitempty"`
	NextPageToken *token.HistoryContinuationToken `protobuf:"bytes,2,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
	Archived      bool                            `protobuf:"varint,3,opt,name=archived,proto3" json:"archived,omitempty"`
}

func (m *GetWorkflowExecutionHistoryResponse) Reset()      { *m = GetWorkflowExecutionHistoryResponse{} }
func (*GetWorkflowExecutionHistoryResponse) ProtoMessage() {}
func (*GetWorkflowExecutionHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{13}
}
func (m *GetWorkflowExecutionHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkflowExecutionHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkflowExecutionHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkflowExecutionHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowExecutionHistoryResponse.Merge(m, src)
}
func (m *GetWorkflowExecutionHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkflowExecutionHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowExecutionHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowExecutionHistoryResponse proto.InternalMessageInfo

func (m *GetWorkflowExecutionHistoryResponse) GetHistory() *common.History {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *GetWorkflowExecutionHistoryResponse) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *GetWorkflowExecutionHistoryResponse) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

type PollForDecisionTaskRequest struct {
	Domain         string           `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList       *common.TaskList `protobuf:"bytes,2,opt,name=taskList,proto3" json:"taskList,omitempty"`
	Identity       string           `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	BinaryChecksum string           `protobuf:"bytes,4,opt,name=binaryChecksum,proto3" json:"binaryChecksum,omitempty"`
}

func (m *PollForDecisionTaskRequest) Reset()      { *m = PollForDecisionTaskRequest{} }
func (*PollForDecisionTaskRequest) ProtoMessage() {}
func (*PollForDecisionTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{14}
}
func (m *PollForDecisionTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollForDecisionTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollForDecisionTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollForDecisionTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollForDecisionTaskRequest.Merge(m, src)
}
func (m *PollForDecisionTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *PollForDecisionTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollForDecisionTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollForDecisionTaskRequest proto.InternalMessageInfo

func (m *PollForDecisionTaskRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *PollForDecisionTaskRequest) GetTaskList() *common.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *PollForDecisionTaskRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *PollForDecisionTaskRequest) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

type PollForDecisionTaskResponse struct {
	TaskToken                 []byte                           `protobuf:"bytes,1,opt,name=taskToken,proto3" json:"taskToken,omitempty"`
	WorkflowExecution         *common.WorkflowExecution        `protobuf:"bytes,2,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	WorkflowType              *common.WorkflowType             `protobuf:"bytes,3,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	PreviousStartedEventId    int64                            `protobuf:"varint,4,opt,name=previousStartedEventId,proto3" json:"previousStartedEventId,omitempty"`
	StartedEventId            int64                            `protobuf:"varint,5,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
	Attempt                   int64                            `protobuf:"varint,6,opt,name=attempt,proto3" json:"attempt,omitempty"`
	BacklogCountHint          int64                            `protobuf:"varint,7,opt,name=backlogCountHint,proto3" json:"backlogCountHint,omitempty"`
	History                   *common.History                  `protobuf:"bytes,8,opt,name=history,proto3" json:"history,omitempty"`
	NextPageToken             *token.HistoryContinuationToken  `protobuf:"bytes,9,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
	Query                     *common.WorkflowQuery            `protobuf:"bytes,10,opt,name=query,proto3" json:"query,omitempty"`
	WorkflowExecutionTaskList *common.TaskList                 `protobuf:"bytes,11,opt,name=WorkflowExecutionTaskList,proto3" json:"WorkflowExecutionTaskList,omitempty"`
	ScheduledTimestamp        int64                            `protobuf:"varint,12,opt,name=scheduledTimestamp,proto3" json:"scheduledTimestamp,omitempty"`
	StartedTimestamp          int64                            `protobuf:"varint,13,opt,name=startedTimestamp,proto3" json:"startedTimestamp,omitempty"`
	Queries                   map[string]*common.WorkflowQuery `protobuf:"bytes,14,rep,name=queries,proto3" json:"queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PollForDecisionTaskResponse) Reset()      { *m = PollForDecisionTaskResponse{} }
func (*PollForDecisionTaskResponse) ProtoMessage() {}
func (*PollForDecisionTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{15}
}
func (m *PollForDecisionTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollForDecisionTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollForDecisionTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollForDecisionTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollForDecisionTaskResponse.Merge(m, src)
}
func (m *PollForDecisionTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *PollForDecisionTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollForDecisionTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollForDecisionTaskResponse proto.InternalMessageInfo

func (m *PollForDecisionTaskResponse) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetWorkflowExecution() *common.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetPreviousStartedEventId() int64 {
	if m != nil {
		return m.PreviousStartedEventId
	}
	return 0
}

func (m *PollForDecisionTaskResponse) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *PollForDecisionTaskResponse) GetAttempt() int64 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *PollForDecisionTaskResponse) GetBacklogCountHint() int64 {
	if m != nil {
		return m.BacklogCountHint
	}
	return 0
}

func (m *PollForDecisionTaskResponse) GetHistory() *common.History {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetQuery() *common.WorkflowQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetWorkflowExecutionTaskList() *common.TaskList {
	if m != nil {
		return m.WorkflowExecutionTaskList
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetScheduledTimestamp() int64 {
	if m != nil {
		return m.ScheduledTimestamp
	}
	return 0
}

func (m *PollForDecisionTaskResponse) GetStartedTimestamp() int64 {
	if m != nil {
		return m.StartedTimestamp
	}
	return 0
}

func (m *PollForDecisionTaskResponse) GetQueries() map[string]*common.WorkflowQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

type RespondDecisionTaskCompletedRequest struct {
	TaskToken                  []byte                                 `protobuf:"bytes,1,opt,name=taskToken,proto3" json:"taskToken,omitempty"`
	Decisions                  []*common.Decision                     `protobuf:"bytes,2,rep,name=decisions,proto3" json:"decisions,omitempty"`
	ExecutionContext           []byte                                 `protobuf:"bytes,3,opt,name=executionContext,proto3" json:"executionContext,omitempty"`
	Identity                   string                                 `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	StickyAttributes           *common.StickyExecutionAttributes      `protobuf:"bytes,5,opt,name=stickyAttributes,proto3" json:"stickyAttributes,omitempty"`
	ReturnNewDecisionTask      bool                                   `protobuf:"varint,6,opt,name=returnNewDecisionTask,proto3" json:"returnNewDecisionTask,omitempty"`
	ForceCreateNewDecisionTask bool                                   `protobuf:"varint,7,opt,name=forceCreateNewDecisionTask,proto3" json:"forceCreateNewDecisionTask,omitempty"`
	BinaryChecksum             string                                 `protobuf:"bytes,8,opt,name=binaryChecksum,proto3" json:"binaryChecksum,omitempty"`
	QueryResults               map[string]*common.WorkflowQueryResult `protobuf:"bytes,9,rep,name=queryResults,proto3" json:"queryResults,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RespondDecisionTaskCompletedRequest) Reset()      { *m = RespondDecisionTaskCompletedRequest{} }
func (*RespondDecisionTaskCompletedRequest) ProtoMessage() {}
func (*RespondDecisionTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{16}
}
func (m *RespondDecisionTaskCompletedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondDecisionTaskCompletedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondDecisionTaskCompletedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondDecisionTaskCompletedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondDecisionTaskCompletedRequest.Merge(m, src)
}
func (m *RespondDecisionTaskCompletedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondDecisionTaskCompletedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondDecisionTaskCompletedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondDecisionTaskCompletedRequest proto.InternalMessageInfo

func (m *RespondDecisionTaskCompletedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondDecisionTaskCompletedRequest) GetDecisions() []*common.Decision {
	if m != nil {
		return m.Decisions
	}
	return nil
}

func (m *RespondDecisionTaskCompletedRequest) GetExecutionContext() []byte {
	if m != nil {
		return m.ExecutionContext
	}
	return nil
}

func (m *RespondDecisionTaskCompletedRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *RespondDecisionTaskCompletedRequest) GetStickyAttributes() *common.StickyExecutionAttributes {
	if m != nil {
		return m.StickyAttributes
	}
	return nil
}

func (m *RespondDecisionTaskCompletedRequest) GetReturnNewDecisionTask() bool {
	if m != nil {
		return m.ReturnNewDecisionTask
	}
	return false
}

func (m *RespondDecisionTaskCompletedRequest) GetForceCreateNewDecisionTask() bool {
	if m != nil {
		return m.ForceCreateNewDecisionTask
	}
	return false
}

func (m *RespondDecisionTaskCompletedRequest) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

func (m *RespondDecisionTaskCompletedRequest) GetQueryResults() map[string]*common.WorkflowQueryResult {
	if m != nil {
		return m.QueryResults
	}
	return nil
}

type RespondDecisionTaskCompletedResponse struct {
	DecisionTask *PollForDecisionTaskResponse `protobuf:"bytes,1,opt,name=decisionTask,proto3" json:"decisionTask,omitempty"`
}

func (m *RespondDecisionTaskCompletedResponse) Reset()      { *m = RespondDecisionTaskCompletedResponse{} }
func (*RespondDecisionTaskCompletedResponse) ProtoMessage() {}
func (*RespondDecisionTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{17}
}
func (m *RespondDecisionTaskCompletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondDecisionTaskCompletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondDecisionTaskCompletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondDecisionTaskCompletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondDecisionTaskCompletedResponse.Merge(m, src)
}
func (m *RespondDecisionTaskCompletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondDecisionTaskCompletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondDecisionTaskCompletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondDecisionTaskCompletedResponse proto.InternalMessageInfo

func (m *RespondDecisionTaskCompletedResponse) GetDecisionTask() *PollForDecisionTaskResponse {
	if m != nil {
		return m.DecisionTask
	}
	return nil
}

type RespondDecisionTaskFailedRequest struct {
	TaskToken      []byte                        `protobuf:"bytes,1,opt,name=taskToken,proto3" json:"taskToken,omitempty"`
	Cause          enums.DecisionTaskFailedCause `protobuf:"varint,2,opt,name=cause,proto3,enum=enums.DecisionTaskFailedCause" json:"cause,omitempty"`
	Details        []byte                        `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	Identity       string                        `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	BinaryChecksum string                        `protobuf:"bytes,5,opt,name=binaryChecksum,proto3" json:"binaryChecksum,omitempty"`
}

func (m *RespondDecisionTaskFailedRequest) Reset()      { *m = RespondDecisionTaskFailedRequest{} }
func (*RespondDecisionTaskFailedRequest) ProtoMessage() {}
func (*RespondDecisionTaskFailedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{18}
}
func (m *RespondDecisionTaskFailedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondDecisionTaskFailedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondDecisionTaskFailedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondDecisionTaskFailedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondDecisionTaskFailedRequest.Merge(m, src)
}
func (m *RespondDecisionTaskFailedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondDecisionTaskFailedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondDecisionTaskFailedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondDecisionTaskFailedRequest proto.InternalMessageInfo

func (m *RespondDecisionTaskFailedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondDecisionTaskFailedRequest) GetCause() enums.DecisionTaskFailedCause {
	if m != nil {
		return m.Cause
	}
	return enums.DecisionTaskFailedCauseUnhandledDecision
}

func (m *RespondDecisionTaskFailedRequest) GetDetails() []byte {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RespondDecisionTaskFailedRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *RespondDecisionTaskFailedRequest) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

type RespondDecisionTaskFailedResponse struct {
}

func (m *RespondDecisionTaskFailedResponse) Reset()      { *m = RespondDecisionTaskFailedResponse{} }
func (*RespondDecisionTaskFailedResponse) ProtoMessage() {}
func (*RespondDecisionTaskFailedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{19}
}
func (m *RespondDecisionTaskFailedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondDecisionTaskFailedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondDecisionTaskFailedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondDecisionTaskFailedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondDecisionTaskFailedResponse.Merge(m, src)
}
func (m *RespondDecisionTaskFailedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondDecisionTaskFailedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondDecisionTaskFailedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondDecisionTaskFailedResponse proto.InternalMessageInfo

type PollForActivityTaskRequest struct {
	Domain           string                   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList         *common.TaskList         `protobuf:"bytes,2,opt,name=taskList,proto3" json:"taskList,omitempty"`
	Identity         string                   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	TaskListMetadata *common.TaskListMetadata `protobuf:"bytes,4,opt,name=taskListMetadata,proto3" json:"taskListMetadata,omitempty"`
}

func (m *PollForActivityTaskRequest) Reset()      { *m = PollForActivityTaskRequest{} }
func (*PollForActivityTaskRequest) ProtoMessage() {}
func (*PollForActivityTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{20}
}
func (m *PollForActivityTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollForActivityTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollForActivityTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollForActivityTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollForActivityTaskRequest.Merge(m, src)
}
func (m *PollForActivityTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *PollForActivityTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollForActivityTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollForActivityTaskRequest proto.InternalMessageInfo

func (m *PollForActivityTaskRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *PollForActivityTaskRequest) GetTaskList() *common.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *PollForActivityTaskRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *PollForActivityTaskRequest) GetTaskListMetadata() *common.TaskListMetadata {
	if m != nil {
		return m.TaskListMetadata
	}
	return nil
}

type PollForActivityTaskResponse struct {
	TaskToken                       []byte                    `protobuf:"bytes,1,opt,name=taskToken,proto3" json:"taskToken,omitempty"`
	WorkflowExecution               *common.WorkflowExecution `protobuf:"bytes,2,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	ActivityId                      string                    `protobuf:"bytes,3,opt,name=activityId,proto3" json:"activityId,omitempty"`
	ActivityType                    *common.ActivityType      `protobuf:"bytes,4,opt,name=activityType,proto3" json:"activityType,omitempty"`
	Input                           []byte                    `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ScheduledTimestamp              int64                     `protobuf:"varint,6,opt,name=scheduledTimestamp,proto3" json:"scheduledTimestamp,omitempty"`
	ScheduleToCloseTimeoutSeconds   int32                     `protobuf:"varint,7,opt,name=scheduleToCloseTimeoutSeconds,proto3" json:"scheduleToCloseTimeoutSeconds,omitempty"`
	StartedTimestamp                int64                     `protobuf:"varint,8,opt,name=startedTimestamp,proto3" json:"startedTimestamp,omitempty"`
	StartToCloseTimeoutSeconds      int32                     `protobuf:"varint,9,opt,name=startToCloseTimeoutSeconds,proto3" json:"startToCloseTimeoutSeconds,omitempty"`
	HeartbeatTimeoutSeconds         int32                     `protobuf:"varint,10,opt,name=heartbeatTimeoutSeconds,proto3" json:"heartbeatTimeoutSeconds,omitempty"`
	Attempt                         int32                     `protobuf:"varint,11,opt,name=attempt,proto3" json:"attempt,omitempty"`
	ScheduledTimestampOfThisAttempt int64                     `protobuf:"varint,12,opt,name=scheduledTimestampOfThisAttempt,proto3" json:"scheduledTimestampOfThisAttempt,omitempty"`
	HeartbeatDetails                []byte                    `protobuf:"bytes,13,opt,name=heartbeatDetails,proto3" json:"heartbeatDetails,omitempty"`
	WorkflowType                    *common.WorkflowType      `protobuf:"bytes,14,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	WorkflowDomain                  string                    `protobuf:"bytes,15,opt,name=workflowDomain,proto3" json:"workflowDomain,omitempty"`
	Header                          *common.Header            `protobuf:"bytes,16,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *PollForActivityTaskResponse) Reset()      { *m = PollForActivityTaskResponse{} }
func (*PollForActivityTaskResponse) ProtoMessage() {}
func (*PollForActivityTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{21}
}
func (m *PollForActivityTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollForActivityTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollForActivityTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollForActivityTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollForActivityTaskResponse.Merge(m, src)
}
func (m *PollForActivityTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *PollForActivityTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollForActivityTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollForActivityTaskResponse proto.InternalMessageInfo

func (m *PollForActivityTaskResponse) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetWorkflowExecution() *common.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *PollForActivityTaskResponse) GetActivityType() *common.ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetScheduledTimestamp() int64 {
	if m != nil {
		return m.ScheduledTimestamp
	}
	return 0
}

func (m *PollForActivityTaskResponse) GetScheduleToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.ScheduleToCloseTimeoutSeconds
	}
	return 0
}

func (m *PollForActivityTaskResponse) GetStartedTimestamp() int64 {
	if m != nil {
		return m.StartedTimestamp
	}
	return 0
}

func (m *PollForActivityTaskResponse) GetStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.StartToCloseTimeoutSeconds
	}
	return 0
}

func (m *PollForActivityTaskResponse) GetHeartbeatTimeoutSeconds() int32 {
	if m != nil {
		return m.HeartbeatTimeoutSeconds
	}
	return 0
}

func (m *PollForActivityTaskResponse) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *PollForActivityTaskResponse) GetScheduledTimestampOfThisAttempt() int64 {
	if m != nil {
		return m.ScheduledTimestampOfThisAttempt
	}
	return 0
}

func (m *PollForActivityTaskResponse) GetHeartbeatDetails() []byte {
	if m != nil {
		return m.HeartbeatDetails
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetWorkflowDomain() string {
	if m != nil {
		return m.WorkflowDomain
	}
	return ""
}

func (m *PollForActivityTaskResponse) GetHeader() *common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type RecordActivityTaskHeartbeatRequest struct {
	TaskToken []byte `protobuf:"bytes,1,opt,name=taskToken,proto3" json:"taskToken,omitempty"`
	Details   []byte `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Identity  string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RecordActivityTaskHeartbeatRequest) Reset()      { *m = RecordActivityTaskHeartbeatRequest{} }
func (*RecordActivityTaskHeartbeatRequest) ProtoMessage() {}
func (*RecordActivityTaskHeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{22}
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordActivityTaskHeartbeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordActivityTaskHeartbeatRequest.Merge(m, src)
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordActivityTaskHeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordActivityTaskHeartbeatRequest proto.InternalMessageInfo

func (m *RecordActivityTaskHeartbeatRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RecordActivityTaskHeartbeatRequest) GetDetails() []byte {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RecordActivityTaskHeartbeatRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RecordActivityTaskHeartbeatResponse struct {
	CancelRequested bool `protobuf:"varint,1,opt,name=cancelRequested,proto3" json:"cancelRequested,omitempty"`
}

func (m *RecordActivityTaskHeartbeatResponse) Reset()      { *m = RecordActivityTaskHeartbeatResponse{} }
func (*RecordActivityTaskHeartbeatResponse) ProtoMessage() {}
func (*RecordActivityTaskHeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{23}
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordActivityTaskHeartbeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordActivityTaskHeartbeatResponse.Merge(m, src)
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordActivityTaskHeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordActivityTaskHeartbeatResponse proto.InternalMessageInfo

func (m *RecordActivityTaskHeartbeatResponse) GetCancelRequested() bool {
	if m != nil {
		return m.CancelRequested
	}
	return false
}

type RecordActivityTaskHeartbeatByIDRequest struct {
	Domain     string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowID string `protobuf:"bytes,2,opt,name=workflowID,proto3" json:"workflowID,omitempty"`
	RunID      string `protobuf:"bytes,3,opt,name=runID,proto3" json:"runID,omitempty"`
	ActivityID string `protobuf:"bytes,4,opt,name=activityID,proto3" json:"activityID,omitempty"`
	Details    []byte `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	Identity   string `protobuf:"bytes,6,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RecordActivityTaskHeartbeatByIDRequest) Reset() {
	*m = RecordActivityTaskHeartbeatByIDRequest{}
}
func (*RecordActivityTaskHeartbeatByIDRequest) ProtoMessage() {}
func (*RecordActivityTaskHeartbeatByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{24}
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordActivityTaskHeartbeatByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordActivityTaskHeartbeatByIDRequest.Merge(m, src)
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordActivityTaskHeartbeatByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordActivityTaskHeartbeatByIDRequest proto.InternalMessageInfo

func (m *RecordActivityTaskHeartbeatByIDRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RecordActivityTaskHeartbeatByIDRequest) GetWorkflowID() string {
	if m != nil {
		return m.WorkflowID
	}
	return ""
}

func (m *RecordActivityTaskHeartbeatByIDRequest) GetRunID() string {
	if m != nil {
		return m.RunID
	}
	return ""
}

func (m *RecordActivityTaskHeartbeatByIDRequest) GetActivityID() string {
	if m != nil {
		return m.ActivityID
	}
	return ""
}

func (m *RecordActivityTaskHeartbeatByIDRequest) GetDetails() []byte {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RecordActivityTaskHeartbeatByIDRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RecordActivityTaskHeartbeatByIDResponse struct {
	CancelRequested bool `protobuf:"varint,1,opt,name=cancelRequested,proto3" json:"cancelRequested,omitempty"`
}

func (m *RecordActivityTaskHeartbeatByIDResponse) Reset() {
	*m = RecordActivityTaskHeartbeatByIDResponse{}
}
func (*RecordActivityTaskHeartbeatByIDResponse) ProtoMessage() {}
func (*RecordActivityTaskHeartbeatByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{25}
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordActivityTaskHeartbeatByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordActivityTaskHeartbeatByIDResponse.Merge(m, src)
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordActivityTaskHeartbeatByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordActivityTaskHeartbeatByIDResponse proto.InternalMessageInfo

func (m *RecordActivityTaskHeartbeatByIDResponse) GetCancelRequested() bool {
	if m != nil {
		return m.CancelRequested
	}
	return false
}

type RespondActivityTaskCompletedRequest struct {
	TaskToken []byte `protobuf:"bytes,1,opt,name=taskToken,proto3" json:"taskToken,omitempty"`
	Result    []byte `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Identity  string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RespondActivityTaskCompletedRequest) Reset()      { *m = RespondActivityTaskCompletedRequest{} }
func (*RespondActivityTaskCompletedRequest) ProtoMessage() {}
func (*RespondActivityTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{26}
}
func (m *RespondActivityTaskCompletedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCompletedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCompletedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCompletedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCompletedRequest.Merge(m, src)
}
func (m *RespondActivityTaskCompletedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCompletedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCompletedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCompletedRequest proto.InternalMessageInfo

func (m *RespondActivityTaskCompletedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondActivityTaskCompletedRequest) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RespondActivityTaskCompletedRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskCompletedResponse struct {
}

func (m *RespondActivityTaskCompletedResponse) Reset()      { *m = RespondActivityTaskCompletedResponse{} }
func (*RespondActivityTaskCompletedResponse) ProtoMessage() {}
func (*RespondActivityTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{27}
}
func (m *RespondActivityTaskCompletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCompletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCompletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCompletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCompletedResponse.Merge(m, src)
}
func (m *RespondActivityTaskCompletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCompletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCompletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCompletedResponse proto.InternalMessageInfo

type RespondActivityTaskCompletedByIDRequest struct {
	Domain     string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowID string `protobuf:"bytes,2,opt,name=workflowID,proto3" json:"workflowID,omitempty"`
	RunID      string `protobuf:"bytes,3,opt,name=runID,proto3" json:"runID,omitempty"`
	ActivityID string `protobuf:"bytes,4,opt,name=activityID,proto3" json:"activityID,omitempty"`
	Result     []byte `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	Identity   string `protobuf:"bytes,6,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RespondActivityTaskCompletedByIDRequest) Reset() {
	*m = RespondActivityTaskCompletedByIDRequest{}
}
func (*RespondActivityTaskCompletedByIDRequest) ProtoMessage() {}
func (*RespondActivityTaskCompletedByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{28}
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCompletedByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCompletedByIDRequest.Merge(m, src)
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCompletedByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCompletedByIDRequest proto.InternalMessageInfo

func (m *RespondActivityTaskCompletedByIDRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RespondActivityTaskCompletedByIDRequest) GetWorkflowID() string {
	if m != nil {
		return m.WorkflowID
	}
	return ""
}

func (m *RespondActivityTaskCompletedByIDRequest) GetRunID() string {
	if m != nil {
		return m.RunID
	}
	return ""
}

func (m *RespondActivityTaskCompletedByIDRequest) GetActivityID() string {
	if m != nil {
		return m.ActivityID
	}
	return ""
}

func (m *RespondActivityTaskCompletedByIDRequest) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RespondActivityTaskCompletedByIDRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskCompletedByIDResponse struct {
}

func (m *RespondActivityTaskCompletedByIDResponse) Reset() {
	*m = RespondActivityTaskCompletedByIDResponse{}
}
func (*RespondActivityTaskCompletedByIDResponse) ProtoMessage() {}
func (*RespondActivityTaskCompletedByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{29}
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCompletedByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCompletedByIDResponse.Merge(m, src)
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCompletedByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCompletedByIDResponse proto.InternalMessageInfo

type RespondActivityTaskFailedRequest struct {
	TaskToken []byte `protobuf:"bytes,1,opt,name=taskToken,proto3" json:"taskToken,omitempty"`
	Reason    string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Details   []byte `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	Identity  string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RespondActivityTaskFailedRequest) Reset()      { *m = RespondActivityTaskFailedRequest{} }
func (*RespondActivityTaskFailedRequest) ProtoMessage() {}
func (*RespondActivityTaskFailedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{30}
}
func (m *RespondActivityTaskFailedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskFailedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskFailedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskFailedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskFailedRequest.Merge(m, src)
}
func (m *RespondActivityTaskFailedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskFailedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskFailedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskFailedRequest proto.InternalMessageInfo

func (m *RespondActivityTaskFailedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondActivityTaskFailedRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RespondActivityTaskFailedRequest) GetDetails() []byte {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RespondActivityTaskFailedRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskFailedResponse struct {
}

func (m *RespondActivityTaskFailedResponse) Reset()      { *m = RespondActivityTaskFailedResponse{} }
func (*RespondActivityTaskFailedResponse) ProtoMessage() {}
func (*RespondActivityTaskFailedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{31}
}
func (m *RespondActivityTaskFailedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskFailedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskFailedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskFailedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskFailedResponse.Merge(m, src)
}
func (m *RespondActivityTaskFailedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskFailedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskFailedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskFailedResponse proto.InternalMessageInfo

type RespondActivityTaskFailedByIDRequest struct {
	Domain     string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowID string `protobuf:"bytes,2,opt,name=workflowID,proto3" json:"workflowID,omitempty"`
	RunID      string `protobuf:"bytes,3,opt,name=runID,proto3" json:"runID,omitempty"`
	ActivityID string `protobuf:"bytes,4,opt,name=activityID,proto3" json:"activityID,omitempty"`
	Reason     string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	Details    []byte `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`
	Identity   string `protobuf:"bytes,7,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RespondActivityTaskFailedByIDRequest) Reset()      { *m = RespondActivityTaskFailedByIDRequest{} }
func (*RespondActivityTaskFailedByIDRequest) ProtoMessage() {}
func (*RespondActivityTaskFailedByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{32}
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskFailedByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskFailedByIDRequest.Merge(m, src)
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskFailedByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskFailedByIDRequest proto.InternalMessageInfo

func (m *RespondActivityTaskFailedByIDRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RespondActivityTaskFailedByIDRequest) GetWorkflowID() string {
	if m != nil {
		return m.WorkflowID
	}
	return ""
}

func (m *RespondActivityTaskFailedByIDRequest) GetRunID() string {
	if m != nil {
		return m.RunID
	}
	return ""
}

func (m *RespondActivityTaskFailedByIDRequest) GetActivityID() string {
	if m != nil {
		return m.ActivityID
	}
	return ""
}

func (m *RespondActivityTaskFailedByIDRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RespondActivityTaskFailedByIDRequest) GetDetails() []byte {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RespondActivityTaskFailedByIDRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskFailedByIDResponse struct {
}

func (m *RespondActivityTaskFailedByIDResponse) Reset()      { *m = RespondActivityTaskFailedByIDResponse{} }
func (*RespondActivityTaskFailedByIDResponse) ProtoMessage() {}
func (*RespondActivityTaskFailedByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{33}
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskFailedByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskFailedByIDResponse.Merge(m, src)
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskFailedByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskFailedByIDResponse proto.InternalMessageInfo

type RespondActivityTaskCanceledRequest struct {
	TaskToken []byte `protobuf:"bytes,1,opt,name=taskToken,proto3" json:"taskToken,omitempty"`
	Details   []byte `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Identity  string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RespondActivityTaskCanceledRequest) Reset()      { *m = RespondActivityTaskCanceledRequest{} }
func (*RespondActivityTaskCanceledRequest) ProtoMessage() {}
func (*RespondActivityTaskCanceledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{34}
}
func (m *RespondActivityTaskCanceledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCanceledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCanceledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCanceledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCanceledRequest.Merge(m, src)
}
func (m *RespondActivityTaskCanceledRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCanceledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCanceledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCanceledRequest proto.InternalMessageInfo

func (m *RespondActivityTaskCanceledRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondActivityTaskCanceledRequest) GetDetails() []byte {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RespondActivityTaskCanceledRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskCanceledResponse struct {
}

func (m *RespondActivityTaskCanceledResponse) Reset()      { *m = RespondActivityTaskCanceledResponse{} }
func (*RespondActivityTaskCanceledResponse) ProtoMessage() {}
func (*RespondActivityTaskCanceledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{35}
}
func (m *RespondActivityTaskCanceledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCanceledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCanceledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCanceledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCanceledResponse.Merge(m, src)
}
func (m *RespondActivityTaskCanceledResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCanceledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCanceledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCanceledResponse proto.InternalMessageInfo

type RespondActivityTaskCanceledByIDRequest struct {
	Domain     string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowID string `protobuf:"bytes,2,opt,name=workflowID,proto3" json:"workflowID,omitempty"`
	RunID      string `protobuf:"bytes,3,opt,name=runID,proto3" json:"runID,omitempty"`
	ActivityID string `protobuf:"bytes,4,opt,name=activityID,proto3" json:"activityID,omitempty"`
	Details    []byte `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	Identity   string `protobuf:"bytes,6,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RespondActivityTaskCanceledByIDRequest) Reset() {
	*m = RespondActivityTaskCanceledByIDRequest{}
}
func (*RespondActivityTaskCanceledByIDRequest) ProtoMessage() {}
func (*RespondActivityTaskCanceledByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{36}
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCanceledByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCanceledByIDRequest.Merge(m, src)
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCanceledByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCanceledByIDRequest proto.InternalMessageInfo

func (m *RespondActivityTaskCanceledByIDRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RespondActivityTaskCanceledByIDRequest) GetWorkflowID() string {
	if m != nil {
		return m.WorkflowID
	}
	return ""
}

func (m *RespondActivityTaskCanceledByIDRequest) GetRunID() string {
	if m != nil {
		return m.RunID
	}
	return ""
}

func (m *RespondActivityTaskCanceledByIDRequest) GetActivityID() string {
	if m != nil {
		return m.ActivityID
	}
	return ""
}

func (m *RespondActivityTaskCanceledByIDRequest) GetDetails() []byte {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RespondActivityTaskCanceledByIDRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskCanceledByIDResponse struct {
}

func (m *RespondActivityTaskCanceledByIDResponse) Reset() {
	*m = RespondActivityTaskCanceledByIDResponse{}
}
func (*RespondActivityTaskCanceledByIDResponse) ProtoMessage() {}
func (*RespondActivityTaskCanceledByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{37}
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCanceledByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCanceledByIDResponse.Merge(m, src)
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCanceledByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCanceledByIDResponse proto.InternalMessageInfo

type RequestCancelWorkflowExecutionRequest struct {
	Domain            string                    `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	Identity          string                    `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	RequestId         string                    `protobuf:"bytes,4,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (m *RequestCancelWorkflowExecutionRequest) Reset()      { *m = RequestCancelWorkflowExecutionRequest{} }
func (*RequestCancelWorkflowExecutionRequest) ProtoMessage() {}
func (*RequestCancelWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{38}
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelWorkflowExecutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelWorkflowExecutionRequest.Merge(m, src)
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelWorkflowExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelWorkflowExecutionRequest proto.InternalMessageInfo

func (m *RequestCancelWorkflowExecutionRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RequestCancelWorkflowExecutionRequest) GetWorkflowExecution() *common.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *RequestCancelWorkflowExecutionRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *RequestCancelWorkflowExecutionRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type RequestCancelWorkflowExecutionResponse struct {
}

func (m *RequestCancelWorkflowExecutionResponse) Reset() {
	*m = RequestCancelWorkflowExecutionResponse{}
}
func (*RequestCancelWorkflowExecutionResponse) ProtoMessage() {}
func (*RequestCancelWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{39}
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelWorkflowExecutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelWorkflowExecutionResponse.Merge(m, src)
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelWorkflowExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelWorkflowExecutionResponse proto.InternalMessageInfo

type SignalWorkflowExecutionRequest struct {
	Domain            string                    `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	SignalName        string                    `protobuf:"bytes,3,opt,name=signalName,proto3" json:"signalName,omitempty"`
	Input             []byte                    `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Identity          string                    `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	RequestId         string                    `protobuf:"bytes,6,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Control           []byte                    `protobuf:"bytes,7,opt,name=control,proto3" json:"control,omitempty"`
}

func (m *SignalWorkflowExecutionRequest) Reset()      { *m = SignalWorkflowExecutionRequest{} }
func (*SignalWorkflowExecutionRequest) ProtoMessage() {}
func (*SignalWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{40}
}
func (m *SignalWorkflowExecutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalWorkflowExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalWorkflowExecutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalWorkflowExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalWorkflowExecutionRequest.Merge(m, src)
}
func (m *SignalWorkflowExecutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignalWorkflowExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalWorkflowExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignalWorkflowExecutionRequest proto.InternalMessageInfo

func (m *SignalWorkflowExecutionRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *SignalWorkflowExecutionRequest) GetWorkflowExecution() *common.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *SignalWorkflowExecutionRequest) GetSignalName() string {
	if m != nil {
		return m.SignalName
	}
	return ""
}

func (m *SignalWorkflowExecutionRequest) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *SignalWorkflowExecutionRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *SignalWorkflowExecutionRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *SignalWorkflowExecutionRequest) GetControl() []byte {
	if m != nil {
		return m.Control
	}
	return nil
}

type SignalWorkflowExecutionResponse struct {
}

func (m *SignalWorkflowExecutionResponse) Reset()      { *m = SignalWorkflowExecutionResponse{} }
func (*SignalWorkflowExecutionResponse) ProtoMessage() {}
func (*SignalWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{41}
}
func (m *SignalWorkflowExecutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalWorkflowExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalWorkflowExecutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalWorkflowExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalWorkflowExecutionResponse.Merge(m, src)
}
func (m *SignalWorkflowExecutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignalWorkflowExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalWorkflowExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignalWorkflowExecutionResponse proto.InternalMessageInfo

type SignalWithStartWorkflowExecutionRequest struct {
	Domain                              string                      `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowId                          string                      `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	WorkflowType                        *common.WorkflowType        `protobuf:"bytes,3,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	TaskList                            *common.TaskList            `protobuf:"bytes,4,opt,name=taskList,proto3" json:"taskList,omitempty"`
	Input                               []byte                      `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ExecutionStartToCloseTimeoutSeconds int32                       `protobuf:"varint,6,opt,name=executionStartToCloseTimeoutSeconds,proto3" json:"executionStartToCloseTimeoutSeconds,omitempty"`
	TaskStartToCloseTimeoutSeconds      int32                       `protobuf:"varint,7,opt,name=taskStartToCloseTimeoutSeconds,proto3" json:"taskStartToCloseTimeoutSeconds,omitempty"`
	Identity                            string                      `protobuf:"bytes,8,opt,name=identity,proto3" json:"identity,omitempty"`
	RequestId                           string                      `protobuf:"bytes,9,opt,name=requestId,proto3" json:"requestId,omitempty"`
	WorkflowIdReusePolicy               enums.WorkflowIdReusePolicy `protobuf:"varint,10,opt,name=workflowIdReusePolicy,proto3,enum=enums.WorkflowIdReusePolicy" json:"workflowIdReusePolicy,omitempty"`
	SignalName                          string                      `protobuf:"bytes,11,opt,name=signalName,proto3" json:"signalName,omitempty"`
	SignalInput                         []byte                      `protobuf:"bytes,12,opt,name=signalInput,proto3" json:"signalInput,omitempty"`
	Control                             []byte                      `protobuf:"bytes,13,opt,name=control,proto3" json:"control,omitempty"`
	RetryPolicy                         *common.RetryPolicy         `protobuf:"bytes,14,opt,name=retryPolicy,proto3" json:"retryPolicy,omitempty"`
	CronSchedule                        string                      `protobuf:"bytes,15,opt,name=cronSchedule,proto3" json:"cronSchedule,omitempty"`
	Memo                                *common.Memo                `protobuf:"bytes,16,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes                    *common.SearchAttributes    `protobuf:"bytes,17,opt,name=searchAttributes,proto3" json:"searchAttributes,omitempty"`
	Header                              *common.Header              `protobuf:"bytes,18,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *SignalWithStartWorkflowExecutionRequest) Reset() {
	*m = SignalWithStartWorkflowExecutionRequest{}
}
func (*SignalWithStartWorkflowExecutionRequest) ProtoMessage() {}
func (*SignalWithStartWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{42}
}
func (m *SignalWithStartWorkflowExecutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalWithStartWorkflowExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalWithStartWorkflowExecutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalWithStartWorkflowExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalWithStartWorkflowExecutionRequest.Merge(m, src)
}
func (m *SignalWithStartWorkflowExecutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignalWithStartWorkflowExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalWithStartWorkflowExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignalWithStartWorkflowExecutionRequest proto.InternalMessageInfo

func (m *SignalWithStartWorkflowExecutionRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *SignalWithStartWorkflowExecutionRequest) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *SignalWithStartWorkflowExecutionRequest) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *SignalWithStartWorkflowExecutionRequest) GetTaskList() *common.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *SignalWithStartWorkflowExecutionRequest) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *SignalWithStartWorkflowExecutionRequest) GetExecutionStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.ExecutionStartToCloseTimeoutSeconds
	}
	return 0
}

func (m *SignalWithStartWorkflowExecutionRequest) GetTaskStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.TaskStartToCloseTimeoutSeconds
	}
	return 0
}

func (m *SignalWithStartWorkflowExecutionRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *SignalWithStartWorkflowExecutionRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *SignalWithStartWorkflowExecutionRequest) GetWorkflowIdReusePolicy() enums.WorkflowIdReusePolicy {
	if m != nil {
		return m.WorkflowIdReusePolicy
	}
	return enums.WorkflowIdReusePolicyAllowDuplicate
}

func (m *SignalWithStartWorkflowExecutionRequest) GetSignalName() string {
	if m != nil {
		return m.SignalName
	}
	return ""
}

func (m *SignalWithStartWorkflowExecutionRequest) GetSignalInput() []byte {
	if m != nil {
		return m.SignalInput
	}
	return nil
}

func (m *SignalWithStartWorkflowExecutionRequest) GetControl() []byte {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *SignalWithStartWorkflowExecutionRequest) GetRetryPolicy() *common.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *SignalWithStartWorkflowExecutionRequest) GetCronSchedule() string {
	if m != nil {
		return m.CronSchedule
	}
	return ""
}

func (m *SignalWithStartWorkflowExecutionRequest) GetMemo() *common.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *SignalWithStartWorkflowExecutionRequest) GetSearchAttributes() *common.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

func (m *SignalWithStartWorkflowExecutionRequest) GetHeader() *common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type SignalWithStartWorkflowExecutionResponse struct {
	RunId string `protobuf:"bytes,1,opt,name=runId,proto3" json:"runId,omitempty"`
}

func (m *SignalWithStartWorkflowExecutionResponse) Reset() {
	*m = SignalWithStartWorkflowExecutionResponse{}
}
func (*SignalWithStartWorkflowExecutionResponse) ProtoMessage() {}
func (*SignalWithStartWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{43}
}
func (m *SignalWithStartWorkflowExecutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalWithStartWorkflowExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalWithStartWorkflowExecutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalWithStartWorkflowExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalWithStartWorkflowExecutionResponse.Merge(m, src)
}
func (m *SignalWithStartWorkflowExecutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignalWithStartWorkflowExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalWithStartWorkflowExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignalWithStartWorkflowExecutionResponse proto.InternalMessageInfo

func (m *SignalWithStartWorkflowExecutionResponse) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type ResetWorkflowExecutionRequest struct {
	Domain                string                    `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution     *common.WorkflowExecution `protobuf:"bytes,2,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	Reason                string                    `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	DecisionFinishEventId int64                     `protobuf:"varint,4,opt,name=decisionFinishEventId,proto3" json:"decisionFinishEventId,omitempty"`
	RequestId             string                    `protobuf:"bytes,5,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (m *ResetWorkflowExecutionRequest) Reset()      { *m = ResetWorkflowExecutionRequest{} }
func (*ResetWorkflowExecutionRequest) ProtoMessage() {}
func (*ResetWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{44}
}
func (m *ResetWorkflowExecutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetWorkflowExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetWorkflowExecutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetWorkflowExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetWorkflowExecutionRequest.Merge(m, src)
}
func (m *ResetWorkflowExecutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResetWorkflowExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetWorkflowExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetWorkflowExecutionRequest proto.InternalMessageInfo

func (m *ResetWorkflowExecutionRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ResetWorkflowExecutionRequest) GetWorkflowExecution() *common.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ResetWorkflowExecutionRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ResetWorkflowExecutionRequest) GetDecisionFinishEventId() int64 {
	if m != nil {
		return m.DecisionFinishEventId
	}
	return 0
}

func (m *ResetWorkflowExecutionRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type ResetWorkflowExecutionResponse struct {
	RunId string `protobuf:"bytes,1,opt,name=runId,proto3" json:"runId,omitempty"`
}

func (m *ResetWorkflowExecutionResponse) Reset()      { *m = ResetWorkflowExecutionResponse{} }
func (*ResetWorkflowExecutionResponse) ProtoMessage() {}
func (*ResetWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{45}
}
func (m *ResetWorkflowExecutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetWorkflowExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetWorkflowExecutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetWorkflowExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetWorkflowExecutionResponse.Merge(m, src)
}
func (m *ResetWorkflowExecutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResetWorkflowExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetWorkflowExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResetWorkflowExecutionResponse proto.InternalMessageInfo

func (m *ResetWorkflowExecutionResponse) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type TerminateWorkflowExecutionRequest struct {
	Domain            string                    `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	Reason            string                    `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Details           []byte                    `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	Identity          string                    `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *TerminateWorkflowExecutionRequest) Reset()      { *m = TerminateWorkflowExecutionRequest{} }
func (*TerminateWorkflowExecutionRequest) ProtoMessage() {}
func (*TerminateWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{46}
}
func (m *TerminateWorkflowExecutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TerminateWorkflowExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerminateWorkflowExecutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TerminateWorkflowExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminateWorkflowExecutionRequest.Merge(m, src)
}
func (m *TerminateWorkflowExecutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *TerminateWorkflowExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminateWorkflowExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TerminateWorkflowExecutionRequest proto.InternalMessageInfo

func (m *TerminateWorkflowExecutionRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *TerminateWorkflowExecutionRequest) GetWorkflowExecution() *common.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *TerminateWorkflowExecutionRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *TerminateWorkflowExecutionRequest) GetDetails() []byte {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *TerminateWorkflowExecutionRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type TerminateWorkflowExecutionResponse struct {
}

func (m *TerminateWorkflowExecutionResponse) Reset()      { *m = TerminateWorkflowExecutionResponse{} }
func (*TerminateWorkflowExecutionResponse) ProtoMessage() {}
func (*TerminateWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{47}
}
func (m *TerminateWorkflowExecutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TerminateWorkflowExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerminateWorkflowExecutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TerminateWorkflowExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminateWorkflowExecutionResponse.Merge(m, src)
}
func (m *TerminateWorkflowExecutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *TerminateWorkflowExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminateWorkflowExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TerminateWorkflowExecutionResponse proto.InternalMessageInfo

type ListOpenWorkflowExecutionsRequest struct {
	Domain          string                          `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	MaximumPageSize int32                           `protobuf:"varint,2,opt,name=maximumPageSize,proto3" json:"maximumPageSize,omitempty"`
	NextPageToken   *token.HistoryContinuationToken `protobuf:"bytes,3,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
	StartTimeFilter *common.StartTimeFilter         `protobuf:"bytes,4,opt,name=StartTimeFilter,proto3" json:"StartTimeFilter,omitempty"`
	// Types that are valid to be assigned to Filters:
	//	*ListOpenWorkflowExecutionsRequest_ExecutionFilter
	//	*ListOpenWorkflowExecutionsRequest_TypeFilter
	Filters isListOpenWorkflowExecutionsRequest_Filters `protobuf_oneof:"Filters"`
}

func (m *ListOpenWorkflowExecutionsRequest) Reset()      { *m = ListOpenWorkflowExecutionsRequest{} }
func (*ListOpenWorkflowExecutionsRequest) ProtoMessage() {}
func (*ListOpenWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{48}
}
func (m *ListOpenWorkflowExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListOpenWorkflowExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListOpenWorkflowExecutionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListOpenWorkflowExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOpenWorkflowExecutionsRequest.Merge(m, src)
}
func (m *ListOpenWorkflowExecutionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListOpenWorkflowExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOpenWorkflowExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListOpenWorkflowExecutionsRequest proto.InternalMessageInfo

type isListOpenWorkflowExecutionsRequest_Filters interface {
	isListOpenWorkflowExecutionsRequest_Filters()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListOpenWorkflowExecutionsRequest_ExecutionFilter struct {
	ExecutionFilter *common.WorkflowExecutionFilter `protobuf:"bytes,5,opt,name=executionFilter,proto3,oneof" json:"executionFilter,omitempty"`
}
type ListOpenWorkflowExecutionsRequest_TypeFilter struct {
	TypeFilter *common.WorkflowTypeFilter `protobuf:"bytes,6,opt,name=typeFilter,proto3,oneof" json:"typeFilter,omitempty"`
}

func (*ListOpenWorkflowExecutionsRequest_ExecutionFilter) isListOpenWorkflowExecutionsRequest_Filters() {
}
func (*ListOpenWorkflowExecutionsRequest_TypeFilter) isListOpenWorkflowExecutionsRequest_Filters() {}

func (m *ListOpenWorkflowExecutionsRequest) GetFilters() isListOpenWorkflowExecutionsRequest_Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *ListOpenWorkflowExecutionsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ListOpenWorkflowExecutionsRequest) GetMaximumPageSize() int32 {
	if m != nil {
		return m.MaximumPageSize
	}
	return 0
}

func (m *ListOpenWorkflowExecutionsRequest) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListOpenWorkflowExecutionsRequest) GetStartTimeFilter() *common.StartTimeFilter {
	if m != nil {
		return m.StartTimeFilter
	}
	return nil
}

func (m *ListOpenWorkflowExecutionsRequest) GetExecutionFilter() *common.WorkflowExecutionFilter {
	if x, ok := m.GetFilters().(*ListOpenWorkflowExecutionsRequest_ExecutionFilter); ok {
		return x.ExecutionFilter
	}
	return nil
}

func (m *ListOpenWorkflowExecutionsRequest) GetTypeFilter() *common.WorkflowTypeFilter {
	if x, ok := m.GetFilters().(*ListOpenWorkflowExecutionsRequest_TypeFilter); ok {
		return x.TypeFilter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListOpenWorkflowExecutionsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListOpenWorkflowExecutionsRequest_ExecutionFilter)(nil),
		(*ListOpenWorkflowExecutionsRequest_TypeFilter)(nil),
	}
}

type ListOpenWorkflowExecutionsResponse struct {
	Executions    []*common.WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken *token.HistoryContinuationToken `protobuf:"bytes,2,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
}

func (m *ListOpenWorkflowExecutionsResponse) Reset()      { *m = ListOpenWorkflowExecutionsResponse{} }
func (*ListOpenWorkflowExecutionsResponse) ProtoMessage() {}
func (*ListOpenWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{49}
}
func (m *ListOpenWorkflowExecutionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListOpenWorkflowExecutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListOpenWorkflowExecutionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListOpenWorkflowExecutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOpenWorkflowExecutionsResponse.Merge(m, src)
}
func (m *ListOpenWorkflowExecutionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListOpenWorkflowExecutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOpenWorkflowExecutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOpenWorkflowExecutionsResponse proto.InternalMessageInfo

func (m *ListOpenWorkflowExecutionsResponse) GetExecutions() []*common.WorkflowExecutionInfo {
	if m != nil {
		return m.Executions
	}
	return nil
}

func (m *ListOpenWorkflowExecutionsResponse) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type ListClosedWorkflowExecutionsRequest struct {
	Domain          string                          `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	MaximumPageSize int32                           `protobuf:"varint,2,opt,name=maximumPageSize,proto3" json:"maximumPageSize,omitempty"`
	NextPageToken   *token.HistoryContinuationToken `protobuf:"bytes,3,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
	StartTimeFilter *common.StartTimeFilter         `protobuf:"bytes,4,opt,name=StartTimeFilter,proto3" json:"StartTimeFilter,omitempty"`
	// Types that are valid to be assigned to Filters:
	//	*ListClosedWorkflowExecutionsRequest_ExecutionFilter
	//	*ListClosedWorkflowExecutionsRequest_TypeFilter
	//	*ListClosedWorkflowExecutionsRequest_StatusFilter
	Filters isListClosedWorkflowExecutionsRequest_Filters `protobuf_oneof:"Filters"`
}

func (m *ListClosedWorkflowExecutionsRequest) Reset()      { *m = ListClosedWorkflowExecutionsRequest{} }
func (*ListClosedWorkflowExecutionsRequest) ProtoMessage() {}
func (*ListClosedWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{50}
}
func (m *ListClosedWorkflowExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListClosedWorkflowExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListClosedWorkflowExecutionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListClosedWorkflowExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClosedWorkflowExecutionsRequest.Merge(m, src)
}
func (m *ListClosedWorkflowExecutionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListClosedWorkflowExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClosedWorkflowExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClosedWorkflowExecutionsRequest proto.InternalMessageInfo

type isListClosedWorkflowExecutionsRequest_Filters interface {
	isListClosedWorkflowExecutionsRequest_Filters()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListClosedWorkflowExecutionsRequest_ExecutionFilter struct {
	ExecutionFilter *common.WorkflowExecutionFilter `protobuf:"bytes,5,opt,name=executionFilter,proto3,oneof" json:"executionFilter,omitempty"`
}
type ListClosedWorkflowExecutionsRequest_TypeFilter struct {
	TypeFilter *common.WorkflowTypeFilter `protobuf:"bytes,6,opt,name=typeFilter,proto3,oneof" json:"typeFilter,omitempty"`
}
type ListClosedWorkflowExecutionsRequest_StatusFilter struct {
	StatusFilter *common.StatusFilter `protobuf:"bytes,7,opt,name=statusFilter,proto3,oneof" json:"statusFilter,omitempty"`
}

func (*ListClosedWorkflowExecutionsRequest_ExecutionFilter) isListClosedWorkflowExecutionsRequest_Filters() {
}
func (*ListClosedWorkflowExecutionsRequest_TypeFilter) isListClosedWorkflowExecutionsRequest_Filters() {
}
func (*ListClosedWorkflowExecutionsRequest_StatusFilter) isListClosedWorkflowExecutionsRequest_Filters() {
}

func (m *ListClosedWorkflowExecutionsRequest) GetFilters() isListClosedWorkflowExecutionsRequest_Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *ListClosedWorkflowExecutionsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ListClosedWorkflowExecutionsRequest) GetMaximumPageSize() int32 {
	if m != nil {
		return m.MaximumPageSize
	}
	return 0
}

func (m *ListClosedWorkflowExecutionsRequest) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListClosedWorkflowExecutionsRequest) GetStartTimeFilter() *common.StartTimeFilter {
	if m != nil {
		return m.StartTimeFilter
	}
	return nil
}

func (m *ListClosedWorkflowExecutionsRequest) GetExecutionFilter() *common.WorkflowExecutionFilter {
	if x, ok := m.GetFilters().(*ListClosedWorkflowExecutionsRequest_ExecutionFilter); ok {
		return x.ExecutionFilter
	}
	return nil
}

func (m *ListClosedWorkflowExecutionsRequest) GetTypeFilter() *common.WorkflowTypeFilter {
	if x, ok := m.GetFilters().(*ListClosedWorkflowExecutionsRequest_TypeFilter); ok {
		return x.TypeFilter
	}
	return nil
}

func (m *ListClosedWorkflowExecutionsRequest) GetStatusFilter() *common.StatusFilter {
	if x, ok := m.GetFilters().(*ListClosedWorkflowExecutionsRequest_StatusFilter); ok {
		return x.StatusFilter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListClosedWorkflowExecutionsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListClosedWorkflowExecutionsRequest_ExecutionFilter)(nil),
		(*ListClosedWorkflowExecutionsRequest_TypeFilter)(nil),
		(*ListClosedWorkflowExecutionsRequest_StatusFilter)(nil),
	}
}

type ListClosedWorkflowExecutionsResponse struct {
	Executions    []*common.WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken *token.HistoryContinuationToken `protobuf:"bytes,2,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
}

func (m *ListClosedWorkflowExecutionsResponse) Reset()      { *m = ListClosedWorkflowExecutionsResponse{} }
func (*ListClosedWorkflowExecutionsResponse) ProtoMessage() {}
func (*ListClosedWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{51}
}
func (m *ListClosedWorkflowExecutionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListClosedWorkflowExecutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListClosedWorkflowExecutionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListClosedWorkflowExecutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClosedWorkflowExecutionsResponse.Merge(m, src)
}
func (m *ListClosedWorkflowExecutionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListClosedWorkflowExecutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClosedWorkflowExecutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClosedWorkflowExecutionsResponse proto.InternalMessageInfo

func (m *ListClosedWorkflowExecutionsResponse) GetExecutions() []*common.WorkflowExecutionInfo {
	if m != nil {
		return m.Executions
	}
	return nil
}

func (m *ListClosedWorkflowExecutionsResponse) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type ListWorkflowExecutionsRequest struct {
	Domain        string                          `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	PageSize      int32                           `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	NextPageToken *token.HistoryContinuationToken `protobuf:"bytes,3,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
	Query         string                          `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *ListWorkflowExecutionsRequest) Reset()      { *m = ListWorkflowExecutionsRequest{} }
func (*ListWorkflowExecutionsRequest) ProtoMessage() {}
func (*ListWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{52}
}
func (m *ListWorkflowExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkflowExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkflowExecutionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkflowExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkflowExecutionsRequest.Merge(m, src)
}
func (m *ListWorkflowExecutionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkflowExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkflowExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkflowExecutionsRequest proto.InternalMessageInfo

func (m *ListWorkflowExecutionsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ListWorkflowExecutionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListWorkflowExecutionsRequest) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListWorkflowExecutionsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type ListWorkflowExecutionsResponse struct {
	Executions    []*common.WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken *token.HistoryContinuationToken `protobuf:"bytes,2,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
}

func (m *ListWorkflowExecutionsResponse) Reset()      { *m = ListWorkflowExecutionsResponse{} }
func (*ListWorkflowExecutionsResponse) ProtoMessage() {}
func (*ListWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{53}
}
func (m *ListWorkflowExecutionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkflowExecutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkflowExecutionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkflowExecutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkflowExecutionsResponse.Merge(m, src)
}
func (m *ListWorkflowExecutionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkflowExecutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkflowExecutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkflowExecutionsResponse proto.InternalMessageInfo

func (m *ListWorkflowExecutionsResponse) GetExecutions() []*common.WorkflowExecutionInfo {
	if m != nil {
		return m.Executions
	}
	return nil
}

func (m *ListWorkflowExecutionsResponse) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type ListArchivedWorkflowExecutionsRequest struct {
	Domain        string                          `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	PageSize      int32                           `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	NextPageToken *token.HistoryContinuationToken `protobuf:"bytes,3,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
	Query         string                          `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *ListArchivedWorkflowExecutionsRequest) Reset()      { *m = ListArchivedWorkflowExecutionsRequest{} }
func (*ListArchivedWorkflowExecutionsRequest) ProtoMessage() {}
func (*ListArchivedWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{54}
}
func (m *ListArchivedWorkflowExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListArchivedWorkflowExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListArchivedWorkflowExecutionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListArchivedWorkflowExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListArchivedWorkflowExecutionsRequest.Merge(m, src)
}
func (m *ListArchivedWorkflowExecutionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListArchivedWorkflowExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListArchivedWorkflowExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListArchivedWorkflowExecutionsRequest proto.InternalMessageInfo

func (m *ListArchivedWorkflowExecutionsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ListArchivedWorkflowExecutionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListArchivedWorkflowExecutionsRequest) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListArchivedWorkflowExecutionsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type ListArchivedWorkflowExecutionsResponse struct {
	Executions    []*common.WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken *token.HistoryContinuationToken `protobuf:"bytes,2,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
}

func (m *ListArchivedWorkflowExecutionsResponse) Reset() {
	*m = ListArchivedWorkflowExecutionsResponse{}
}
func (*ListArchivedWorkflowExecutionsResponse) ProtoMessage() {}
func (*ListArchivedWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{55}
}
func (m *ListArchivedWorkflowExecutionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListArchivedWorkflowExecutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListArchivedWorkflowExecutionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListArchivedWorkflowExecutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListArchivedWorkflowExecutionsResponse.Merge(m, src)
}
func (m *ListArchivedWorkflowExecutionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListArchivedWorkflowExecutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListArchivedWorkflowExecutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListArchivedWorkflowExecutionsResponse proto.InternalMessageInfo

func (m *ListArchivedWorkflowExecutionsResponse) GetExecutions() []*common.WorkflowExecutionInfo {
	if m != nil {
		return m.Executions
	}
	return nil
}

func (m *ListArchivedWorkflowExecutionsResponse) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type ScanWorkflowExecutionsRequest struct {
	Domain        string                          `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	PageSize      int32                           `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	NextPageToken *token.HistoryContinuationToken `protobuf:"bytes,3,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
	Query         string                          `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *ScanWorkflowExecutionsRequest) Reset()      { *m = ScanWorkflowExecutionsRequest{} }
func (*ScanWorkflowExecutionsRequest) ProtoMessage() {}
func (*ScanWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{56}
}
func (m *ScanWorkflowExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScanWorkflowExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScanWorkflowExecutionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScanWorkflowExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanWorkflowExecutionsRequest.Merge(m, src)
}
func (m *ScanWorkflowExecutionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScanWorkflowExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanWorkflowExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScanWorkflowExecutionsRequest proto.InternalMessageInfo

func (m *ScanWorkflowExecutionsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ScanWorkflowExecutionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ScanWorkflowExecutionsRequest) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ScanWorkflowExecutionsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type ScanWorkflowExecutionsResponse struct {
	Executions    []*common.WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken *token.HistoryContinuationToken `protobuf:"bytes,2,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
}

func (m *ScanWorkflowExecutionsResponse) Reset()      { *m = ScanWorkflowExecutionsResponse{} }
func (*ScanWorkflowExecutionsResponse) ProtoMessage() {}
func (*ScanWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{57}
}
func (m *ScanWorkflowExecutionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScanWorkflowExecutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScanWorkflowExecutionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScanWorkflowExecutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanWorkflowExecutionsResponse.Merge(m, src)
}
func (m *ScanWorkflowExecutionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScanWorkflowExecutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanWorkflowExecutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScanWorkflowExecutionsResponse proto.InternalMessageInfo

func (m *ScanWorkflowExecutionsResponse) GetExecutions() []*common.WorkflowExecutionInfo {
	if m != nil {
		return m.Executions
	}
	return nil
}

func (m *ScanWorkflowExecutionsResponse) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type CountWorkflowExecutionsRequest struct {
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Query  string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *CountWorkflowExecutionsRequest) Reset()      { *m = CountWorkflowExecutionsRequest{} }
func (*CountWorkflowExecutionsRequest) ProtoMessage() {}
func (*CountWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{58}
}
func (m *CountWorkflowExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountWorkflowExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountWorkflowExecutionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountWorkflowExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountWorkflowExecutionsRequest.Merge(m, src)
}
func (m *CountWorkflowExecutionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CountWorkflowExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountWorkflowExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountWorkflowExecutionsRequest proto.InternalMessageInfo

func (m *CountWorkflowExecutionsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CountWorkflowExecutionsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type CountWorkflowExecutionsResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *CountWorkflowExecutionsResponse) Reset()      { *m = CountWorkflowExecutionsResponse{} }
func (*CountWorkflowExecutionsResponse) ProtoMessage() {}
func (*CountWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{59}
}
func (m *CountWorkflowExecutionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountWorkflowExecutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountWorkflowExecutionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountWorkflowExecutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountWorkflowExecutionsResponse.Merge(m, src)
}
func (m *CountWorkflowExecutionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountWorkflowExecutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountWorkflowExecutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountWorkflowExecutionsResponse proto.InternalMessageInfo

func (m *CountWorkflowExecutionsResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetSearchAttributesRequest struct {
}

func (m *GetSearchAttributesRequest) Reset()      { *m = GetSearchAttributesRequest{} }
func (*GetSearchAttributesRequest) ProtoMessage() {}
func (*GetSearchAttributesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{60}
}
func (m *GetSearchAttributesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSearchAttributesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSearchAttributesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSearchAttributesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSearchAttributesRequest.Merge(m, src)
}
func (m *GetSearchAttributesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSearchAttributesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSearchAttributesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSearchAttributesRequest proto.InternalMessageInfo

type GetSearchAttributesResponse struct {
	Keys map[string]enums.IndexedValueType `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=enums.IndexedValueType"`
}

func (m *GetSearchAttributesResponse) Reset()      { *m = GetSearchAttributesResponse{} }
func (*GetSearchAttributesResponse) ProtoMessage() {}
func (*GetSearchAttributesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{61}
}
func (m *GetSearchAttributesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSearchAttributesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSearchAttributesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSearchAttributesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSearchAttributesResponse.Merge(m, src)
}
func (m *GetSearchAttributesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSearchAttributesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSearchAttributesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSearchAttributesResponse proto.InternalMessageInfo

func (m *GetSearchAttributesResponse) GetKeys() map[string]enums.IndexedValueType {
	if m != nil {
		return m.Keys
	}
	return nil
}

type RespondQueryTaskCompletedRequest struct {
	TaskToken         []byte                       `protobuf:"bytes,1,opt,name=taskToken,proto3" json:"taskToken,omitempty"`
	CompletedType     enums.QueryTaskCompletedType `protobuf:"varint,2,opt,name=completedType,proto3,enum=enums.QueryTaskCompletedType" json:"completedType,omitempty"`
	QueryResult       []byte                       `protobuf:"bytes,3,opt,name=queryResult,proto3" json:"queryResult,omitempty"`
	ErrorMessage      string                       `protobuf:"bytes,4,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	WorkerVersionInfo *common.WorkerVersionInfo    `protobuf:"bytes,5,opt,name=workerVersionInfo,proto3" json:"workerVersionInfo,omitempty"`
}

func (m *RespondQueryTaskCompletedRequest) Reset()      { *m = RespondQueryTaskCompletedRequest{} }
func (*RespondQueryTaskCompletedRequest) ProtoMessage() {}
func (*RespondQueryTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{62}
}
func (m *RespondQueryTaskCompletedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondQueryTaskCompletedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondQueryTaskCompletedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondQueryTaskCompletedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondQueryTaskCompletedRequest.Merge(m, src)
}
func (m *RespondQueryTaskCompletedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondQueryTaskCompletedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondQueryTaskCompletedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondQueryTaskCompletedRequest proto.InternalMessageInfo

func (m *RespondQueryTaskCompletedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondQueryTaskCompletedRequest) GetCompletedType() enums.QueryTaskCompletedType {
	if m != nil {
		return m.CompletedType
	}
	return enums.QueryTaskCompletedTypeCompleted
}

func (m *RespondQueryTaskCompletedRequest) GetQueryResult() []byte {
	if m != nil {
		return m.QueryResult
	}
	return nil
}

func (m *RespondQueryTaskCompletedRequest) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *RespondQueryTaskCompletedRequest) GetWorkerVersionInfo() *common.WorkerVersionInfo {
	if m != nil {
		return m.WorkerVersionInfo
	}
	return nil
}

type RespondQueryTaskCompletedResponse struct {
}

func (m *RespondQueryTaskCompletedResponse) Reset()      { *m = RespondQueryTaskCompletedResponse{} }
func (*RespondQueryTaskCompletedResponse) ProtoMessage() {}
func (*RespondQueryTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{63}
}
func (m *RespondQueryTaskCompletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondQueryTaskCompletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondQueryTaskCompletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondQueryTaskCompletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondQueryTaskCompletedResponse.Merge(m, src)
}
func (m *RespondQueryTaskCompletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondQueryTaskCompletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondQueryTaskCompletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondQueryTaskCompletedResponse proto.InternalMessageInfo

type ResetStickyTaskListRequest struct {
	Domain    string                    `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Execution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
}

func (m *ResetStickyTaskListRequest) Reset()      { *m = ResetStickyTaskListRequest{} }
func (*ResetStickyTaskListRequest) ProtoMessage() {}
func (*ResetStickyTaskListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{64}
}
func (m *ResetStickyTaskListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetStickyTaskListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetStickyTaskListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetStickyTaskListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetStickyTaskListRequest.Merge(m, src)
}
func (m *ResetStickyTaskListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResetStickyTaskListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetStickyTaskListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetStickyTaskListRequest proto.InternalMessageInfo

func (m *ResetStickyTaskListRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ResetStickyTaskListRequest) GetExecution() *common.WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

type ResetStickyTaskListResponse struct {
}

func (m *ResetStickyTaskListResponse) Reset()      { *m = ResetStickyTaskListResponse{} }
func (*ResetStickyTaskListResponse) ProtoMessage() {}
func (*ResetStickyTaskListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{65}
}
func (m *ResetStickyTaskListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetStickyTaskListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetStickyTaskListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetStickyTaskListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetStickyTaskListResponse.Merge(m, src)
}
func (m *ResetStickyTaskListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResetStickyTaskListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetStickyTaskListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResetStickyTaskListResponse proto.InternalMessageInfo

type QueryWorkflowRequest struct {
	Domain    string                    `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Execution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
	Query     *common.WorkflowQuery     `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	// QueryRejectCondition can used to reject the query if workflow state does not satisfy condition
	QueryRejectCondition  enums.QueryRejectCondition  `protobuf:"varint,4,opt,name=queryRejectCondition,proto3,enum=enums.QueryRejectCondition" json:"queryRejectCondition,omitempty"`
	QueryConsistencyLevel enums.QueryConsistencyLevel `protobuf:"varint,5,opt,name=queryConsistencyLevel,proto3,enum=enums.QueryConsistencyLevel" json:"queryConsistencyLevel,omitempty"`
}

func (m *QueryWorkflowRequest) Reset()      { *m = QueryWorkflowRequest{} }
func (*QueryWorkflowRequest) ProtoMessage() {}
func (*QueryWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{66}
}
func (m *QueryWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkflowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkflowRequest.Merge(m, src)
}
func (m *QueryWorkflowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkflowRequest proto.InternalMessageInfo

func (m *QueryWorkflowRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *QueryWorkflowRequest) GetExecution() *common.WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *QueryWorkflowRequest) GetQuery() *common.WorkflowQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *QueryWorkflowRequest) GetQueryRejectCondition() enums.QueryRejectCondition {
	if m != nil {
		return m.QueryRejectCondition
	}
	return enums.QueryRejectConditionNone
}

func (m *QueryWorkflowRequest) GetQueryConsistencyLevel() enums.QueryConsistencyLevel {
	if m != nil {
		return m.QueryConsistencyLevel
	}
	return enums.QueryConsistencyLevelEventual
}

type QueryWorkflowResponse struct {
	QueryResult   []byte                `protobuf:"bytes,1,opt,name=queryResult,proto3" json:"queryResult,omitempty"`
	QueryRejected *common.QueryRejected `protobuf:"bytes,2,opt,name=queryRejected,proto3" json:"queryRejected,omitempty"`
}

func (m *QueryWorkflowResponse) Reset()      { *m = QueryWorkflowResponse{} }
func (*QueryWorkflowResponse) ProtoMessage() {}
func (*QueryWorkflowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{67}
}
func (m *QueryWorkflowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkflowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkflowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkflowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkflowResponse.Merge(m, src)
}
func (m *QueryWorkflowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkflowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkflowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkflowResponse proto.InternalMessageInfo

func (m *QueryWorkflowResponse) GetQueryResult() []byte {
	if m != nil {
		return m.QueryResult
	}
	return nil
}

func (m *QueryWorkflowResponse) GetQueryRejected() *common.QueryRejected {
	if m != nil {
		return m.QueryRejected
	}
	return nil
}

type GetWorkflowExecutionRawHistoryRequest struct {
	Domain          string                          `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Execution       *common.WorkflowExecution       `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
	MaximumPageSize int32                           `protobuf:"varint,3,opt,name=maximumPageSize,proto3" json:"maximumPageSize,omitempty"`
	NextPageToken   *token.HistoryContinuationToken `protobuf:"bytes,4,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
}

func (m *GetWorkflowExecutionRawHistoryRequest) Reset()      { *m = GetWorkflowExecutionRawHistoryRequest{} }
func (*GetWorkflowExecutionRawHistoryRequest) ProtoMessage() {}
func (*GetWorkflowExecutionRawHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{68}
}
func (m *GetWorkflowExecutionRawHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkflowExecutionRawHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkflowExecutionRawHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkflowExecutionRawHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowExecutionRawHistoryRequest.Merge(m, src)
}
func (m *GetWorkflowExecutionRawHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkflowExecutionRawHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowExecutionRawHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowExecutionRawHistoryRequest proto.InternalMessageInfo

func (m *GetWorkflowExecutionRawHistoryRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *GetWorkflowExecutionRawHistoryRequest) GetExecution() *common.WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *GetWorkflowExecutionRawHistoryRequest) GetMaximumPageSize() int32 {
	if m != nil {
		return m.MaximumPageSize
	}
	return 0
}

func (m *GetWorkflowExecutionRawHistoryRequest) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type GetWorkflowExecutionRawHistoryResponse struct {
	RawHistory    []*common.DataBlob              `protobuf:"bytes,1,rep,name=rawHistory,proto3" json:"rawHistory,omitempty"`
	NextPageToken *token.HistoryContinuationToken `protobuf:"bytes,2,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
}

func (m *GetWorkflowExecutionRawHistoryResponse) Reset() {
	*m = GetWorkflowExecutionRawHistoryResponse{}
}
func (*GetWorkflowExecutionRawHistoryResponse) ProtoMessage() {}
func (*GetWorkflowExecutionRawHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{69}
}
func (m *GetWorkflowExecutionRawHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkflowExecutionRawHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkflowExecutionRawHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkflowExecutionRawHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowExecutionRawHistoryResponse.Merge(m, src)
}
func (m *GetWorkflowExecutionRawHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkflowExecutionRawHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowExecutionRawHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowExecutionRawHistoryResponse proto.InternalMessageInfo

func (m *GetWorkflowExecutionRawHistoryResponse) GetRawHistory() []*common.DataBlob {
	if m != nil {
		return m.RawHistory
	}
	return nil
}

func (m *GetWorkflowExecutionRawHistoryResponse) GetNextPageToken() *token.HistoryContinuationToken {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type DescribeWorkflowExecutionRequest struct {
	Domain    string                    `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Execution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
}

func (m *DescribeWorkflowExecutionRequest) Reset()      { *m = DescribeWorkflowExecutionRequest{} }
func (*DescribeWorkflowExecutionRequest) ProtoMessage() {}
func (*DescribeWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{70}
}
func (m *DescribeWorkflowExecutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescribeWorkflowExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescribeWorkflowExecutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescribeWorkflowExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeWorkflowExecutionRequest.Merge(m, src)
}
func (m *DescribeWorkflowExecutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *DescribeWorkflowExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeWorkflowExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeWorkflowExecutionRequest proto.InternalMessageInfo

func (m *DescribeWorkflowExecutionRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *DescribeWorkflowExecutionRequest) GetExecution() *common.WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

type DescribeWorkflowExecutionResponse struct {
	ExecutionConfiguration *common.WorkflowExecutionConfiguration `protobuf:"bytes,1,opt,name=executionConfiguration,proto3" json:"executionConfiguration,omitempty"`
	WorkflowExecutionInfo  *common.WorkflowExecutionInfo          `protobuf:"bytes,2,opt,name=workflowExecutionInfo,proto3" json:"workflowExecutionInfo,omitempty"`
	PendingActivities      []*common.PendingActivityInfo          `protobuf:"bytes,3,rep,name=pendingActivities,proto3" json:"pendingActivities,omitempty"`
	PendingChildren        []*common.PendingChildExecutionInfo    `protobuf:"bytes,4,rep,name=pendingChildren,proto3" json:"pendingChildren,omitempty"`
}

func (m *DescribeWorkflowExecutionResponse) Reset()      { *m = DescribeWorkflowExecutionResponse{} }
func (*DescribeWorkflowExecutionResponse) ProtoMessage() {}
func (*DescribeWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{71}
}
func (m *DescribeWorkflowExecutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescribeWorkflowExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescribeWorkflowExecutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescribeWorkflowExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeWorkflowExecutionResponse.Merge(m, src)
}
func (m *DescribeWorkflowExecutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *DescribeWorkflowExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeWorkflowExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeWorkflowExecutionResponse proto.InternalMessageInfo

func (m *DescribeWorkflowExecutionResponse) GetExecutionConfiguration() *common.WorkflowExecutionConfiguration {
	if m != nil {
		return m.ExecutionConfiguration
	}
	return nil
}

func (m *DescribeWorkflowExecutionResponse) GetWorkflowExecutionInfo() *common.WorkflowExecutionInfo {
	if m != nil {
		return m.WorkflowExecutionInfo
	}
	return nil
}

func (m *DescribeWorkflowExecutionResponse) GetPendingActivities() []*common.PendingActivityInfo {
	if m != nil {
		return m.PendingActivities
	}
	return nil
}

func (m *DescribeWorkflowExecutionResponse) GetPendingChildren() []*common.PendingChildExecutionInfo {
	if m != nil {
		return m.PendingChildren
	}
	return nil
}

type DescribeTaskListRequest struct {
	Domain                string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList              *common.TaskList   `protobuf:"bytes,2,opt,name=taskList,proto3" json:"taskList,omitempty"`
	TaskListType          enums.TaskListType `protobuf:"varint,3,opt,name=taskListType,proto3,enum=enums.TaskListType" json:"taskListType,omitempty"`
	IncludeTaskListStatus bool               `protobuf:"varint,4,opt,name=includeTaskListStatus,proto3" json:"includeTaskListStatus,omitempty"`
}

func (m *DescribeTaskListRequest) Reset()      { *m = DescribeTaskListRequest{} }
func (*DescribeTaskListRequest) ProtoMessage() {}
func (*DescribeTaskListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{72}
}
func (m *DescribeTaskListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescribeTaskListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescribeTaskListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescribeTaskListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeTaskListRequest.Merge(m, src)
}
func (m *DescribeTaskListRequest) XXX_Size() int {
	return m.Size()
}
func (m *DescribeTaskListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeTaskListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeTaskListRequest proto.InternalMessageInfo

func (m *DescribeTaskListRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *DescribeTaskListRequest) GetTaskList() *common.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *DescribeTaskListRequest) GetTaskListType() enums.TaskListType {
	if m != nil {
		return m.TaskListType
	}
	return enums.TaskListTypeDecision
}

func (m *DescribeTaskListRequest) GetIncludeTaskListStatus() bool {
	if m != nil {
		return m.IncludeTaskListStatus
	}
	return false
}

type DescribeTaskListResponse struct {
	Pollers        []*common.PollerInfo   `protobuf:"bytes,1,rep,name=pollers,proto3" json:"pollers,omitempty"`
	TaskListStatus *common.TaskListStatus `protobuf:"bytes,2,opt,name=taskListStatus,proto3" json:"taskListStatus,omitempty"`
}

func (m *DescribeTaskListResponse) Reset()      { *m = DescribeTaskListResponse{} }
func (*DescribeTaskListResponse) ProtoMessage() {}
func (*DescribeTaskListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{73}
}
func (m *DescribeTaskListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescribeTaskListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescribeTaskListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescribeTaskListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeTaskListResponse.Merge(m, src)
}
func (m *DescribeTaskListResponse) XXX_Size() int {
	return m.Size()
}
func (m *DescribeTaskListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeTaskListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeTaskListResponse proto.InternalMessageInfo

func (m *DescribeTaskListResponse) GetPollers() []*common.PollerInfo {
	if m != nil {
		return m.Pollers
	}
	return nil
}

func (m *DescribeTaskListResponse) GetTaskListStatus() *common.TaskListStatus {
	if m != nil {
		return m.TaskListStatus
	}
	return nil
}

type GetClusterInfoRequest struct {
}

func (m *GetClusterInfoRequest) Reset()      { *m = GetClusterInfoRequest{} }
func (*GetClusterInfoRequest) ProtoMessage() {}
func (*GetClusterInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{74}
}
func (m *GetClusterInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClusterInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClusterInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClusterInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterInfoRequest.Merge(m, src)
}
func (m *GetClusterInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetClusterInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterInfoRequest proto.InternalMessageInfo

// GetClusterInfoResponse contains information about Temporal cluster
type GetClusterInfoResponse struct {
	SupportedClientVersions *common.SupportedClientVersions `protobuf:"bytes,1,opt,name=supportedClientVersions,proto3" json:"supportedClientVersions,omitempty"`
}

func (m *GetClusterInfoResponse) Reset()      { *m = GetClusterInfoResponse{} }
func (*GetClusterInfoResponse) ProtoMessage() {}
func (*GetClusterInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{75}
}
func (m *GetClusterInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClusterInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClusterInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClusterInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterInfoResponse.Merge(m, src)
}
func (m *GetClusterInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetClusterInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterInfoResponse proto.InternalMessageInfo

func (m *GetClusterInfoResponse) GetSupportedClientVersions() *common.SupportedClientVersions {
	if m != nil {
		return m.SupportedClientVersions
	}
	return nil
}

type ListTaskListPartitionsRequest struct {
	Domain   string           `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList *common.TaskList `protobuf:"bytes,2,opt,name=taskList,proto3" json:"taskList,omitempty"`
}

func (m *ListTaskListPartitionsRequest) Reset()      { *m = ListTaskListPartitionsRequest{} }
func (*ListTaskListPartitionsRequest) ProtoMessage() {}
func (*ListTaskListPartitionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{76}
}
func (m *ListTaskListPartitionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTaskListPartitionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTaskListPartitionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTaskListPartitionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskListPartitionsRequest.Merge(m, src)
}
func (m *ListTaskListPartitionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTaskListPartitionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskListPartitionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskListPartitionsRequest proto.InternalMessageInfo

func (m *ListTaskListPartitionsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ListTaskListPartitionsRequest) GetTaskList() *common.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

type ListTaskListPartitionsResponse struct {
	ActivityTaskListPartitions []*common.TaskListPartitionMetadata `protobuf:"bytes,1,rep,name=activityTaskListPartitions,proto3" json:"activityTaskListPartitions,omitempty"`
	DecisionTaskListPartitions []*common.TaskListPartitionMetadata `protobuf:"bytes,2,rep,name=decisionTaskListPartitions,proto3" json:"decisionTaskListPartitions,omitempty"`
}

func (m *ListTaskListPartitionsResponse) Reset()      { *m = ListTaskListPartitionsResponse{} }
func (*ListTaskListPartitionsResponse) ProtoMessage() {}
func (*ListTaskListPartitionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2cc3b10536a077, []int{77}
}
func (m *ListTaskListPartitionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTaskListPartitionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTaskListPartitionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTaskListPartitionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskListPartitionsResponse.Merge(m, src)
}
func (m *ListTaskListPartitionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTaskListPartitionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskListPartitionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskListPartitionsResponse proto.InternalMessageInfo

func (m *ListTaskListPartitionsResponse) GetActivityTaskListPartitions() []*common.TaskListPartitionMetadata {
	if m != nil {
		return m.ActivityTaskListPartitions
	}
	return nil
}

func (m *ListTaskListPartitionsResponse) GetDecisionTaskListPartitions() []*common.TaskListPartitionMetadata {
	if m != nil {
		return m.DecisionTaskListPartitions
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterDomainRequest)(nil), "workflowservice.RegisterDomainRequest")
	proto.RegisterMapType((map[string]string)(nil), "workflowservice.RegisterDomainRequest.DataEntry")
	proto.RegisterType((*RegisterDomainResponse)(nil), "workflowservice.RegisterDomainResponse")
	proto.RegisterType((*ListDomainsRequest)(nil), "workflowservice.ListDomainsRequest")
	proto.RegisterType((*ListDomainsResponse)(nil), "workflowservice.ListDomainsResponse")
	proto.RegisterType((*DescribeDomainRequest)(nil), "workflowservice.DescribeDomainRequest")
	proto.RegisterType((*DescribeDomainResponse)(nil), "workflowservice.DescribeDomainResponse")
	proto.RegisterType((*UpdateDomainRequest)(nil), "workflowservice.UpdateDomainRequest")
	proto.RegisterType((*UpdateDomainResponse)(nil), "workflowservice.UpdateDomainResponse")
	proto.RegisterType((*DeprecateDomainRequest)(nil), "workflowservice.DeprecateDomainRequest")
	proto.RegisterType((*DeprecateDomainResponse)(nil), "workflowservice.DeprecateDomainResponse")
	proto.RegisterType((*StartWorkflowExecutionRequest)(nil), "workflowservice.StartWorkflowExecutionRequest")
	proto.RegisterType((*StartWorkflowExecutionResponse)(nil), "workflowservice.StartWorkflowExecutionResponse")
	proto.RegisterType((*GetWorkflowExecutionHistoryRequest)(nil), "workflowservice.GetWorkflowExecutionHistoryRequest")
	proto.RegisterType((*GetWorkflowExecutionHistoryResponse)(nil), "workflowservice.GetWorkflowExecutionHistoryResponse")
	proto.RegisterType((*PollForDecisionTaskRequest)(nil), "workflowservice.PollForDecisionTaskRequest")
	proto.RegisterType((*PollForDecisionTaskResponse)(nil), "workflowservice.PollForDecisionTaskResponse")
	proto.RegisterMapType((map[string]*common.WorkflowQuery)(nil), "workflowservice.PollForDecisionTaskResponse.QueriesEntry")
	proto.RegisterType((*RespondDecisionTaskCompletedRequest)(nil), "workflowservice.RespondDecisionTaskCompletedRequest")
	proto.RegisterMapType((map[string]*common.WorkflowQueryResult)(nil), "workflowservice.RespondDecisionTaskCompletedRequest.QueryResultsEntry")
	proto.RegisterType((*RespondDecisionTaskCompletedResponse)(nil), "workflowservice.RespondDecisionTaskCompletedResponse")
	proto.RegisterType((*RespondDecisionTaskFailedRequest)(nil), "workflowservice.RespondDecisionTaskFailedRequest")
	proto.RegisterType((*RespondDecisionTaskFailedResponse)(nil), "workflowservice.RespondDecisionTaskFailedResponse")
	proto.RegisterType((*PollForActivityTaskRequest)(nil), "workflowservice.PollForActivityTaskRequest")
	proto.RegisterType((*PollForActivityTaskResponse)(nil), "workflowservice.PollForActivityTaskResponse")
	proto.RegisterType((*RecordActivityTaskHeartbeatRequest)(nil), "workflowservice.RecordActivityTaskHeartbeatRequest")
	proto.RegisterType((*RecordActivityTaskHeartbeatResponse)(nil), "workflowservice.RecordActivityTaskHeartbeatResponse")
	proto.RegisterType((*RecordActivityTaskHeartbeatByIDRequest)(nil), "workflowservice.RecordActivityTaskHeartbeatByIDRequest")
	proto.RegisterType((*RecordActivityTaskHeartbeatByIDResponse)(nil), "workflowservice.RecordActivityTaskHeartbeatByIDResponse")
	proto.RegisterType((*RespondActivityTaskCompletedRequest)(nil), "workflowservice.RespondActivityTaskCompletedRequest")
	proto.RegisterType((*RespondActivityTaskCompletedResponse)(nil), "workflowservice.RespondActivityTaskCompletedResponse")
	proto.RegisterType((*RespondActivityTaskCompletedByIDRequest)(nil), "workflowservice.RespondActivityTaskCompletedByIDRequest")
	proto.RegisterType((*RespondActivityTaskCompletedByIDResponse)(nil), "workflowservice.RespondActivityTaskCompletedByIDResponse")
	proto.RegisterType((*RespondActivityTaskFailedRequest)(nil), "workflowservice.RespondActivityTaskFailedRequest")
	proto.RegisterType((*RespondActivityTaskFailedResponse)(nil), "workflowservice.RespondActivityTaskFailedResponse")
	proto.RegisterType((*RespondActivityTaskFailedByIDRequest)(nil), "workflowservice.RespondActivityTaskFailedByIDRequest")
	proto.RegisterType((*RespondActivityTaskFailedByIDResponse)(nil), "workflowservice.RespondActivityTaskFailedByIDResponse")
	proto.RegisterType((*RespondActivityTaskCanceledRequest)(nil), "workflowservice.RespondActivityTaskCanceledRequest")
	proto.RegisterType((*RespondActivityTaskCanceledResponse)(nil), "workflowservice.RespondActivityTaskCanceledResponse")
	proto.RegisterType((*RespondActivityTaskCanceledByIDRequest)(nil), "workflowservice.RespondActivityTaskCanceledByIDRequest")
	proto.RegisterType((*RespondActivityTaskCanceledByIDResponse)(nil), "workflowservice.RespondActivityTaskCanceledByIDResponse")
	proto.RegisterType((*RequestCancelWorkflowExecutionRequest)(nil), "workflowservice.RequestCancelWorkflowExecutionRequest")
	proto.RegisterType((*RequestCancelWorkflowExecutionResponse)(nil), "workflowservice.RequestCancelWorkflowExecutionResponse")
	proto.RegisterType((*SignalWorkflowExecutionRequest)(nil), "workflowservice.SignalWorkflowExecutionRequest")
	proto.RegisterType((*SignalWorkflowExecutionResponse)(nil), "workflowservice.SignalWorkflowExecutionResponse")
	proto.RegisterType((*SignalWithStartWorkflowExecutionRequest)(nil), "workflowservice.SignalWithStartWorkflowExecutionRequest")
	proto.RegisterType((*SignalWithStartWorkflowExecutionResponse)(nil), "workflowservice.SignalWithStartWorkflowExecutionResponse")
	proto.RegisterType((*ResetWorkflowExecutionRequest)(nil), "workflowservice.ResetWorkflowExecutionRequest")
	proto.RegisterType((*ResetWorkflowExecutionResponse)(nil), "workflowservice.ResetWorkflowExecutionResponse")
	proto.RegisterType((*TerminateWorkflowExecutionRequest)(nil), "workflowservice.TerminateWorkflowExecutionRequest")
	proto.RegisterType((*TerminateWorkflowExecutionResponse)(nil), "workflowservice.TerminateWorkflowExecutionResponse")
	proto.RegisterType((*ListOpenWorkflowExecutionsRequest)(nil), "workflowservice.ListOpenWorkflowExecutionsRequest")
	proto.RegisterType((*ListOpenWorkflowExecutionsResponse)(nil), "workflowservice.ListOpenWorkflowExecutionsResponse")
	proto.RegisterType((*ListClosedWorkflowExecutionsRequest)(nil), "workflowservice.ListClosedWorkflowExecutionsRequest")
	proto.RegisterType((*ListClosedWorkflowExecutionsResponse)(nil), "workflowservice.ListClosedWorkflowExecutionsResponse")
	proto.RegisterType((*ListWorkflowExecutionsRequest)(nil), "workflowservice.ListWorkflowExecutionsRequest")
	proto.RegisterType((*ListWorkflowExecutionsResponse)(nil), "workflowservice.ListWorkflowExecutionsResponse")
	proto.RegisterType((*ListArchivedWorkflowExecutionsRequest)(nil), "workflowservice.ListArchivedWorkflowExecutionsRequest")
	proto.RegisterType((*ListArchivedWorkflowExecutionsResponse)(nil), "workflowservice.ListArchivedWorkflowExecutionsResponse")
	proto.RegisterType((*ScanWorkflowExecutionsRequest)(nil), "workflowservice.ScanWorkflowExecutionsRequest")
	proto.RegisterType((*ScanWorkflowExecutionsResponse)(nil), "workflowservice.ScanWorkflowExecutionsResponse")
	proto.RegisterType((*CountWorkflowExecutionsRequest)(nil), "workflowservice.CountWorkflowExecutionsRequest")
	proto.RegisterType((*CountWorkflowExecutionsResponse)(nil), "workflowservice.CountWorkflowExecutionsResponse")
	proto.RegisterType((*GetSearchAttributesRequest)(nil), "workflowservice.GetSearchAttributesRequest")
	proto.RegisterType((*GetSearchAttributesResponse)(nil), "workflowservice.GetSearchAttributesResponse")
	proto.RegisterMapType((map[string]enums.IndexedValueType)(nil), "workflowservice.GetSearchAttributesResponse.KeysEntry")
	proto.RegisterType((*RespondQueryTaskCompletedRequest)(nil), "workflowservice.RespondQueryTaskCompletedRequest")
	proto.RegisterType((*RespondQueryTaskCompletedResponse)(nil), "workflowservice.RespondQueryTaskCompletedResponse")
	proto.RegisterType((*ResetStickyTaskListRequest)(nil), "workflowservice.ResetStickyTaskListRequest")
	proto.RegisterType((*ResetStickyTaskListResponse)(nil), "workflowservice.ResetStickyTaskListResponse")
	proto.RegisterType((*QueryWorkflowRequest)(nil), "workflowservice.QueryWorkflowRequest")
	proto.RegisterType((*QueryWorkflowResponse)(nil), "workflowservice.QueryWorkflowResponse")
	proto.RegisterType((*GetWorkflowExecutionRawHistoryRequest)(nil), "workflowservice.GetWorkflowExecutionRawHistoryRequest")
	proto.RegisterType((*GetWorkflowExecutionRawHistoryResponse)(nil), "workflowservice.GetWorkflowExecutionRawHistoryResponse")
	proto.RegisterType((*DescribeWorkflowExecutionRequest)(nil), "workflowservice.DescribeWorkflowExecutionRequest")
	proto.RegisterType((*DescribeWorkflowExecutionResponse)(nil), "workflowservice.DescribeWorkflowExecutionResponse")
	proto.RegisterType((*DescribeTaskListRequest)(nil), "workflowservice.DescribeTaskListRequest")
	proto.RegisterType((*DescribeTaskListResponse)(nil), "workflowservice.DescribeTaskListResponse")
	proto.RegisterType((*GetClusterInfoRequest)(nil), "workflowservice.GetClusterInfoRequest")
	proto.RegisterType((*GetClusterInfoResponse)(nil), "workflowservice.GetClusterInfoResponse")
	proto.RegisterType((*ListTaskListPartitionsRequest)(nil), "workflowservice.ListTaskListPartitionsRequest")
	proto.RegisterType((*ListTaskListPartitionsResponse)(nil), "workflowservice.ListTaskListPartitionsResponse")
}

func init() {
	proto.RegisterFile("workflowservice/request_response.proto", fileDescriptor_2f2cc3b10536a077)
}

var fileDescriptor_2f2cc3b10536a077 = []byte{
	// 3441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3b, 0xdd, 0x6f, 0x1d, 0x47,
	0xf5, 0xde, 0xfb, 0x65, 0xfb, 0xf8, 0x2b, 0x99, 0xd8, 0xce, 0xad, 0x93, 0xdc, 0xd8, 0x9b, 0xc4,
	0x71, 0xdb, 0xd4, 0xe9, 0xcf, 0xbf, 0x90, 0x94, 0x02, 0x05, 0xe7, 0xde, 0x7c, 0x98, 0x36, 0x89,
	0x33, 0x76, 0x5b, 0x81, 0x10, 0xd5, 0x7a, 0x77, 0x62, 0x4f, 0xbd, 0x77, 0xf7, 0x76, 0x77, 0xd6,
	0xce, 0xe5, 0x89, 0x17, 0xa4, 0x4a, 0x48, 0x88, 0x07, 0xde, 0x11, 0x2f, 0x15, 0x2a, 0x08, 0x21,
	0xf1, 0x02, 0xe2, 0x8d, 0x82, 0x84, 0x04, 0xaa, 0x2a, 0x84, 0x44, 0x1f, 0x78, 0xa0, 0xae, 0x04,
	0x45, 0xe2, 0xa1, 0xe2, 0x2f, 0x40, 0x3b, 0x3b, 0xbb, 0x77, 0xf6, 0xf3, 0xda, 0x6e, 0xda, 0xa4,
	0xd0, 0x17, 0xfb, 0xce, 0x99, 0x73, 0xce, 0x9c, 0x73, 0xe6, 0xcc, 0x39, 0x67, 0x3e, 0x16, 0xe6,
	0x77, 0x6d, 0x67, 0xfb, 0x9e, 0x69, 0xef, 0xba, 0xc4, 0xd9, 0xa1, 0x3a, 0xb9, 0xe8, 0x90, 0xd7,
	0x3c, 0xe2, 0xb2, 0x57, 0x1c, 0xe2, 0x76, 0x6c, 0xcb, 0x25, 0x8b, 0x1d, 0xc7, 0x66, 0x36, 0x9a,
	0x48, 0xe0, 0xcd, 0x1c, 0x25, 0x96, 0xd7, 0x76, 0x2f, 0xf2, 0xbf, 0x01, 0xce, 0xcc, 0x31, 0xdd,
	0x6e, 0xb7, 0x6d, 0xeb, 0x62, 0xf0, 0x2f, 0x01, 0x34, 0xec, 0xb6, 0x46, 0x43, 0xe0, 0xa4, 0x00,
	0x6e, 0x51, 0x97, 0xd9, 0x4e, 0x57, 0x40, 0xa7, 0x42, 0x54, 0xa2, 0x53, 0x97, 0x46, 0x1c, 0x4e,
	0x0b, 0x70, 0x28, 0xc1, 0x2b, 0xe4, 0x3e, 0xd1, 0x3d, 0xd6, 0x43, 0x38, 0xc9, 0xec, 0x6d, 0x22,
	0xf5, 0x0b, 0x11, 0x83, 0x5e, 0xf5, 0x27, 0x35, 0x98, 0xc2, 0x64, 0x93, 0xba, 0x8c, 0x38, 0x2d,
	0x2e, 0x04, 0x0e, 0x54, 0x44, 0x08, 0x2a, 0x96, 0xd6, 0x26, 0x75, 0x65, 0x56, 0x59, 0x18, 0xc6,
	0xfc, 0x37, 0x9a, 0x85, 0x11, 0x83, 0xb8, 0xba, 0x43, 0x3b, 0xfe, 0x00, 0xf5, 0x12, 0xef, 0x92,
	0x41, 0xa8, 0x01, 0x60, 0xef, 0x5a, 0xc4, 0xb9, 0xd6, 0xd6, 0xa8, 0x59, 0x2f, 0x73, 0x04, 0x09,
	0x82, 0x5e, 0xea, 0xd9, 0xf4, 0x5a, 0x28, 0x28, 0x26, 0x8c, 0x58, 0xfe, 0x8f, 0x55, 0xe2, 0x50,
	0xdb, 0x58, 0xb1, 0x5a, 0x5a, 0xd7, 0xad, 0x57, 0x66, 0x95, 0x85, 0x2a, 0xde, 0x27, 0xb6, 0x3f,
	0x2e, 0x69, 0x53, 0x76, 0x8b, 0x30, 0x87, 0xea, 0xf5, 0xea, 0xac, 0xb2, 0x30, 0x84, 0x25, 0x08,
	0x6a, 0xc2, 0x90, 0x6e, 0x7a, 0xbe, 0x96, 0x6e, 0xbd, 0x36, 0x5b, 0x5e, 0x18, 0x59, 0x3a, 0xbf,
	0x28, 0x66, 0xa2, 0x19, 0xc0, 0x31, 0xe9, 0x98, 0x54, 0xd7, 0x7c, 0xce, 0x4d, 0xdb, 0xba, 0x47,
	0x37, 0x3d, 0x87, 0x37, 0x70, 0x44, 0x88, 0x2e, 0xc0, 0x51, 0x4d, 0x67, 0x74, 0x87, 0x08, 0x92,
	0xdb, 0xbe, 0x7d, 0x06, 0xb9, 0x8e, 0xe9, 0x0e, 0xd4, 0x82, 0x8a, 0xa1, 0x31, 0xad, 0x3e, 0xc4,
	0x87, 0x7b, 0x7a, 0x31, 0xe1, 0x23, 0x8b, 0x99, 0x66, 0x5f, 0x6c, 0x69, 0x4c, 0xbb, 0x66, 0x31,
	0xa7, 0x8b, 0x39, 0x35, 0x3a, 0x0b, 0x63, 0x2e, 0xd1, 0x3d, 0x87, 0xb2, 0xee, 0xba, 0x3f, 0x91,
	0xf5, 0x61, 0x3e, 0x5e, 0x1c, 0x88, 0xe6, 0x61, 0x9c, 0xba, 0x37, 0x4c, 0x7b, 0x43, 0x33, 0x03,
	0x76, 0x75, 0xe0, 0x26, 0x48, 0x40, 0xd1, 0xf3, 0x30, 0x25, 0xbc, 0x6a, 0xd9, 0xd1, 0xb7, 0xe8,
	0x8e, 0x66, 0xae, 0x31, 0x8d, 0x79, 0x6e, 0x7d, 0x64, 0x56, 0x59, 0x18, 0x5f, 0x9a, 0x5a, 0x0c,
	0x3c, 0x36, 0xde, 0x89, 0xb3, 0x69, 0xd0, 0x22, 0xa0, 0x44, 0xc7, 0x8b, 0x78, 0xa5, 0x3e, 0xca,
	0xe5, 0xcb, 0xe8, 0x41, 0x77, 0xa1, 0xbe, 0x43, 0x5d, 0xba, 0x41, 0x4d, 0xca, 0x92, 0xe3, 0x8f,
	0x15, 0x8d, 0x9f, 0x4b, 0x86, 0x2e, 0xc1, 0x54, 0xba, 0xcf, 0x97, 0x62, 0x9c, 0x4b, 0x91, 0xdd,
	0x39, 0x73, 0x05, 0x86, 0x23, 0x33, 0xa3, 0x23, 0x50, 0xde, 0x26, 0x5d, 0xe1, 0xe6, 0xfe, 0x4f,
	0x34, 0x09, 0xd5, 0x1d, 0xcd, 0xf4, 0x88, 0xf0, 0xef, 0xa0, 0xf1, 0x6c, 0xe9, 0x19, 0x45, 0xad,
	0xc3, 0x74, 0x72, 0xd6, 0x82, 0x38, 0xa0, 0xee, 0x02, 0x7a, 0x81, 0xba, 0x2c, 0x80, 0xba, 0xe1,
	0x1a, 0x9a, 0x81, 0xa1, 0x8e, 0xb6, 0x49, 0xd6, 0xe8, 0xb7, 0x82, 0x75, 0x54, 0xc5, 0x51, 0x1b,
	0x5d, 0x83, 0x31, 0x8b, 0xdc, 0x67, 0xab, 0xda, 0x26, 0x09, 0x26, 0xd6, 0x1f, 0x6d, 0x64, 0xe9,
	0xf4, 0x22, 0x5f, 0xaf, 0x8b, 0x37, 0x03, 0xfb, 0x35, 0x6d, 0x8b, 0x51, 0xcb, 0xe3, 0x9e, 0xc8,
	0xd1, 0x70, 0x9c, 0x4a, 0xfd, 0xa1, 0x02, 0xc7, 0x62, 0x23, 0x07, 0x02, 0xa1, 0x65, 0x18, 0x0c,
	0x82, 0x8a, 0x5b, 0x57, 0x84, 0xbf, 0x27, 0x1d, 0xb0, 0xc5, 0xd7, 0xed, 0x06, 0x89, 0xab, 0x82,
	0x43, 0xba, 0x07, 0x25, 0xe1, 0x97, 0x61, 0x2a, 0x39, 0x52, 0x7e, 0x84, 0x41, 0x50, 0xf1, 0x3c,
	0x6a, 0x08, 0xd3, 0xf3, 0xdf, 0xea, 0xef, 0x4a, 0x30, 0x9d, 0x2d, 0x2b, 0x5a, 0x02, 0x08, 0xa4,
	0x5d, 0xb1, 0xee, 0xd9, 0x9c, 0xd1, 0xc8, 0x12, 0x0a, 0x17, 0x76, 0x2b, 0xea, 0xc1, 0x12, 0x16,
	0x5a, 0x86, 0x31, 0x5d, 0x5e, 0xe0, 0x42, 0xad, 0x13, 0x71, 0xb2, 0x78, 0x0c, 0x88, 0x53, 0xa0,
	0x0d, 0xa8, 0x3b, 0x39, 0xe1, 0x82, 0xc7, 0xbc, 0x91, 0xa5, 0xf9, 0x38, 0xb7, 0xdc, 0xe0, 0x92,
	0xcb, 0x07, 0x2d, 0xc0, 0xc4, 0x3d, 0x8d, 0x9a, 0xf6, 0x0e, 0x71, 0x5e, 0x22, 0x8e, 0x1f, 0xf1,
	0x79, 0x48, 0x2c, 0xe3, 0x24, 0x38, 0x63, 0xf1, 0x57, 0xb3, 0x16, 0xbf, 0xfa, 0xd7, 0x12, 0x1c,
	0x7b, 0xb1, 0x63, 0x68, 0x6c, 0x1f, 0xf3, 0xf0, 0x2c, 0x8c, 0x78, 0x1c, 0xd5, 0xe0, 0x96, 0x0d,
	0x4c, 0x54, 0x0f, 0x95, 0x92, 0xb9, 0x70, 0xfb, 0xca, 0xc8, 0x69, 0x03, 0x97, 0x1f, 0xa8, 0x81,
	0x2b, 0x0f, 0xc8, 0xc0, 0xa9, 0xc8, 0x5a, 0xcd, 0x8a, 0xac, 0x0b, 0x30, 0x61, 0x10, 0x93, 0x30,
	0x72, 0x55, 0x33, 0xae, 0x52, 0x4b, 0x73, 0xba, 0xf5, 0x1a, 0xc7, 0x4b, 0x82, 0xd5, 0xb7, 0x4a,
	0x30, 0x19, 0x37, 0xef, 0x67, 0x4e, 0x7a, 0x70, 0x27, 0xc5, 0xfe, 0x5a, 0xef, 0x38, 0x44, 0xdf,
	0x97, 0x9b, 0xa6, 0xe6, 0xb0, 0x94, 0x31, 0x87, 0xea, 0x63, 0x70, 0x3c, 0xc5, 0x53, 0xc4, 0xed,
	0x0f, 0xaa, 0x70, 0x6a, 0x8d, 0x69, 0x0e, 0x7b, 0x39, 0x5d, 0x67, 0x04, 0xc3, 0x4e, 0x43, 0x2d,
	0x98, 0x17, 0x31, 0xb0, 0x68, 0xf9, 0x15, 0x47, 0x18, 0x50, 0x57, 0xc2, 0x78, 0x25, 0x41, 0xd0,
	0x33, 0x30, 0x1a, 0xb6, 0xd6, 0xbb, 0x1d, 0x22, 0x4c, 0x3e, 0x19, 0x9a, 0xfc, 0x65, 0xa9, 0x0f,
	0xc7, 0x30, 0xd1, 0x05, 0x18, 0x62, 0x9a, 0xbb, 0xed, 0x47, 0x75, 0xe1, 0xec, 0x47, 0x42, 0xaa,
	0x75, 0x01, 0xc7, 0x11, 0x86, 0x9f, 0xad, 0xa8, 0xd5, 0xf1, 0x18, 0xb7, 0xe7, 0x28, 0x0e, 0x1a,
	0x68, 0x15, 0xce, 0x44, 0x85, 0x20, 0xd7, 0x6f, 0xdd, 0x6e, 0x9a, 0xb6, 0x4b, 0xd6, 0x69, 0x9b,
	0xd8, 0x1e, 0x5b, 0x23, 0xba, 0x6d, 0x19, 0x2e, 0x77, 0xe5, 0x2a, 0xde, 0x0f, 0x2a, 0xba, 0x0e,
	0x0d, 0x7f, 0xcc, 0x02, 0x66, 0x83, 0x9c, 0x59, 0x1f, 0x2c, 0x3f, 0x27, 0x52, 0xc3, 0xaf, 0xe0,
	0x58, 0xb7, 0x3e, 0xc4, 0xad, 0x16, 0xb5, 0xd1, 0x49, 0x18, 0x16, 0x15, 0xf6, 0x8a, 0x21, 0x0a,
	0x9d, 0x1e, 0x00, 0x61, 0x98, 0xea, 0xd9, 0x17, 0x13, 0xcf, 0x25, 0xab, 0xb6, 0x49, 0xf5, 0x2e,
	0xaf, 0x75, 0xc6, 0x97, 0x4e, 0x8a, 0xe2, 0xe1, 0xe5, 0x2c, 0x1c, 0x9c, 0x4d, 0x8a, 0x3e, 0x07,
	0x23, 0x0e, 0x61, 0x4e, 0x57, 0x70, 0x1a, 0xe1, 0xe6, 0x3e, 0x16, 0x9a, 0x1b, 0xf7, 0xba, 0xb0,
	0x8c, 0x87, 0x54, 0x18, 0xd5, 0x1d, 0xdb, 0x5a, 0xd3, 0xb7, 0x88, 0xe1, 0x99, 0x44, 0x14, 0x3d,
	0x31, 0x18, 0x9a, 0x85, 0x4a, 0x9b, 0xb4, 0x6d, 0x5e, 0xda, 0x8c, 0x2c, 0x8d, 0x86, 0x3c, 0x6f,
	0x91, 0xb6, 0x8d, 0x79, 0x0f, 0x6a, 0xc1, 0x11, 0x97, 0x68, 0x8e, 0xbe, 0xb5, 0xcc, 0x98, 0x43,
	0x37, 0x3c, 0x46, 0x5c, 0x5e, 0xb8, 0x48, 0x91, 0x76, 0x2d, 0xd1, 0x8f, 0x53, 0x14, 0x68, 0x1e,
	0x6a, 0x5b, 0x44, 0x33, 0x88, 0x53, 0x9f, 0xe0, 0xb4, 0xe3, 0x21, 0xed, 0x4d, 0x0e, 0xc5, 0xa2,
	0x57, 0xbd, 0x0c, 0x8d, 0x3c, 0x4f, 0x17, 0x81, 0x6a, 0x12, 0xaa, 0x8e, 0x67, 0xad, 0x18, 0xc2,
	0xd3, 0x83, 0x86, 0xfa, 0x8f, 0x12, 0xa8, 0x37, 0x48, 0x9a, 0x4c, 0xe4, 0xff, 0x7e, 0xeb, 0xe4,
	0x0a, 0x0c, 0x47, 0xee, 0x25, 0xa2, 0xd8, 0x63, 0xc9, 0x45, 0xd0, 0x13, 0xa5, 0x87, 0xeb, 0xc7,
	0x96, 0xb6, 0x76, 0x9f, 0xb6, 0xbd, 0xf6, 0x6a, 0x58, 0x43, 0x95, 0xb9, 0x87, 0x25, 0xc1, 0xe9,
	0x42, 0xa5, 0x72, 0x98, 0x42, 0xc5, 0x1f, 0x70, 0x57, 0xa3, 0xec, 0xba, 0xed, 0xdc, 0x26, 0xbb,
	0xd7, 0x76, 0x88, 0xc5, 0x44, 0x8c, 0x4a, 0x82, 0xd1, 0x8b, 0x30, 0x2d, 0x98, 0xf2, 0xf6, 0x75,
	0x6a, 0x32, 0xe2, 0xf0, 0x55, 0x5e, 0xe3, 0xae, 0x78, 0x4a, 0xb8, 0x62, 0x36, 0x12, 0xce, 0x21,
	0x56, 0x7f, 0xa1, 0xc0, 0x99, 0x42, 0x4b, 0x8b, 0x79, 0x7a, 0x1c, 0x06, 0x45, 0x79, 0x2d, 0xb2,
	0xc9, 0x44, 0x34, 0xe5, 0x02, 0x33, 0xec, 0x7f, 0x40, 0x35, 0x9c, 0xbf, 0x68, 0x35, 0x5e, 0x40,
	0x13, 0x83, 0x4f, 0xc2, 0x10, 0x8e, 0xda, 0xea, 0x1b, 0x0a, 0xcc, 0xac, 0xda, 0xa6, 0x79, 0xdd,
	0x76, 0x5a, 0x62, 0x6f, 0xea, 0x87, 0xa9, 0x7e, 0x7e, 0x21, 0x47, 0xb9, 0x52, 0xdf, 0x28, 0x27,
	0x47, 0x8d, 0x72, 0x22, 0x6a, 0xcc, 0xc3, 0xf8, 0x06, 0x4f, 0xc1, 0xcd, 0x2d, 0xa2, 0x6f, 0xbb,
	0x5e, 0x9b, 0xcf, 0xff, 0x30, 0x4e, 0x40, 0xd5, 0xbf, 0xd4, 0xe0, 0x44, 0xa6, 0xa0, 0xc2, 0xac,
	0x27, 0x61, 0xd8, 0x1f, 0x2f, 0xb0, 0x93, 0xc2, 0xa3, 0x69, 0x0f, 0x80, 0x6e, 0xc0, 0xd1, 0xd4,
	0x5e, 0xb4, 0xbf, 0x3f, 0xa7, 0x69, 0x3e, 0x42, 0x62, 0xb8, 0x0c, 0xd3, 0x1d, 0x87, 0xec, 0x50,
	0xdb, 0x73, 0xf9, 0x4a, 0x26, 0x06, 0xf7, 0xa0, 0x15, 0x43, 0x24, 0xdd, 0x9c, 0x5e, 0xdf, 0x40,
	0x6e, 0x1c, 0xbf, 0xca, 0xf1, 0x13, 0x50, 0x54, 0x87, 0x41, 0x8d, 0x31, 0xd2, 0xee, 0x30, 0xee,
	0xc7, 0x65, 0x1c, 0x36, 0xd1, 0x13, 0x70, 0x64, 0x43, 0xd3, 0xb7, 0x4d, 0x7b, 0xb3, 0x69, 0x7b,
	0x16, 0xbb, 0x49, 0x2d, 0xc6, 0xc3, 0x7d, 0x19, 0xa7, 0xe0, 0xb2, 0x77, 0x0e, 0x1d, 0xd4, 0x3b,
	0x87, 0x0f, 0xe5, 0x9d, 0x4f, 0x42, 0xf5, 0x35, 0x8f, 0x38, 0x41, 0x22, 0x18, 0x59, 0x9a, 0x4a,
	0x9a, 0xf2, 0xae, 0xdf, 0x89, 0x03, 0x1c, 0x74, 0x1b, 0x1e, 0x4b, 0x4d, 0x53, 0xe8, 0x70, 0x22,
	0xfe, 0xa7, 0x1d, 0x31, 0x9f, 0xc4, 0xdf, 0x05, 0xbb, 0x22, 0xe4, 0x1b, 0x7e, 0xaa, 0x73, 0x99,
	0xd6, 0xee, 0xf0, 0x84, 0x50, 0xc6, 0x19, 0x3d, 0xbe, 0x29, 0x85, 0xd9, 0x7b, 0xd8, 0x63, 0x81,
	0x29, 0x93, 0x70, 0xb4, 0x06, 0x83, 0xbe, 0xd0, 0x94, 0xe7, 0x05, 0x7f, 0x13, 0xf7, 0xf9, 0xd4,
	0x26, 0xae, 0xc0, 0xa1, 0x17, 0xef, 0x06, 0xb4, 0xc1, 0x71, 0x42, 0xc8, 0x69, 0xe6, 0x2e, 0x8c,
	0xca, 0x1d, 0x19, 0x1b, 0xe0, 0x27, 0xe5, 0x0d, 0x70, 0xbe, 0x3d, 0x7b, 0xfb, 0xe2, 0x7f, 0x57,
	0xe0, 0x4c, 0x30, 0xaa, 0x21, 0x0b, 0xd2, 0xb4, 0xdb, 0x1d, 0xbf, 0x46, 0x36, 0xc2, 0x58, 0x50,
	0xbc, 0xc2, 0x16, 0x61, 0x38, 0x3c, 0xdc, 0x72, 0xeb, 0x25, 0xae, 0x6f, 0x34, 0x13, 0x21, 0x5b,
	0xdc, 0x43, 0xf1, 0x2d, 0x19, 0x65, 0x0b, 0xdf, 0x47, 0xc8, 0x7d, 0xc6, 0x17, 0xd3, 0x28, 0x4e,
	0xc1, 0x63, 0xf1, 0xa3, 0x92, 0x88, 0x1f, 0xb7, 0xfc, 0x19, 0xa1, 0xfa, 0x76, 0x57, 0x4a, 0xc3,
	0x55, 0xae, 0xf9, 0x5c, 0x94, 0x86, 0x79, 0x7f, 0x34, 0xf9, 0xb1, 0x7c, 0x9c, 0x20, 0x45, 0x97,
	0x60, 0xca, 0x21, 0xcc, 0x73, 0xac, 0xdb, 0x64, 0x57, 0xb6, 0x06, 0x5f, 0x53, 0x43, 0x38, 0xbb,
	0x13, 0x3d, 0x07, 0x33, 0xf7, 0x6c, 0x47, 0x27, 0x4d, 0x87, 0x68, 0x8c, 0x24, 0x49, 0x07, 0x39,
	0x69, 0x01, 0x46, 0x46, 0x10, 0x1c, 0xca, 0x0a, 0x82, 0xe8, 0x55, 0x18, 0xe5, 0xeb, 0x00, 0x13,
	0xd7, 0x33, 0x99, 0x5b, 0x1f, 0xe6, 0x76, 0xbe, 0x9e, 0x71, 0x3a, 0xd5, 0x77, 0x3a, 0x17, 0xef,
	0x4a, 0x8c, 0x02, 0x27, 0x8b, 0xf1, 0x9e, 0xf9, 0x06, 0x1c, 0x4d, 0xa1, 0x64, 0xb8, 0xdb, 0xff,
	0xc5, 0xdd, 0xed, 0x44, 0xb6, 0xbb, 0x71, 0x1e, 0xb2, 0xd3, 0xdd, 0x87, 0xb3, 0xc5, 0x42, 0x8a,
	0xb0, 0xbe, 0x0a, 0xa3, 0x86, 0x6c, 0xcb, 0x20, 0x65, 0x5e, 0x38, 0xc8, 0x4a, 0xc2, 0x31, 0x0e,
	0xea, 0x9f, 0x15, 0x98, 0xcd, 0x18, 0xfa, 0xba, 0x46, 0xcd, 0xfd, 0xfa, 0xfa, 0x25, 0xa8, 0xea,
	0x9a, 0xe7, 0x06, 0x3a, 0x8f, 0x2f, 0x35, 0x44, 0xc1, 0x90, 0x66, 0xd7, 0xf4, 0xb1, 0x70, 0x80,
	0xec, 0x07, 0x68, 0x83, 0x30, 0x8d, 0x9a, 0xae, 0x70, 0xf4, 0xb0, 0x59, 0xe8, 0xdf, 0x69, 0xd7,
	0xa8, 0x66, 0xe6, 0xc7, 0x33, 0x30, 0x57, 0xa0, 0x95, 0xd8, 0x30, 0xfd, 0xb6, 0x97, 0xed, 0x97,
	0x75, 0x46, 0x77, 0xfc, 0x4d, 0xd6, 0x27, 0x9a, 0xed, 0x5b, 0x70, 0x24, 0xc4, 0xbb, 0x45, 0x98,
	0xc6, 0x8f, 0x58, 0x2b, 0xf1, 0xa2, 0x79, 0x3d, 0xd1, 0x8f, 0x53, 0x14, 0xea, 0x9b, 0xbd, 0x5a,
	0x20, 0xae, 0xc6, 0x27, 0x5b, 0x0b, 0x34, 0x00, 0x34, 0x31, 0xfc, 0x8a, 0x11, 0x1e, 0x97, 0xf7,
	0x20, 0x7e, 0xad, 0x10, 0xb6, 0x78, 0xad, 0x50, 0x89, 0xd7, 0x0a, 0xcb, 0x52, 0x1f, 0x8e, 0x61,
	0xe6, 0x6c, 0x0b, 0xb3, 0x93, 0x55, 0x2d, 0x37, 0x59, 0xb5, 0xe0, 0x54, 0x08, 0x2d, 0xda, 0xf3,
	0x15, 0x23, 0x65, 0xa6, 0xbc, 0xa1, 0x9c, 0x94, 0xf7, 0x1c, 0xcc, 0xb8, 0xf9, 0x5b, 0xcc, 0x61,
	0x3e, 0x5c, 0x01, 0x06, 0x7a, 0x06, 0x8e, 0x6f, 0x11, 0xcd, 0x61, 0x1b, 0x44, 0x63, 0x09, 0x62,
	0xe0, 0xc4, 0x79, 0xdd, 0x72, 0xf5, 0x33, 0xc2, 0x31, 0xa3, 0xea, 0xe7, 0x26, 0x9c, 0x4e, 0xdb,
	0xe6, 0xce, 0xbd, 0xf5, 0x2d, 0xea, 0x2e, 0x0b, 0x8a, 0x20, 0xdf, 0xf7, 0x43, 0xf3, 0x2d, 0x11,
	0x0d, 0xdf, 0x12, 0x2b, 0x79, 0x2c, 0x48, 0x59, 0x49, 0x78, 0xaa, 0x4e, 0x1c, 0xdf, 0x77, 0x9d,
	0x38, 0x0f, 0xe3, 0x61, 0x5b, 0x9c, 0xb5, 0x4c, 0x04, 0x0b, 0x3e, 0x0e, 0x95, 0x76, 0x8e, 0x47,
	0x0a, 0x77, 0x8e, 0xf7, 0x41, 0xc5, 0x44, 0xb7, 0x1d, 0x43, 0x5e, 0x2a, 0x37, 0x43, 0x79, 0xf7,
	0x17, 0xf0, 0xa4, 0xd0, 0x55, 0xca, 0x0f, 0x5d, 0x89, 0xc5, 0xae, 0xde, 0xf1, 0xeb, 0x8a, 0x82,
	0x91, 0xc5, 0x6a, 0x5d, 0x80, 0x09, 0x5d, 0xb3, 0x74, 0x62, 0x0a, 0x59, 0x48, 0xb0, 0x85, 0x1d,
	0xc2, 0x49, 0xb0, 0xfa, 0x47, 0x05, 0xe6, 0x0b, 0x38, 0x5e, 0xed, 0xae, 0xb4, 0x0e, 0x72, 0xf0,
	0xd3, 0x4a, 0x1d, 0xfc, 0xb4, 0xc2, 0x5d, 0x74, 0x4b, 0x28, 0x13, 0x34, 0x62, 0x2b, 0xbd, 0x25,
	0x42, 0xb4, 0x04, 0x91, 0xed, 0x53, 0xcd, 0xb7, 0x4f, 0x2d, 0x61, 0x9f, 0x35, 0x38, 0xdf, 0x57,
	0x9b, 0x03, 0xdb, 0x68, 0x37, 0x2a, 0xe6, 0x64, 0xae, 0x07, 0x2c, 0xe6, 0xa6, 0xa1, 0xe6, 0xf0,
	0x94, 0x2d, 0xa6, 0x5b, 0xb4, 0x0a, 0x67, 0x7b, 0x3e, 0xca, 0xe8, 0x39, 0x03, 0x8b, 0x1c, 0xf4,
	0x07, 0xc5, 0x57, 0x3b, 0x1f, 0xf1, 0xe1, 0xcd, 0x62, 0x4f, 0xeb, 0x6a, 0xae, 0xd6, 0xc9, 0x39,
	0x7c, 0x02, 0x16, 0xfa, 0x2b, 0x23, 0x34, 0xff, 0x5e, 0xaf, 0xf2, 0x90, 0x91, 0x0f, 0x52, 0x79,
	0x70, 0x11, 0x35, 0x37, 0xba, 0xbe, 0x15, 0xad, 0xc3, 0xd5, 0x16, 0x52, 0xcd, 0x90, 0x25, 0x8f,
	0x90, 0x7a, 0x4f, 0xc9, 0x9c, 0xd8, 0x00, 0xeb, 0x21, 0x4f, 0x16, 0xb7, 0x44, 0x35, 0xcf, 0x12,
	0xb5, 0x7c, 0x4b, 0x0c, 0x26, 0x2c, 0x71, 0x1e, 0xce, 0xf5, 0xd1, 0x51, 0x58, 0x83, 0x47, 0xd3,
	0xf4, 0x7c, 0xf3, 0x45, 0xb8, 0xdf, 0x49, 0x3c, 0x5c, 0x34, 0x3d, 0x97, 0xbd, 0xb0, 0xa3, 0x91,
	0x85, 0x80, 0x41, 0x8c, 0xcc, 0xc5, 0xfb, 0xb4, 0xc5, 0xc8, 0xc7, 0xb3, 0x83, 0x45, 0x4c, 0x1b,
	0xa1, 0xf9, 0x6f, 0x14, 0x7f, 0x12, 0xb9, 0x6a, 0x41, 0xff, 0x81, 0x6f, 0x05, 0x1e, 0x58, 0x65,
	0x58, 0x54, 0x02, 0xc7, 0x8e, 0xc9, 0x2b, 0x89, 0x63, 0x72, 0x75, 0xc1, 0x9f, 0xbd, 0x62, 0x1d,
	0x84, 0xba, 0xdf, 0x2d, 0x41, 0x63, 0x8d, 0x6e, 0x5a, 0xda, 0x43, 0xd4, 0xb3, 0x01, 0xe0, 0x72,
	0x11, 0xf8, 0x63, 0x0a, 0x51, 0x01, 0xf7, 0x20, 0xbd, 0x3a, 0xb6, 0x22, 0xd7, 0xb1, 0xb2, 0x75,
	0xaa, 0x45, 0xd6, 0xa9, 0x25, 0x2f, 0x11, 0xea, 0x30, 0xa8, 0xdb, 0x16, 0x73, 0x6c, 0x93, 0xaf,
	0xe0, 0x51, 0x1c, 0x36, 0xd5, 0x39, 0x38, 0x9d, 0x6b, 0x0c, 0x61, 0xb0, 0xb7, 0x6b, 0x70, 0x5e,
	0xe0, 0x50, 0xb6, 0xf5, 0xd9, 0xbd, 0xd1, 0xff, 0xee, 0xbd, 0x51, 0xdc, 0x6d, 0x47, 0x52, 0x6e,
	0x3b, 0x0b, 0x23, 0x41, 0x6b, 0x85, 0xdb, 0x78, 0x94, 0xdb, 0x58, 0x06, 0xc9, 0x8e, 0x38, 0x16,
	0x73, 0xc4, 0xe4, 0x9d, 0xd4, 0xf8, 0x21, 0xef, 0xa4, 0x26, 0x0a, 0xee, 0xa4, 0x8e, 0x1c, 0xe8,
	0x4e, 0xea, 0xe8, 0x47, 0xb8, 0x93, 0x42, 0x85, 0x3b, 0x8b, 0xaf, 0xc0, 0x42, 0xff, 0xf5, 0x54,
	0x78, 0x3b, 0xf5, 0x2f, 0x05, 0x4e, 0x61, 0xe2, 0x12, 0xf6, 0xf0, 0x42, 0x58, 0xaf, 0x8e, 0x28,
	0xc7, 0xea, 0x88, 0x4b, 0x30, 0x15, 0x1e, 0x1b, 0x5d, 0xa7, 0x16, 0x75, 0xb7, 0xe2, 0xa7, 0xf5,
	0xd9, 0x9d, 0x71, 0x5f, 0xae, 0x26, 0x83, 0xfb, 0x65, 0x68, 0xe4, 0x69, 0x5b, 0x68, 0xa6, 0x3f,
	0x29, 0x30, 0xb7, 0x4e, 0x9c, 0x36, 0xb5, 0x34, 0x46, 0x1e, 0x3d, 0x53, 0x49, 0x99, 0xbd, 0x92,
	0x9f, 0xd9, 0x13, 0x91, 0x5e, 0x3d, 0x0b, 0x6a, 0x91, 0x4e, 0x22, 0x68, 0x7f, 0xa7, 0x0c, 0x73,
	0x7e, 0xc4, 0xbb, 0xd3, 0x21, 0x56, 0x0a, 0xcb, 0xed, 0xa7, 0x7a, 0xc6, 0x2d, 0x64, 0x69, 0x9f,
	0xb7, 0x90, 0xe5, 0x43, 0x5d, 0x66, 0x2c, 0xc3, 0x44, 0x10, 0x05, 0x69, 0x9b, 0x04, 0x77, 0x83,
	0x22, 0x98, 0x1f, 0xef, 0x1d, 0x46, 0xc7, 0xba, 0x71, 0x12, 0x1f, 0x3d, 0x0f, 0x13, 0x51, 0x64,
	0x16, 0x2c, 0xaa, 0x42, 0x96, 0xbc, 0xc9, 0x0a, 0xd0, 0x6e, 0x0e, 0xe0, 0x24, 0x25, 0xfa, 0x22,
	0x00, 0xeb, 0x76, 0x42, 0x51, 0x6a, 0x9c, 0xcf, 0x4c, 0x56, 0x36, 0x8a, 0x58, 0x48, 0xf8, 0x57,
	0x87, 0x61, 0x30, 0xf8, 0xe5, 0xaa, 0x6f, 0x2a, 0xa0, 0x16, 0xcd, 0x83, 0xf0, 0xdf, 0x2f, 0x01,
	0x44, 0x22, 0x84, 0x6f, 0xd7, 0x4e, 0xe5, 0xca, 0x1d, 0x3c, 0x9c, 0xe9, 0x11, 0x3c, 0xa8, 0x47,
	0x6b, 0x6f, 0x95, 0xe1, 0x8c, 0x2f, 0x2c, 0xcf, 0x44, 0xc6, 0x67, 0x6e, 0xf3, 0xc9, 0xba, 0x0d,
	0x7a, 0x16, 0x46, 0x5d, 0xfe, 0xc2, 0x53, 0xd0, 0x0f, 0xc6, 0x8b, 0xa0, 0x35, 0xa9, 0xef, 0xe6,
	0x00, 0x8e, 0xe1, 0xca, 0x2e, 0xf7, 0x53, 0x05, 0xce, 0x16, 0xcf, 0xe2, 0x23, 0xe5, 0x74, 0x3f,
	0x57, 0xe0, 0x94, 0x2f, 0xee, 0xc1, 0xdd, 0x4d, 0x7e, 0x68, 0x5a, 0xea, 0xf7, 0xd0, 0xf4, 0x70,
	0x0e, 0x36, 0x19, 0x5e, 0xb2, 0x06, 0x1b, 0x8e, 0xa0, 0xa1, 0xbe, 0xa1, 0x40, 0x23, 0x4f, 0xe4,
	0x47, 0xca, 0xb6, 0xbf, 0x54, 0xe0, 0x9c, 0x2f, 0xe8, 0xb2, 0x78, 0xb6, 0xf0, 0x29, 0xb2, 0xf1,
	0xcf, 0x14, 0x98, 0xef, 0x27, 0xfa, 0x23, 0xe7, 0xc7, 0x6b, 0xba, 0x66, 0x7d, 0xca, 0xfc, 0x38,
	0x4f, 0xe4, 0x47, 0xca, 0xb6, 0xb7, 0xa1, 0xc1, 0x9f, 0x5a, 0x1c, 0xdc, 0xb6, 0x91, 0xe2, 0x25,
	0x59, 0xf1, 0x2b, 0x70, 0x3a, 0x97, 0x5f, 0xaf, 0xa2, 0xd4, 0x7d, 0x14, 0xce, 0xaf, 0x8c, 0x83,
	0x86, 0x7a, 0x12, 0x66, 0x6e, 0x10, 0x96, 0xda, 0x0b, 0x04, 0x42, 0xa8, 0xbf, 0x56, 0xe0, 0x44,
	0x66, 0xb7, 0xe0, 0xf9, 0x55, 0xa8, 0x6c, 0x93, 0x6e, 0x68, 0xc6, 0xcb, 0xa9, 0xcb, 0xd8, 0x02,
	0xda, 0xc5, 0xe7, 0x49, 0x57, 0x5c, 0x37, 0x73, 0x1e, 0x33, 0xab, 0x30, 0x1c, 0x81, 0x32, 0xae,
	0x97, 0x9f, 0x92, 0xaf, 0x97, 0xc7, 0x97, 0x8e, 0x8b, 0xed, 0xde, 0x8a, 0x65, 0x90, 0xfb, 0xc4,
	0x78, 0xc9, 0xef, 0xe2, 0x9b, 0x69, 0xe9, 0x6a, 0xf9, 0x07, 0xa5, 0xe8, 0x98, 0x95, 0x5f, 0x3e,
	0x1f, 0xe2, 0xfc, 0xbb, 0x09, 0x63, 0x7a, 0x48, 0xc1, 0xf7, 0xf1, 0xa5, 0xd8, 0xcb, 0xb0, 0x34,
	0x5b, 0x2e, 0x43, 0x9c, 0xc6, 0xdf, 0x45, 0x4a, 0x17, 0xea, 0xe2, 0x5c, 0x56, 0x06, 0xf9, 0x9b,
	0x3e, 0xe2, 0x38, 0xb6, 0x73, 0x8b, 0xb8, 0xae, 0xb6, 0x49, 0x84, 0x53, 0xc7, 0x60, 0x61, 0xf5,
	0x1e, 0xbd, 0xc5, 0xe5, 0xcf, 0x90, 0xab, 0xe9, 0xea, 0x3d, 0x86, 0x80, 0xd3, 0x34, 0xd2, 0x61,
	0x6f, 0x96, 0x55, 0x44, 0xb9, 0xdd, 0x86, 0x19, 0xbe, 0x43, 0x09, 0x9e, 0x4c, 0x44, 0x07, 0x0f,
	0x1f, 0xd3, 0x2b, 0x41, 0xf5, 0x14, 0x9c, 0xc8, 0x1c, 0x4e, 0x48, 0xf3, 0xab, 0x12, 0x4c, 0x72,
	0x61, 0x43, 0x26, 0x1f, 0xdb, 0x73, 0xc5, 0xe8, 0x11, 0x52, 0x79, 0x1f, 0x8f, 0x90, 0xee, 0xc0,
	0xa4, 0x98, 0xc5, 0x57, 0x89, 0xce, 0x9a, 0xb6, 0x65, 0xd0, 0xe8, 0x6d, 0xfb, 0xf8, 0xd2, 0x09,
	0xd9, 0x49, 0x12, 0x28, 0x38, 0x93, 0x10, 0x61, 0x98, 0xe2, 0xf0, 0xa6, 0x6d, 0xb9, 0xd4, 0x65,
	0xc4, 0xd2, 0xbb, 0x2f, 0x90, 0x1d, 0x62, 0xf2, 0x79, 0xee, 0x9d, 0x71, 0xdc, 0xcd, 0xc2, 0xc1,
	0xd9, 0xa4, 0xea, 0x0e, 0x4c, 0x25, 0x4c, 0x27, 0x16, 0x6f, 0xc2, 0x2d, 0x95, 0xb4, 0x5b, 0x7e,
	0x01, 0xc6, 0x24, 0x31, 0x89, 0x91, 0x7c, 0x49, 0x74, 0x57, 0xee, 0xc4, 0x71, 0x5c, 0xf5, 0x9f,
	0x0a, 0x9c, 0xcb, 0x7a, 0x06, 0x89, 0xb5, 0xdd, 0xff, 0xb6, 0x37, 0xa7, 0xea, 0x8f, 0x14, 0x98,
	0xef, 0xa7, 0xab, 0xb0, 0xfa, 0xd3, 0x00, 0x4e, 0x04, 0x15, 0x81, 0xb3, 0xf7, 0x3e, 0x4a, 0x63,
	0xda, 0x55, 0xd3, 0xde, 0xc0, 0x12, 0xce, 0x83, 0x4a, 0x39, 0x2e, 0xcc, 0x86, 0x9f, 0xdf, 0x1c,
	0xf8, 0xe4, 0xe0, 0xd0, 0xeb, 0xfa, 0xc3, 0x12, 0xcc, 0x15, 0x8c, 0x2a, 0x6c, 0xf2, 0x4d, 0x98,
	0x96, 0x9f, 0x7a, 0x49, 0x5f, 0x38, 0x28, 0xf1, 0x2f, 0x1c, 0x52, 0x2c, 0xe2, 0x5f, 0x38, 0xe4,
	0x70, 0x41, 0x6b, 0xbd, 0xa3, 0xc3, 0x58, 0x66, 0x17, 0xaa, 0xf4, 0x49, 0xff, 0xd9, 0xb4, 0x68,
	0x05, 0x8e, 0x76, 0x88, 0x65, 0x50, 0x6b, 0x53, 0x5c, 0x48, 0x50, 0xe2, 0xd6, 0xcb, 0x7c, 0x3e,
	0xa3, 0xb7, 0x4f, 0xab, 0x31, 0x84, 0x6e, 0x10, 0x91, 0x53, 0x54, 0xfe, 0x96, 0x4d, 0x00, 0x9b,
	0x5b, 0xd4, 0x34, 0x1c, 0xee, 0x87, 0x65, 0xf9, 0xe5, 0xda, 0xaa, 0xd4, 0x1d, 0x97, 0x2e, 0x49,
	0xa9, 0xbe, 0xad, 0xc0, 0xf1, 0xd0, 0xe4, 0xfb, 0x8d, 0xdb, 0x07, 0x7b, 0xd7, 0x73, 0x05, 0x46,
	0xc3, 0xdf, 0xd1, 0xd9, 0xf6, 0xf8, 0xd2, 0x31, 0x11, 0x9c, 0xd6, 0xa5, 0x2e, 0x1c, 0x43, 0x44,
	0x97, 0x60, 0x8a, 0x5a, 0xba, 0xe9, 0x19, 0x91, 0x60, 0xe2, 0xbb, 0xc1, 0x4a, 0xf0, 0xa6, 0x2e,
	0xb3, 0x53, 0x7d, 0x5d, 0x81, 0x7a, 0x5a, 0x21, 0xe1, 0x3a, 0x17, 0x60, 0xb0, 0x63, 0x9b, 0x26,
	0x71, 0xc2, 0x22, 0x24, 0xfa, 0x24, 0x67, 0x95, 0x83, 0xb9, 0x8d, 0x42, 0x14, 0xf4, 0x1c, 0x8c,
	0xb3, 0xf8, 0xc8, 0x81, 0xb6, 0xd3, 0x49, 0x6d, 0xc5, 0x27, 0x8b, 0x09, 0x6c, 0xf5, 0x38, 0x4c,
	0xdd, 0x20, 0x4c, 0x7c, 0x1e, 0xca, 0x59, 0x8b, 0x42, 0xc9, 0x85, 0xe9, 0x64, 0x87, 0x10, 0xf0,
	0x6b, 0x70, 0xdc, 0xf5, 0x3a, 0x1d, 0xdb, 0x61, 0xc4, 0x68, 0x9a, 0x94, 0x58, 0x4c, 0xe4, 0x62,
	0x57, 0x38, 0x77, 0xb4, 0x2d, 0x5f, 0xcb, 0x46, 0xc3, 0x79, 0xf4, 0x2a, 0x09, 0xf6, 0x99, 0xa1,
	0xcc, 0xab, 0x9a, 0xc3, 0xe8, 0xbe, 0x6a, 0xc8, 0x03, 0x4d, 0xb7, 0xfa, 0x77, 0xb1, 0x39, 0xcc,
	0x1a, 0x47, 0x28, 0xa9, 0xc1, 0x8c, 0x26, 0xdd, 0xca, 0xc5, 0xb1, 0xc4, 0xc4, 0xcc, 0x25, 0x87,
	0x88, 0x30, 0xa2, 0x07, 0x5e, 0x05, 0x4c, 0xfc, 0x21, 0xe4, 0xd7, 0x7b, 0x89, 0x21, 0x4a, 0xfb,
	0x1e, 0x22, 0x9f, 0xc9, 0xd5, 0xd7, 0x95, 0x77, 0xde, 0x6b, 0x0c, 0xbc, 0xfb, 0x5e, 0x63, 0xe0,
	0xc3, 0xf7, 0x1a, 0xca, 0xb7, 0xf7, 0x1a, 0xca, 0x8f, 0xf7, 0x1a, 0xca, 0xef, 0xf7, 0x1a, 0xca,
	0x3b, 0x7b, 0x0d, 0xe5, 0x6f, 0x7b, 0x0d, 0xe5, 0x83, 0xbd, 0xc6, 0xc0, 0x87, 0x7b, 0x0d, 0xe5,
	0xfb, 0xef, 0x37, 0x06, 0xde, 0x79, 0xbf, 0x31, 0xf0, 0xee, 0xfb, 0x8d, 0x01, 0x98, 0xa3, 0xf6,
	0x22, 0x23, 0xed, 0x8e, 0xed, 0x68, 0x66, 0xf0, 0x3d, 0x76, 0xb2, 0x0e, 0x5e, 0x55, 0xbe, 0xfe,
	0xd4, 0xa6, 0x84, 0x44, 0xed, 0x8b, 0xe1, 0xef, 0xa7, 0x38, 0xc1, 0xc5, 0x04, 0xc1, 0x46, 0x8d,
	0x83, 0xff, 0xff, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x7f, 0xff, 0x77, 0xbb, 0x3e, 0x00,
	0x00,
}

func (this *RegisterDomainRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterDomainRequest)
	if !ok {
		that2, ok := that.(RegisterDomainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.OwnerEmail != that1.OwnerEmail {
		return false
	}
	if this.WorkflowExecutionRetentionPeriodInDays != that1.WorkflowExecutionRetentionPeriodInDays {
		return false
	}
	if this.EmitMetric != that1.EmitMetric {
		return false
	}
	if len(this.Clusters) != len(that1.Clusters) {
		return false
	}
	for i := range this.Clusters {
		if !this.Clusters[i].Equal(that1.Clusters[i]) {
			return false
		}
	}
	if this.ActiveClusterName != that1.ActiveClusterName {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	if this.SecurityToken != that1.SecurityToken {
		return false
	}
	if this.IsGlobalDomain != that1.IsGlobalDomain {
		return false
	}
	if this.HistoryArchivalStatus != that1.HistoryArchivalStatus {
		return false
	}
	if this.HistoryArchivalURI != that1.HistoryArchivalURI {
		return false
	}
	if this.VisibilityArchivalStatus != that1.VisibilityArchivalStatus {
		return false
	}
	if this.VisibilityArchivalURI != that1.VisibilityArchivalURI {
		return false
	}
	return true
}
func (this *RegisterDomainResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterDomainResponse)
	if !ok {
		that2, ok := that.(RegisterDomainResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListDomainsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDomainsRequest)
	if !ok {
		that2, ok := that.(ListDomainsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	return true
}
func (this *ListDomainsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDomainsResponse)
	if !ok {
		that2, ok := that.(ListDomainsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if !this.Domains[i].Equal(that1.Domains[i]) {
			return false
		}
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	return true
}
func (this *DescribeDomainRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescribeDomainRequest)
	if !ok {
		that2, ok := that.(DescribeDomainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	return true
}
func (this *DescribeDomainResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescribeDomainResponse)
	if !ok {
		that2, ok := that.(DescribeDomainResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DomainInfo.Equal(that1.DomainInfo) {
		return false
	}
	if !this.Configuration.Equal(that1.Configuration) {
		return false
	}
	if !this.ReplicationConfiguration.Equal(that1.ReplicationConfiguration) {
		return false
	}
	if this.FailoverVersion != that1.FailoverVersion {
		return false
	}
	if this.IsGlobalDomain != that1.IsGlobalDomain {
		return false
	}
	return true
}
func (this *UpdateDomainRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateDomainRequest)
	if !ok {
		that2, ok := that.(UpdateDomainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.UpdatedInfo.Equal(that1.UpdatedInfo) {
		return false
	}
	if !this.Configuration.Equal(that1.Configuration) {
		return false
	}
	if !this.ReplicationConfiguration.Equal(that1.ReplicationConfiguration) {
		return false
	}
	if this.SecurityToken != that1.SecurityToken {
		return false
	}
	if this.DeleteBadBinary != that1.DeleteBadBinary {
		return false
	}
	return true
}
func (this *UpdateDomainResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateDomainResponse)
	if !ok {
		that2, ok := that.(UpdateDomainResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DomainInfo.Equal(that1.DomainInfo) {
		return false
	}
	if !this.Configuration.Equal(that1.Configuration) {
		return false
	}
	if !this.ReplicationConfiguration.Equal(that1.ReplicationConfiguration) {
		return false
	}
	if this.FailoverVersion != that1.FailoverVersion {
		return false
	}
	if this.IsGlobalDomain != that1.IsGlobalDomain {
		return false
	}
	return true
}
func (this *DeprecateDomainRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeprecateDomainRequest)
	if !ok {
		that2, ok := that.(DeprecateDomainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.SecurityToken != that1.SecurityToken {
		return false
	}
	return true
}
func (this *DeprecateDomainResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeprecateDomainResponse)
	if !ok {
		that2, ok := that.(DeprecateDomainResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StartWorkflowExecutionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartWorkflowExecutionRequest)
	if !ok {
		that2, ok := that.(StartWorkflowExecutionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if !this.TaskList.Equal(that1.TaskList) {
		return false
	}
	if !bytes.Equal(this.Input, that1.Input) {
		return false
	}
	if this.ExecutionStartToCloseTimeoutSeconds != that1.ExecutionStartToCloseTimeoutSeconds {
		return false
	}
	if this.TaskStartToCloseTimeoutSeconds != that1.TaskStartToCloseTimeoutSeconds {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.WorkflowIdReusePolicy != that1.WorkflowIdReusePolicy {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.CronSchedule != that1.CronSchedule {
		return false
	}
	if !this.Memo.Equal(that1.Memo) {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	return true
}
func (this *StartWorkflowExecutionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartWorkflowExecutionResponse)
	if !ok {
		that2, ok := that.(StartWorkflowExecutionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	return true
}
func (this *GetWorkflowExecutionHistoryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetWorkflowExecutionHistoryRequest)
	if !ok {
		that2, ok := that.(GetWorkflowExecutionHistoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	if this.MaximumPageSize != that1.MaximumPageSize {
		return false
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	if this.WaitForNewEvent != that1.WaitForNewEvent {
		return false
	}
	if this.HistoryEventFilterType != that1.HistoryEventFilterType {
		return false
	}
	return true
}
func (this *GetWorkflowExecutionHistoryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetWorkflowExecutionHistoryResponse)
	if !ok {
		that2, ok := that.(GetWorkflowExecutionHistoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.History.Equal(that1.History) {
		return false
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	if this.Archived != that1.Archived {
		return false
	}
	return true
}
func (this *PollForDecisionTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollForDecisionTaskRequest)
	if !ok {
		that2, ok := that.(PollForDecisionTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.TaskList.Equal(that1.TaskList) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.BinaryChecksum != that1.BinaryChecksum {
		return false
	}
	return true
}
func (this *PollForDecisionTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollForDecisionTaskResponse)
	if !ok {
		that2, ok := that.(PollForDecisionTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if this.PreviousStartedEventId != that1.PreviousStartedEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if this.BacklogCountHint != that1.BacklogCountHint {
		return false
	}
	if !this.History.Equal(that1.History) {
		return false
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	if !this.WorkflowExecutionTaskList.Equal(that1.WorkflowExecutionTaskList) {
		return false
	}
	if this.ScheduledTimestamp != that1.ScheduledTimestamp {
		return false
	}
	if this.StartedTimestamp != that1.StartedTimestamp {
		return false
	}
	if len(this.Queries) != len(that1.Queries) {
		return false
	}
	for i := range this.Queries {
		if !this.Queries[i].Equal(that1.Queries[i]) {
			return false
		}
	}
	return true
}
func (this *RespondDecisionTaskCompletedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondDecisionTaskCompletedRequest)
	if !ok {
		that2, ok := that.(RespondDecisionTaskCompletedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if len(this.Decisions) != len(that1.Decisions) {
		return false
	}
	for i := range this.Decisions {
		if !this.Decisions[i].Equal(that1.Decisions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.ExecutionContext, that1.ExecutionContext) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if !this.StickyAttributes.Equal(that1.StickyAttributes) {
		return false
	}
	if this.ReturnNewDecisionTask != that1.ReturnNewDecisionTask {
		return false
	}
	if this.ForceCreateNewDecisionTask != that1.ForceCreateNewDecisionTask {
		return false
	}
	if this.BinaryChecksum != that1.BinaryChecksum {
		return false
	}
	if len(this.QueryResults) != len(that1.QueryResults) {
		return false
	}
	for i := range this.QueryResults {
		if !this.QueryResults[i].Equal(that1.QueryResults[i]) {
			return false
		}
	}
	return true
}
func (this *RespondDecisionTaskCompletedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondDecisionTaskCompletedResponse)
	if !ok {
		that2, ok := that.(RespondDecisionTaskCompletedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DecisionTask.Equal(that1.DecisionTask) {
		return false
	}
	return true
}
func (this *RespondDecisionTaskFailedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondDecisionTaskFailedRequest)
	if !ok {
		that2, ok := that.(RespondDecisionTaskFailedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	if !bytes.Equal(this.Details, that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.BinaryChecksum != that1.BinaryChecksum {
		return false
	}
	return true
}
func (this *RespondDecisionTaskFailedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondDecisionTaskFailedResponse)
	if !ok {
		that2, ok := that.(RespondDecisionTaskFailedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PollForActivityTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollForActivityTaskRequest)
	if !ok {
		that2, ok := that.(PollForActivityTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.TaskList.Equal(that1.TaskList) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if !this.TaskListMetadata.Equal(that1.TaskListMetadata) {
		return false
	}
	return true
}
func (this *PollForActivityTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollForActivityTaskResponse)
	if !ok {
		that2, ok := that.(PollForActivityTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if !this.ActivityType.Equal(that1.ActivityType) {
		return false
	}
	if !bytes.Equal(this.Input, that1.Input) {
		return false
	}
	if this.ScheduledTimestamp != that1.ScheduledTimestamp {
		return false
	}
	if this.ScheduleToCloseTimeoutSeconds != that1.ScheduleToCloseTimeoutSeconds {
		return false
	}
	if this.StartedTimestamp != that1.StartedTimestamp {
		return false
	}
	if this.StartToCloseTimeoutSeconds != that1.StartToCloseTimeoutSeconds {
		return false
	}
	if this.HeartbeatTimeoutSeconds != that1.HeartbeatTimeoutSeconds {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if this.ScheduledTimestampOfThisAttempt != that1.ScheduledTimestampOfThisAttempt {
		return false
	}
	if !bytes.Equal(this.HeartbeatDetails, that1.HeartbeatDetails) {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if this.WorkflowDomain != that1.WorkflowDomain {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	return true
}
func (this *RecordActivityTaskHeartbeatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordActivityTaskHeartbeatRequest)
	if !ok {
		that2, ok := that.(RecordActivityTaskHeartbeatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if !bytes.Equal(this.Details, that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RecordActivityTaskHeartbeatResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordActivityTaskHeartbeatResponse)
	if !ok {
		that2, ok := that.(RecordActivityTaskHeartbeatResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CancelRequested != that1.CancelRequested {
		return false
	}
	return true
}
func (this *RecordActivityTaskHeartbeatByIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordActivityTaskHeartbeatByIDRequest)
	if !ok {
		that2, ok := that.(RecordActivityTaskHeartbeatByIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.WorkflowID != that1.WorkflowID {
		return false
	}
	if this.RunID != that1.RunID {
		return false
	}
	if this.ActivityID != that1.ActivityID {
		return false
	}
	if !bytes.Equal(this.Details, that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RecordActivityTaskHeartbeatByIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordActivityTaskHeartbeatByIDResponse)
	if !ok {
		that2, ok := that.(RecordActivityTaskHeartbeatByIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CancelRequested != that1.CancelRequested {
		return false
	}
	return true
}
func (this *RespondActivityTaskCompletedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCompletedRequest)
	if !ok {
		that2, ok := that.(RespondActivityTaskCompletedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if !bytes.Equal(this.Result, that1.Result) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RespondActivityTaskCompletedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCompletedResponse)
	if !ok {
		that2, ok := that.(RespondActivityTaskCompletedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RespondActivityTaskCompletedByIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCompletedByIDRequest)
	if !ok {
		that2, ok := that.(RespondActivityTaskCompletedByIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.WorkflowID != that1.WorkflowID {
		return false
	}
	if this.RunID != that1.RunID {
		return false
	}
	if this.ActivityID != that1.ActivityID {
		return false
	}
	if !bytes.Equal(this.Result, that1.Result) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RespondActivityTaskCompletedByIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCompletedByIDResponse)
	if !ok {
		that2, ok := that.(RespondActivityTaskCompletedByIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RespondActivityTaskFailedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskFailedRequest)
	if !ok {
		that2, ok := that.(RespondActivityTaskFailedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if !bytes.Equal(this.Details, that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RespondActivityTaskFailedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskFailedResponse)
	if !ok {
		that2, ok := that.(RespondActivityTaskFailedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RespondActivityTaskFailedByIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskFailedByIDRequest)
	if !ok {
		that2, ok := that.(RespondActivityTaskFailedByIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.WorkflowID != that1.WorkflowID {
		return false
	}
	if this.RunID != that1.RunID {
		return false
	}
	if this.ActivityID != that1.ActivityID {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if !bytes.Equal(this.Details, that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RespondActivityTaskFailedByIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskFailedByIDResponse)
	if !ok {
		that2, ok := that.(RespondActivityTaskFailedByIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RespondActivityTaskCanceledRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCanceledRequest)
	if !ok {
		that2, ok := that.(RespondActivityTaskCanceledRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if !bytes.Equal(this.Details, that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RespondActivityTaskCanceledResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCanceledResponse)
	if !ok {
		that2, ok := that.(RespondActivityTaskCanceledResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RespondActivityTaskCanceledByIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCanceledByIDRequest)
	if !ok {
		that2, ok := that.(RespondActivityTaskCanceledByIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.WorkflowID != that1.WorkflowID {
		return false
	}
	if this.RunID != that1.RunID {
		return false
	}
	if this.ActivityID != that1.ActivityID {
		return false
	}
	if !bytes.Equal(this.Details, that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RespondActivityTaskCanceledByIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCanceledByIDResponse)
	if !ok {
		that2, ok := that.(RespondActivityTaskCanceledByIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestCancelWorkflowExecutionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelWorkflowExecutionRequest)
	if !ok {
		that2, ok := that.(RequestCancelWorkflowExecutionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *RequestCancelWorkflowExecutionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelWorkflowExecutionResponse)
	if !ok {
		that2, ok := that.(RequestCancelWorkflowExecutionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SignalWorkflowExecutionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalWorkflowExecutionRequest)
	if !ok {
		that2, ok := that.(SignalWorkflowExecutionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.SignalName != that1.SignalName {
		return false
	}
	if !bytes.Equal(this.Input, that1.Input) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if !bytes.Equal(this.Control, that1.Control) {
		return false
	}
	return true
}
func (this *SignalWorkflowExecutionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalWorkflowExecutionResponse)
	if !ok {
		that2, ok := that.(SignalWorkflowExecutionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SignalWithStartWorkflowExecutionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalWithStartWorkflowExecutionRequest)
	if !ok {
		that2, ok := that.(SignalWithStartWorkflowExecutionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if !this.TaskList.Equal(that1.TaskList) {
		return false
	}
	if !bytes.Equal(this.Input, that1.Input) {
		return false
	}
	if this.ExecutionStartToCloseTimeoutSeconds != that1.ExecutionStartToCloseTimeoutSeconds {
		return false
	}
	if this.TaskStartToCloseTimeoutSeconds != that1.TaskStartToCloseTimeoutSeconds {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.WorkflowIdReusePolicy != that1.WorkflowIdReusePolicy {
		return false
	}
	if this.SignalName != that1.SignalName {
		return false
	}
	if !bytes.Equal(this.SignalInput, that1.SignalInput) {
		return false
	}
	if !bytes.Equal(this.Control, that1.Control) {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.CronSchedule != that1.CronSchedule {
		return false
	}
	if !this.Memo.Equal(that1.Memo) {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	return true
}
func (this *SignalWithStartWorkflowExecutionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalWithStartWorkflowExecutionResponse)
	if !ok {
		that2, ok := that.(SignalWithStartWorkflowExecutionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	return true
}
func (this *ResetWorkflowExecutionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResetWorkflowExecutionRequest)
	if !ok {
		that2, ok := that.(ResetWorkflowExecutionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.DecisionFinishEventId != that1.DecisionFinishEventId {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *ResetWorkflowExecutionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResetWorkflowExecutionResponse)
	if !ok {
		that2, ok := that.(ResetWorkflowExecutionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	return true
}
func (this *TerminateWorkflowExecutionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TerminateWorkflowExecutionRequest)
	if !ok {
		that2, ok := that.(TerminateWorkflowExecutionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if !bytes.Equal(this.Details, that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *TerminateWorkflowExecutionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TerminateWorkflowExecutionResponse)
	if !ok {
		that2, ok := that.(TerminateWorkflowExecutionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListOpenWorkflowExecutionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOpenWorkflowExecutionsRequest)
	if !ok {
		that2, ok := that.(ListOpenWorkflowExecutionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.MaximumPageSize != that1.MaximumPageSize {
		return false
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	if !this.StartTimeFilter.Equal(that1.StartTimeFilter) {
		return false
	}
	if that1.Filters == nil {
		if this.Filters != nil {
			return false
		}
	} else if this.Filters == nil {
		return false
	} else if !this.Filters.Equal(that1.Filters) {
		return false
	}
	return true
}
func (this *ListOpenWorkflowExecutionsRequest_ExecutionFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOpenWorkflowExecutionsRequest_ExecutionFilter)
	if !ok {
		that2, ok := that.(ListOpenWorkflowExecutionsRequest_ExecutionFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExecutionFilter.Equal(that1.ExecutionFilter) {
		return false
	}
	return true
}
func (this *ListOpenWorkflowExecutionsRequest_TypeFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOpenWorkflowExecutionsRequest_TypeFilter)
	if !ok {
		that2, ok := that.(ListOpenWorkflowExecutionsRequest_TypeFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TypeFilter.Equal(that1.TypeFilter) {
		return false
	}
	return true
}
func (this *ListOpenWorkflowExecutionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOpenWorkflowExecutionsResponse)
	if !ok {
		that2, ok := that.(ListOpenWorkflowExecutionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Executions) != len(that1.Executions) {
		return false
	}
	for i := range this.Executions {
		if !this.Executions[i].Equal(that1.Executions[i]) {
			return false
		}
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	return true
}
func (this *ListClosedWorkflowExecutionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClosedWorkflowExecutionsRequest)
	if !ok {
		that2, ok := that.(ListClosedWorkflowExecutionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.MaximumPageSize != that1.MaximumPageSize {
		return false
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	if !this.StartTimeFilter.Equal(that1.StartTimeFilter) {
		return false
	}
	if that1.Filters == nil {
		if this.Filters != nil {
			return false
		}
	} else if this.Filters == nil {
		return false
	} else if !this.Filters.Equal(that1.Filters) {
		return false
	}
	return true
}
func (this *ListClosedWorkflowExecutionsRequest_ExecutionFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClosedWorkflowExecutionsRequest_ExecutionFilter)
	if !ok {
		that2, ok := that.(ListClosedWorkflowExecutionsRequest_ExecutionFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExecutionFilter.Equal(that1.ExecutionFilter) {
		return false
	}
	return true
}
func (this *ListClosedWorkflowExecutionsRequest_TypeFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClosedWorkflowExecutionsRequest_TypeFilter)
	if !ok {
		that2, ok := that.(ListClosedWorkflowExecutionsRequest_TypeFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TypeFilter.Equal(that1.TypeFilter) {
		return false
	}
	return true
}
func (this *ListClosedWorkflowExecutionsRequest_StatusFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClosedWorkflowExecutionsRequest_StatusFilter)
	if !ok {
		that2, ok := that.(ListClosedWorkflowExecutionsRequest_StatusFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StatusFilter.Equal(that1.StatusFilter) {
		return false
	}
	return true
}
func (this *ListClosedWorkflowExecutionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClosedWorkflowExecutionsResponse)
	if !ok {
		that2, ok := that.(ListClosedWorkflowExecutionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Executions) != len(that1.Executions) {
		return false
	}
	for i := range this.Executions {
		if !this.Executions[i].Equal(that1.Executions[i]) {
			return false
		}
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	return true
}
func (this *ListWorkflowExecutionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListWorkflowExecutionsRequest)
	if !ok {
		that2, ok := that.(ListWorkflowExecutionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *ListWorkflowExecutionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListWorkflowExecutionsResponse)
	if !ok {
		that2, ok := that.(ListWorkflowExecutionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Executions) != len(that1.Executions) {
		return false
	}
	for i := range this.Executions {
		if !this.Executions[i].Equal(that1.Executions[i]) {
			return false
		}
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	return true
}
func (this *ListArchivedWorkflowExecutionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListArchivedWorkflowExecutionsRequest)
	if !ok {
		that2, ok := that.(ListArchivedWorkflowExecutionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *ListArchivedWorkflowExecutionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListArchivedWorkflowExecutionsResponse)
	if !ok {
		that2, ok := that.(ListArchivedWorkflowExecutionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Executions) != len(that1.Executions) {
		return false
	}
	for i := range this.Executions {
		if !this.Executions[i].Equal(that1.Executions[i]) {
			return false
		}
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	return true
}
func (this *ScanWorkflowExecutionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScanWorkflowExecutionsRequest)
	if !ok {
		that2, ok := that.(ScanWorkflowExecutionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *ScanWorkflowExecutionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScanWorkflowExecutionsResponse)
	if !ok {
		that2, ok := that.(ScanWorkflowExecutionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Executions) != len(that1.Executions) {
		return false
	}
	for i := range this.Executions {
		if !this.Executions[i].Equal(that1.Executions[i]) {
			return false
		}
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	return true
}
func (this *CountWorkflowExecutionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CountWorkflowExecutionsRequest)
	if !ok {
		that2, ok := that.(CountWorkflowExecutionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *CountWorkflowExecutionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CountWorkflowExecutionsResponse)
	if !ok {
		that2, ok := that.(CountWorkflowExecutionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *GetSearchAttributesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSearchAttributesRequest)
	if !ok {
		that2, ok := that.(GetSearchAttributesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetSearchAttributesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSearchAttributesResponse)
	if !ok {
		that2, ok := that.(GetSearchAttributesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if this.Keys[i] != that1.Keys[i] {
			return false
		}
	}
	return true
}
func (this *RespondQueryTaskCompletedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondQueryTaskCompletedRequest)
	if !ok {
		that2, ok := that.(RespondQueryTaskCompletedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if this.CompletedType != that1.CompletedType {
		return false
	}
	if !bytes.Equal(this.QueryResult, that1.QueryResult) {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	if !this.WorkerVersionInfo.Equal(that1.WorkerVersionInfo) {
		return false
	}
	return true
}
func (this *RespondQueryTaskCompletedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondQueryTaskCompletedResponse)
	if !ok {
		that2, ok := that.(RespondQueryTaskCompletedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResetStickyTaskListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResetStickyTaskListRequest)
	if !ok {
		that2, ok := that.(ResetStickyTaskListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	return true
}
func (this *ResetStickyTaskListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResetStickyTaskListResponse)
	if !ok {
		that2, ok := that.(ResetStickyTaskListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *QueryWorkflowRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryWorkflowRequest)
	if !ok {
		that2, ok := that.(QueryWorkflowRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	if this.QueryRejectCondition != that1.QueryRejectCondition {
		return false
	}
	if this.QueryConsistencyLevel != that1.QueryConsistencyLevel {
		return false
	}
	return true
}
func (this *QueryWorkflowResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryWorkflowResponse)
	if !ok {
		that2, ok := that.(QueryWorkflowResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.QueryResult, that1.QueryResult) {
		return false
	}
	if !this.QueryRejected.Equal(that1.QueryRejected) {
		return false
	}
	return true
}
func (this *GetWorkflowExecutionRawHistoryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetWorkflowExecutionRawHistoryRequest)
	if !ok {
		that2, ok := that.(GetWorkflowExecutionRawHistoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	if this.MaximumPageSize != that1.MaximumPageSize {
		return false
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	return true
}
func (this *GetWorkflowExecutionRawHistoryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetWorkflowExecutionRawHistoryResponse)
	if !ok {
		that2, ok := that.(GetWorkflowExecutionRawHistoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RawHistory) != len(that1.RawHistory) {
		return false
	}
	for i := range this.RawHistory {
		if !this.RawHistory[i].Equal(that1.RawHistory[i]) {
			return false
		}
	}
	if !this.NextPageToken.Equal(that1.NextPageToken) {
		return false
	}
	return true
}
func (this *DescribeWorkflowExecutionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescribeWorkflowExecutionRequest)
	if !ok {
		that2, ok := that.(DescribeWorkflowExecutionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	return true
}
func (this *DescribeWorkflowExecutionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescribeWorkflowExecutionResponse)
	if !ok {
		that2, ok := that.(DescribeWorkflowExecutionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExecutionConfiguration.Equal(that1.ExecutionConfiguration) {
		return false
	}
	if !this.WorkflowExecutionInfo.Equal(that1.WorkflowExecutionInfo) {
		return false
	}
	if len(this.PendingActivities) != len(that1.PendingActivities) {
		return false
	}
	for i := range this.PendingActivities {
		if !this.PendingActivities[i].Equal(that1.PendingActivities[i]) {
			return false
		}
	}
	if len(this.PendingChildren) != len(that1.PendingChildren) {
		return false
	}
	for i := range this.PendingChildren {
		if !this.PendingChildren[i].Equal(that1.PendingChildren[i]) {
			return false
		}
	}
	return true
}
func (this *DescribeTaskListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescribeTaskListRequest)
	if !ok {
		that2, ok := that.(DescribeTaskListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.TaskList.Equal(that1.TaskList) {
		return false
	}
	if this.TaskListType != that1.TaskListType {
		return false
	}
	if this.IncludeTaskListStatus != that1.IncludeTaskListStatus {
		return false
	}
	return true
}
func (this *DescribeTaskListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescribeTaskListResponse)
	if !ok {
		that2, ok := that.(DescribeTaskListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pollers) != len(that1.Pollers) {
		return false
	}
	for i := range this.Pollers {
		if !this.Pollers[i].Equal(that1.Pollers[i]) {
			return false
		}
	}
	if !this.TaskListStatus.Equal(that1.TaskListStatus) {
		return false
	}
	return true
}
func (this *GetClusterInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetClusterInfoRequest)
	if !ok {
		that2, ok := that.(GetClusterInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetClusterInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetClusterInfoResponse)
	if !ok {
		that2, ok := that.(GetClusterInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SupportedClientVersions.Equal(that1.SupportedClientVersions) {
		return false
	}
	return true
}
func (this *ListTaskListPartitionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTaskListPartitionsRequest)
	if !ok {
		that2, ok := that.(ListTaskListPartitionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.TaskList.Equal(that1.TaskList) {
		return false
	}
	return true
}
func (this *ListTaskListPartitionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTaskListPartitionsResponse)
	if !ok {
		that2, ok := that.(ListTaskListPartitionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ActivityTaskListPartitions) != len(that1.ActivityTaskListPartitions) {
		return false
	}
	for i := range this.ActivityTaskListPartitions {
		if !this.ActivityTaskListPartitions[i].Equal(that1.ActivityTaskListPartitions[i]) {
			return false
		}
	}
	if len(this.DecisionTaskListPartitions) != len(that1.DecisionTaskListPartitions) {
		return false
	}
	for i := range this.DecisionTaskListPartitions {
		if !this.DecisionTaskListPartitions[i].Equal(that1.DecisionTaskListPartitions[i]) {
			return false
		}
	}
	return true
}
func (this *RegisterDomainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&workflowservice.RegisterDomainRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "OwnerEmail: "+fmt.Sprintf("%#v", this.OwnerEmail)+",\n")
	s = append(s, "WorkflowExecutionRetentionPeriodInDays: "+fmt.Sprintf("%#v", this.WorkflowExecutionRetentionPeriodInDays)+",\n")
	s = append(s, "EmitMetric: "+fmt.Sprintf("%#v", this.EmitMetric)+",\n")
	if this.Clusters != nil {
		s = append(s, "Clusters: "+fmt.Sprintf("%#v", this.Clusters)+",\n")
	}
	s = append(s, "ActiveClusterName: "+fmt.Sprintf("%#v", this.ActiveClusterName)+",\n")
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%#v: %#v,", k, this.Data[k])
	}
	mapStringForData += "}"
	if this.Data != nil {
		s = append(s, "Data: "+mapStringForData+",\n")
	}
	s = append(s, "SecurityToken: "+fmt.Sprintf("%#v", this.SecurityToken)+",\n")
	s = append(s, "IsGlobalDomain: "+fmt.Sprintf("%#v", this.IsGlobalDomain)+",\n")
	s = append(s, "HistoryArchivalStatus: "+fmt.Sprintf("%#v", this.HistoryArchivalStatus)+",\n")
	s = append(s, "HistoryArchivalURI: "+fmt.Sprintf("%#v", this.HistoryArchivalURI)+",\n")
	s = append(s, "VisibilityArchivalStatus: "+fmt.Sprintf("%#v", this.VisibilityArchivalStatus)+",\n")
	s = append(s, "VisibilityArchivalURI: "+fmt.Sprintf("%#v", this.VisibilityArchivalURI)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterDomainResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.RegisterDomainResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDomainsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.ListDomainsRequest{")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDomainsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.ListDomainsResponse{")
	if this.Domains != nil {
		s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	}
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DescribeDomainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.DescribeDomainRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DescribeDomainResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&workflowservice.DescribeDomainResponse{")
	if this.DomainInfo != nil {
		s = append(s, "DomainInfo: "+fmt.Sprintf("%#v", this.DomainInfo)+",\n")
	}
	if this.Configuration != nil {
		s = append(s, "Configuration: "+fmt.Sprintf("%#v", this.Configuration)+",\n")
	}
	if this.ReplicationConfiguration != nil {
		s = append(s, "ReplicationConfiguration: "+fmt.Sprintf("%#v", this.ReplicationConfiguration)+",\n")
	}
	s = append(s, "FailoverVersion: "+fmt.Sprintf("%#v", this.FailoverVersion)+",\n")
	s = append(s, "IsGlobalDomain: "+fmt.Sprintf("%#v", this.IsGlobalDomain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateDomainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&workflowservice.UpdateDomainRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.UpdatedInfo != nil {
		s = append(s, "UpdatedInfo: "+fmt.Sprintf("%#v", this.UpdatedInfo)+",\n")
	}
	if this.Configuration != nil {
		s = append(s, "Configuration: "+fmt.Sprintf("%#v", this.Configuration)+",\n")
	}
	if this.ReplicationConfiguration != nil {
		s = append(s, "ReplicationConfiguration: "+fmt.Sprintf("%#v", this.ReplicationConfiguration)+",\n")
	}
	s = append(s, "SecurityToken: "+fmt.Sprintf("%#v", this.SecurityToken)+",\n")
	s = append(s, "DeleteBadBinary: "+fmt.Sprintf("%#v", this.DeleteBadBinary)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateDomainResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&workflowservice.UpdateDomainResponse{")
	if this.DomainInfo != nil {
		s = append(s, "DomainInfo: "+fmt.Sprintf("%#v", this.DomainInfo)+",\n")
	}
	if this.Configuration != nil {
		s = append(s, "Configuration: "+fmt.Sprintf("%#v", this.Configuration)+",\n")
	}
	if this.ReplicationConfiguration != nil {
		s = append(s, "ReplicationConfiguration: "+fmt.Sprintf("%#v", this.ReplicationConfiguration)+",\n")
	}
	s = append(s, "FailoverVersion: "+fmt.Sprintf("%#v", this.FailoverVersion)+",\n")
	s = append(s, "IsGlobalDomain: "+fmt.Sprintf("%#v", this.IsGlobalDomain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeprecateDomainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.DeprecateDomainRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "SecurityToken: "+fmt.Sprintf("%#v", this.SecurityToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeprecateDomainResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.DeprecateDomainResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartWorkflowExecutionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&workflowservice.StartWorkflowExecutionRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	if this.TaskList != nil {
		s = append(s, "TaskList: "+fmt.Sprintf("%#v", this.TaskList)+",\n")
	}
	s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	s = append(s, "ExecutionStartToCloseTimeoutSeconds: "+fmt.Sprintf("%#v", this.ExecutionStartToCloseTimeoutSeconds)+",\n")
	s = append(s, "TaskStartToCloseTimeoutSeconds: "+fmt.Sprintf("%#v", this.TaskStartToCloseTimeoutSeconds)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "WorkflowIdReusePolicy: "+fmt.Sprintf("%#v", this.WorkflowIdReusePolicy)+",\n")
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "CronSchedule: "+fmt.Sprintf("%#v", this.CronSchedule)+",\n")
	if this.Memo != nil {
		s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	}
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartWorkflowExecutionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&workflowservice.StartWorkflowExecutionResponse{")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetWorkflowExecutionHistoryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&workflowservice.GetWorkflowExecutionHistoryRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	s = append(s, "MaximumPageSize: "+fmt.Sprintf("%#v", this.MaximumPageSize)+",\n")
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	s = append(s, "WaitForNewEvent: "+fmt.Sprintf("%#v", this.WaitForNewEvent)+",\n")
	s = append(s, "HistoryEventFilterType: "+fmt.Sprintf("%#v", this.HistoryEventFilterType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetWorkflowExecutionHistoryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&workflowservice.GetWorkflowExecutionHistoryResponse{")
	if this.History != nil {
		s = append(s, "History: "+fmt.Sprintf("%#v", this.History)+",\n")
	}
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	s = append(s, "Archived: "+fmt.Sprintf("%#v", this.Archived)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollForDecisionTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&workflowservice.PollForDecisionTaskRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.TaskList != nil {
		s = append(s, "TaskList: "+fmt.Sprintf("%#v", this.TaskList)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "BinaryChecksum: "+fmt.Sprintf("%#v", this.BinaryChecksum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollForDecisionTaskResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&workflowservice.PollForDecisionTaskResponse{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	s = append(s, "PreviousStartedEventId: "+fmt.Sprintf("%#v", this.PreviousStartedEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	s = append(s, "BacklogCountHint: "+fmt.Sprintf("%#v", this.BacklogCountHint)+",\n")
	if this.History != nil {
		s = append(s, "History: "+fmt.Sprintf("%#v", this.History)+",\n")
	}
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	if this.WorkflowExecutionTaskList != nil {
		s = append(s, "WorkflowExecutionTaskList: "+fmt.Sprintf("%#v", this.WorkflowExecutionTaskList)+",\n")
	}
	s = append(s, "ScheduledTimestamp: "+fmt.Sprintf("%#v", this.ScheduledTimestamp)+",\n")
	s = append(s, "StartedTimestamp: "+fmt.Sprintf("%#v", this.StartedTimestamp)+",\n")
	keysForQueries := make([]string, 0, len(this.Queries))
	for k, _ := range this.Queries {
		keysForQueries = append(keysForQueries, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQueries)
	mapStringForQueries := "map[string]*common.WorkflowQuery{"
	for _, k := range keysForQueries {
		mapStringForQueries += fmt.Sprintf("%#v: %#v,", k, this.Queries[k])
	}
	mapStringForQueries += "}"
	if this.Queries != nil {
		s = append(s, "Queries: "+mapStringForQueries+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondDecisionTaskCompletedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&workflowservice.RespondDecisionTaskCompletedRequest{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	if this.Decisions != nil {
		s = append(s, "Decisions: "+fmt.Sprintf("%#v", this.Decisions)+",\n")
	}
	s = append(s, "ExecutionContext: "+fmt.Sprintf("%#v", this.ExecutionContext)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	if this.StickyAttributes != nil {
		s = append(s, "StickyAttributes: "+fmt.Sprintf("%#v", this.StickyAttributes)+",\n")
	}
	s = append(s, "ReturnNewDecisionTask: "+fmt.Sprintf("%#v", this.ReturnNewDecisionTask)+",\n")
	s = append(s, "ForceCreateNewDecisionTask: "+fmt.Sprintf("%#v", this.ForceCreateNewDecisionTask)+",\n")
	s = append(s, "BinaryChecksum: "+fmt.Sprintf("%#v", this.BinaryChecksum)+",\n")
	keysForQueryResults := make([]string, 0, len(this.QueryResults))
	for k, _ := range this.QueryResults {
		keysForQueryResults = append(keysForQueryResults, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQueryResults)
	mapStringForQueryResults := "map[string]*common.WorkflowQueryResult{"
	for _, k := range keysForQueryResults {
		mapStringForQueryResults += fmt.Sprintf("%#v: %#v,", k, this.QueryResults[k])
	}
	mapStringForQueryResults += "}"
	if this.QueryResults != nil {
		s = append(s, "QueryResults: "+mapStringForQueryResults+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondDecisionTaskCompletedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&workflowservice.RespondDecisionTaskCompletedResponse{")
	if this.DecisionTask != nil {
		s = append(s, "DecisionTask: "+fmt.Sprintf("%#v", this.DecisionTask)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondDecisionTaskFailedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&workflowservice.RespondDecisionTaskFailedRequest{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	s = append(s, "Cause: "+fmt.Sprintf("%#v", this.Cause)+",\n")
	s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "BinaryChecksum: "+fmt.Sprintf("%#v", this.BinaryChecksum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondDecisionTaskFailedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.RespondDecisionTaskFailedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollForActivityTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&workflowservice.PollForActivityTaskRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.TaskList != nil {
		s = append(s, "TaskList: "+fmt.Sprintf("%#v", this.TaskList)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	if this.TaskListMetadata != nil {
		s = append(s, "TaskListMetadata: "+fmt.Sprintf("%#v", this.TaskListMetadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollForActivityTaskResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&workflowservice.PollForActivityTaskResponse{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	if this.ActivityType != nil {
		s = append(s, "ActivityType: "+fmt.Sprintf("%#v", this.ActivityType)+",\n")
	}
	s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	s = append(s, "ScheduledTimestamp: "+fmt.Sprintf("%#v", this.ScheduledTimestamp)+",\n")
	s = append(s, "ScheduleToCloseTimeoutSeconds: "+fmt.Sprintf("%#v", this.ScheduleToCloseTimeoutSeconds)+",\n")
	s = append(s, "StartedTimestamp: "+fmt.Sprintf("%#v", this.StartedTimestamp)+",\n")
	s = append(s, "StartToCloseTimeoutSeconds: "+fmt.Sprintf("%#v", this.StartToCloseTimeoutSeconds)+",\n")
	s = append(s, "HeartbeatTimeoutSeconds: "+fmt.Sprintf("%#v", this.HeartbeatTimeoutSeconds)+",\n")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	s = append(s, "ScheduledTimestampOfThisAttempt: "+fmt.Sprintf("%#v", this.ScheduledTimestampOfThisAttempt)+",\n")
	s = append(s, "HeartbeatDetails: "+fmt.Sprintf("%#v", this.HeartbeatDetails)+",\n")
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	s = append(s, "WorkflowDomain: "+fmt.Sprintf("%#v", this.WorkflowDomain)+",\n")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordActivityTaskHeartbeatRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&workflowservice.RecordActivityTaskHeartbeatRequest{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordActivityTaskHeartbeatResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&workflowservice.RecordActivityTaskHeartbeatResponse{")
	s = append(s, "CancelRequested: "+fmt.Sprintf("%#v", this.CancelRequested)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordActivityTaskHeartbeatByIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&workflowservice.RecordActivityTaskHeartbeatByIDRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "WorkflowID: "+fmt.Sprintf("%#v", this.WorkflowID)+",\n")
	s = append(s, "RunID: "+fmt.Sprintf("%#v", this.RunID)+",\n")
	s = append(s, "ActivityID: "+fmt.Sprintf("%#v", this.ActivityID)+",\n")
	s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordActivityTaskHeartbeatByIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&workflowservice.RecordActivityTaskHeartbeatByIDResponse{")
	s = append(s, "CancelRequested: "+fmt.Sprintf("%#v", this.CancelRequested)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCompletedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&workflowservice.RespondActivityTaskCompletedRequest{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCompletedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.RespondActivityTaskCompletedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCompletedByIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&workflowservice.RespondActivityTaskCompletedByIDRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "WorkflowID: "+fmt.Sprintf("%#v", this.WorkflowID)+",\n")
	s = append(s, "RunID: "+fmt.Sprintf("%#v", this.RunID)+",\n")
	s = append(s, "ActivityID: "+fmt.Sprintf("%#v", this.ActivityID)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCompletedByIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.RespondActivityTaskCompletedByIDResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskFailedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&workflowservice.RespondActivityTaskFailedRequest{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskFailedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.RespondActivityTaskFailedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskFailedByIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&workflowservice.RespondActivityTaskFailedByIDRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "WorkflowID: "+fmt.Sprintf("%#v", this.WorkflowID)+",\n")
	s = append(s, "RunID: "+fmt.Sprintf("%#v", this.RunID)+",\n")
	s = append(s, "ActivityID: "+fmt.Sprintf("%#v", this.ActivityID)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskFailedByIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.RespondActivityTaskFailedByIDResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCanceledRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&workflowservice.RespondActivityTaskCanceledRequest{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCanceledResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.RespondActivityTaskCanceledResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCanceledByIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&workflowservice.RespondActivityTaskCanceledByIDRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "WorkflowID: "+fmt.Sprintf("%#v", this.WorkflowID)+",\n")
	s = append(s, "RunID: "+fmt.Sprintf("%#v", this.RunID)+",\n")
	s = append(s, "ActivityID: "+fmt.Sprintf("%#v", this.ActivityID)+",\n")
	s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCanceledByIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.RespondActivityTaskCanceledByIDResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCancelWorkflowExecutionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&workflowservice.RequestCancelWorkflowExecutionRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCancelWorkflowExecutionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.RequestCancelWorkflowExecutionResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignalWorkflowExecutionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&workflowservice.SignalWorkflowExecutionRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "SignalName: "+fmt.Sprintf("%#v", this.SignalName)+",\n")
	s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignalWorkflowExecutionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.SignalWorkflowExecutionResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignalWithStartWorkflowExecutionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 22)
	s = append(s, "&workflowservice.SignalWithStartWorkflowExecutionRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	if this.TaskList != nil {
		s = append(s, "TaskList: "+fmt.Sprintf("%#v", this.TaskList)+",\n")
	}
	s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	s = append(s, "ExecutionStartToCloseTimeoutSeconds: "+fmt.Sprintf("%#v", this.ExecutionStartToCloseTimeoutSeconds)+",\n")
	s = append(s, "TaskStartToCloseTimeoutSeconds: "+fmt.Sprintf("%#v", this.TaskStartToCloseTimeoutSeconds)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "WorkflowIdReusePolicy: "+fmt.Sprintf("%#v", this.WorkflowIdReusePolicy)+",\n")
	s = append(s, "SignalName: "+fmt.Sprintf("%#v", this.SignalName)+",\n")
	s = append(s, "SignalInput: "+fmt.Sprintf("%#v", this.SignalInput)+",\n")
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "CronSchedule: "+fmt.Sprintf("%#v", this.CronSchedule)+",\n")
	if this.Memo != nil {
		s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	}
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignalWithStartWorkflowExecutionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&workflowservice.SignalWithStartWorkflowExecutionResponse{")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetWorkflowExecutionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&workflowservice.ResetWorkflowExecutionRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "DecisionFinishEventId: "+fmt.Sprintf("%#v", this.DecisionFinishEventId)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetWorkflowExecutionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&workflowservice.ResetWorkflowExecutionResponse{")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TerminateWorkflowExecutionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&workflowservice.TerminateWorkflowExecutionRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TerminateWorkflowExecutionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.TerminateWorkflowExecutionResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListOpenWorkflowExecutionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&workflowservice.ListOpenWorkflowExecutionsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "MaximumPageSize: "+fmt.Sprintf("%#v", this.MaximumPageSize)+",\n")
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	if this.StartTimeFilter != nil {
		s = append(s, "StartTimeFilter: "+fmt.Sprintf("%#v", this.StartTimeFilter)+",\n")
	}
	if this.Filters != nil {
		s = append(s, "Filters: "+fmt.Sprintf("%#v", this.Filters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListOpenWorkflowExecutionsRequest_ExecutionFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&workflowservice.ListOpenWorkflowExecutionsRequest_ExecutionFilter{` +
		`ExecutionFilter:` + fmt.Sprintf("%#v", this.ExecutionFilter) + `}`}, ", ")
	return s
}
func (this *ListOpenWorkflowExecutionsRequest_TypeFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&workflowservice.ListOpenWorkflowExecutionsRequest_TypeFilter{` +
		`TypeFilter:` + fmt.Sprintf("%#v", this.TypeFilter) + `}`}, ", ")
	return s
}
func (this *ListOpenWorkflowExecutionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.ListOpenWorkflowExecutionsResponse{")
	if this.Executions != nil {
		s = append(s, "Executions: "+fmt.Sprintf("%#v", this.Executions)+",\n")
	}
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListClosedWorkflowExecutionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&workflowservice.ListClosedWorkflowExecutionsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "MaximumPageSize: "+fmt.Sprintf("%#v", this.MaximumPageSize)+",\n")
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	if this.StartTimeFilter != nil {
		s = append(s, "StartTimeFilter: "+fmt.Sprintf("%#v", this.StartTimeFilter)+",\n")
	}
	if this.Filters != nil {
		s = append(s, "Filters: "+fmt.Sprintf("%#v", this.Filters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListClosedWorkflowExecutionsRequest_ExecutionFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&workflowservice.ListClosedWorkflowExecutionsRequest_ExecutionFilter{` +
		`ExecutionFilter:` + fmt.Sprintf("%#v", this.ExecutionFilter) + `}`}, ", ")
	return s
}
func (this *ListClosedWorkflowExecutionsRequest_TypeFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&workflowservice.ListClosedWorkflowExecutionsRequest_TypeFilter{` +
		`TypeFilter:` + fmt.Sprintf("%#v", this.TypeFilter) + `}`}, ", ")
	return s
}
func (this *ListClosedWorkflowExecutionsRequest_StatusFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&workflowservice.ListClosedWorkflowExecutionsRequest_StatusFilter{` +
		`StatusFilter:` + fmt.Sprintf("%#v", this.StatusFilter) + `}`}, ", ")
	return s
}
func (this *ListClosedWorkflowExecutionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.ListClosedWorkflowExecutionsResponse{")
	if this.Executions != nil {
		s = append(s, "Executions: "+fmt.Sprintf("%#v", this.Executions)+",\n")
	}
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListWorkflowExecutionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&workflowservice.ListWorkflowExecutionsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListWorkflowExecutionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.ListWorkflowExecutionsResponse{")
	if this.Executions != nil {
		s = append(s, "Executions: "+fmt.Sprintf("%#v", this.Executions)+",\n")
	}
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListArchivedWorkflowExecutionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&workflowservice.ListArchivedWorkflowExecutionsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListArchivedWorkflowExecutionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.ListArchivedWorkflowExecutionsResponse{")
	if this.Executions != nil {
		s = append(s, "Executions: "+fmt.Sprintf("%#v", this.Executions)+",\n")
	}
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScanWorkflowExecutionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&workflowservice.ScanWorkflowExecutionsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScanWorkflowExecutionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.ScanWorkflowExecutionsResponse{")
	if this.Executions != nil {
		s = append(s, "Executions: "+fmt.Sprintf("%#v", this.Executions)+",\n")
	}
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CountWorkflowExecutionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.CountWorkflowExecutionsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CountWorkflowExecutionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&workflowservice.CountWorkflowExecutionsResponse{")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSearchAttributesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.GetSearchAttributesRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSearchAttributesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&workflowservice.GetSearchAttributesResponse{")
	keysForKeys := make([]string, 0, len(this.Keys))
	for k, _ := range this.Keys {
		keysForKeys = append(keysForKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForKeys)
	mapStringForKeys := "map[string]enums.IndexedValueType{"
	for _, k := range keysForKeys {
		mapStringForKeys += fmt.Sprintf("%#v: %#v,", k, this.Keys[k])
	}
	mapStringForKeys += "}"
	if this.Keys != nil {
		s = append(s, "Keys: "+mapStringForKeys+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondQueryTaskCompletedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&workflowservice.RespondQueryTaskCompletedRequest{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	s = append(s, "CompletedType: "+fmt.Sprintf("%#v", this.CompletedType)+",\n")
	s = append(s, "QueryResult: "+fmt.Sprintf("%#v", this.QueryResult)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	if this.WorkerVersionInfo != nil {
		s = append(s, "WorkerVersionInfo: "+fmt.Sprintf("%#v", this.WorkerVersionInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondQueryTaskCompletedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.RespondQueryTaskCompletedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetStickyTaskListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.ResetStickyTaskListRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetStickyTaskListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.ResetStickyTaskListResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryWorkflowRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&workflowservice.QueryWorkflowRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	s = append(s, "QueryRejectCondition: "+fmt.Sprintf("%#v", this.QueryRejectCondition)+",\n")
	s = append(s, "QueryConsistencyLevel: "+fmt.Sprintf("%#v", this.QueryConsistencyLevel)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryWorkflowResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.QueryWorkflowResponse{")
	s = append(s, "QueryResult: "+fmt.Sprintf("%#v", this.QueryResult)+",\n")
	if this.QueryRejected != nil {
		s = append(s, "QueryRejected: "+fmt.Sprintf("%#v", this.QueryRejected)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetWorkflowExecutionRawHistoryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&workflowservice.GetWorkflowExecutionRawHistoryRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	s = append(s, "MaximumPageSize: "+fmt.Sprintf("%#v", this.MaximumPageSize)+",\n")
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetWorkflowExecutionRawHistoryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.GetWorkflowExecutionRawHistoryResponse{")
	if this.RawHistory != nil {
		s = append(s, "RawHistory: "+fmt.Sprintf("%#v", this.RawHistory)+",\n")
	}
	if this.NextPageToken != nil {
		s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DescribeWorkflowExecutionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.DescribeWorkflowExecutionRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DescribeWorkflowExecutionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&workflowservice.DescribeWorkflowExecutionResponse{")
	if this.ExecutionConfiguration != nil {
		s = append(s, "ExecutionConfiguration: "+fmt.Sprintf("%#v", this.ExecutionConfiguration)+",\n")
	}
	if this.WorkflowExecutionInfo != nil {
		s = append(s, "WorkflowExecutionInfo: "+fmt.Sprintf("%#v", this.WorkflowExecutionInfo)+",\n")
	}
	if this.PendingActivities != nil {
		s = append(s, "PendingActivities: "+fmt.Sprintf("%#v", this.PendingActivities)+",\n")
	}
	if this.PendingChildren != nil {
		s = append(s, "PendingChildren: "+fmt.Sprintf("%#v", this.PendingChildren)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DescribeTaskListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&workflowservice.DescribeTaskListRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.TaskList != nil {
		s = append(s, "TaskList: "+fmt.Sprintf("%#v", this.TaskList)+",\n")
	}
	s = append(s, "TaskListType: "+fmt.Sprintf("%#v", this.TaskListType)+",\n")
	s = append(s, "IncludeTaskListStatus: "+fmt.Sprintf("%#v", this.IncludeTaskListStatus)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DescribeTaskListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.DescribeTaskListResponse{")
	if this.Pollers != nil {
		s = append(s, "Pollers: "+fmt.Sprintf("%#v", this.Pollers)+",\n")
	}
	if this.TaskListStatus != nil {
		s = append(s, "TaskListStatus: "+fmt.Sprintf("%#v", this.TaskListStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetClusterInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&workflowservice.GetClusterInfoRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetClusterInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&workflowservice.GetClusterInfoResponse{")
	if this.SupportedClientVersions != nil {
		s = append(s, "SupportedClientVersions: "+fmt.Sprintf("%#v", this.SupportedClientVersions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTaskListPartitionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.ListTaskListPartitionsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.TaskList != nil {
		s = append(s, "TaskList: "+fmt.Sprintf("%#v", this.TaskList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTaskListPartitionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workflowservice.ListTaskListPartitionsResponse{")
	if this.ActivityTaskListPartitions != nil {
		s = append(s, "ActivityTaskListPartitions: "+fmt.Sprintf("%#v", this.ActivityTaskListPartitions)+",\n")
	}
	if this.DecisionTaskListPartitions != nil {
		s = append(s, "DecisionTaskListPartitions: "+fmt.Sprintf("%#v", this.DecisionTaskListPartitions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRequestResponse(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RegisterDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VisibilityArchivalURI) > 0 {
		i -= len(m.VisibilityArchivalURI)
		copy(dAtA[i:], m.VisibilityArchivalURI)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.VisibilityArchivalURI)))
		i--
		dAtA[i] = 0x72
	}
	if m.VisibilityArchivalStatus != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.VisibilityArchivalStatus))
		i--
		dAtA[i] = 0x68
	}
	if len(m.HistoryArchivalURI) > 0 {
		i -= len(m.HistoryArchivalURI)
		copy(dAtA[i:], m.HistoryArchivalURI)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.HistoryArchivalURI)))
		i--
		dAtA[i] = 0x62
	}
	if m.HistoryArchivalStatus != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.HistoryArchivalStatus))
		i--
		dAtA[i] = 0x58
	}
	if m.IsGlobalDomain {
		i--
		if m.IsGlobalDomain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.SecurityToken) > 0 {
		i -= len(m.SecurityToken)
		copy(dAtA[i:], m.SecurityToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.SecurityToken)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRequestResponse(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ActiveClusterName) > 0 {
		i -= len(m.ActiveClusterName)
		copy(dAtA[i:], m.ActiveClusterName)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ActiveClusterName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clusters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.EmitMetric {
		i--
		if m.EmitMetric {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.WorkflowExecutionRetentionPeriodInDays != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.WorkflowExecutionRetentionPeriodInDays))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OwnerEmail) > 0 {
		i -= len(m.OwnerEmail)
		copy(dAtA[i:], m.OwnerEmail)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.OwnerEmail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListDomainsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDomainsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDomainsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListDomainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDomainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDomainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DescribeDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescribeDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescribeDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DescribeDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescribeDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescribeDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsGlobalDomain {
		i--
		if m.IsGlobalDomain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.FailoverVersion != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.FailoverVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.ReplicationConfiguration != nil {
		{
			size, err := m.ReplicationConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DomainInfo != nil {
		{
			size, err := m.DomainInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeleteBadBinary) > 0 {
		i -= len(m.DeleteBadBinary)
		copy(dAtA[i:], m.DeleteBadBinary)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.DeleteBadBinary)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SecurityToken) > 0 {
		i -= len(m.SecurityToken)
		copy(dAtA[i:], m.SecurityToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.SecurityToken)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ReplicationConfiguration != nil {
		{
			size, err := m.ReplicationConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UpdatedInfo != nil {
		{
			size, err := m.UpdatedInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsGlobalDomain {
		i--
		if m.IsGlobalDomain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.FailoverVersion != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.FailoverVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.ReplicationConfiguration != nil {
		{
			size, err := m.ReplicationConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DomainInfo != nil {
		{
			size, err := m.DomainInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeprecateDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeprecateDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeprecateDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecurityToken) > 0 {
		i -= len(m.SecurityToken)
		copy(dAtA[i:], m.SecurityToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.SecurityToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeprecateDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeprecateDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeprecateDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StartWorkflowExecutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartWorkflowExecutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartWorkflowExecutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CronSchedule) > 0 {
		i -= len(m.CronSchedule)
		copy(dAtA[i:], m.CronSchedule)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.CronSchedule)))
		i--
		dAtA[i] = 0x62
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.WorkflowIdReusePolicy != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.WorkflowIdReusePolicy))
		i--
		dAtA[i] = 0x50
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x42
	}
	if m.TaskStartToCloseTimeoutSeconds != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.TaskStartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x38
	}
	if m.ExecutionStartToCloseTimeoutSeconds != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.ExecutionStartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartWorkflowExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartWorkflowExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartWorkflowExecutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkflowExecutionHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkflowExecutionHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkflowExecutionHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HistoryEventFilterType != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.HistoryEventFilterType))
		i--
		dAtA[i] = 0x30
	}
	if m.WaitForNewEvent {
		i--
		if m.WaitForNewEvent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MaximumPageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.MaximumPageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkflowExecutionHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkflowExecutionHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkflowExecutionHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Archived {
		i--
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.History != nil {
		{
			size, err := m.History.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollForDecisionTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollForDecisionTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollForDecisionTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollForDecisionTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollForDecisionTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollForDecisionTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for k := range m.Queries {
			v := m.Queries[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRequestResponse(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRequestResponse(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.StartedTimestamp != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.StartedTimestamp))
		i--
		dAtA[i] = 0x68
	}
	if m.ScheduledTimestamp != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.ScheduledTimestamp))
		i--
		dAtA[i] = 0x60
	}
	if m.WorkflowExecutionTaskList != nil {
		{
			size, err := m.WorkflowExecutionTaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.History != nil {
		{
			size, err := m.History.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.BacklogCountHint != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.BacklogCountHint))
		i--
		dAtA[i] = 0x38
	}
	if m.Attempt != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x30
	}
	if m.StartedEventId != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.PreviousStartedEventId != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.PreviousStartedEventId))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondDecisionTaskCompletedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondDecisionTaskCompletedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondDecisionTaskCompletedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryResults) > 0 {
		for k := range m.QueryResults {
			v := m.QueryResults[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRequestResponse(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRequestResponse(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0x42
	}
	if m.ForceCreateNewDecisionTask {
		i--
		if m.ForceCreateNewDecisionTask {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ReturnNewDecisionTask {
		i--
		if m.ReturnNewDecisionTask {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.StickyAttributes != nil {
		{
			size, err := m.StickyAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExecutionContext) > 0 {
		i -= len(m.ExecutionContext)
		copy(dAtA[i:], m.ExecutionContext)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ExecutionContext)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Decisions) > 0 {
		for iNdEx := len(m.Decisions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Decisions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondDecisionTaskCompletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondDecisionTaskCompletedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondDecisionTaskCompletedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DecisionTask != nil {
		{
			size, err := m.DecisionTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondDecisionTaskFailedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondDecisionTaskFailedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondDecisionTaskFailedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Cause != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondDecisionTaskFailedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondDecisionTaskFailedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondDecisionTaskFailedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PollForActivityTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollForActivityTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollForActivityTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskListMetadata != nil {
		{
			size, err := m.TaskListMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollForActivityTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollForActivityTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollForActivityTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.WorkflowDomain) > 0 {
		i -= len(m.WorkflowDomain)
		copy(dAtA[i:], m.WorkflowDomain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.WorkflowDomain)))
		i--
		dAtA[i] = 0x7a
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.HeartbeatDetails) > 0 {
		i -= len(m.HeartbeatDetails)
		copy(dAtA[i:], m.HeartbeatDetails)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.HeartbeatDetails)))
		i--
		dAtA[i] = 0x6a
	}
	if m.ScheduledTimestampOfThisAttempt != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.ScheduledTimestampOfThisAttempt))
		i--
		dAtA[i] = 0x60
	}
	if m.Attempt != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x58
	}
	if m.HeartbeatTimeoutSeconds != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.HeartbeatTimeoutSeconds))
		i--
		dAtA[i] = 0x50
	}
	if m.StartToCloseTimeoutSeconds != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.StartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x48
	}
	if m.StartedTimestamp != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.StartedTimestamp))
		i--
		dAtA[i] = 0x40
	}
	if m.ScheduleToCloseTimeoutSeconds != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.ScheduleToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x38
	}
	if m.ScheduledTimestamp != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.ScheduledTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordActivityTaskHeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordActivityTaskHeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordActivityTaskHeartbeatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordActivityTaskHeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordActivityTaskHeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordActivityTaskHeartbeatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CancelRequested {
		i--
		if m.CancelRequested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordActivityTaskHeartbeatByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordActivityTaskHeartbeatByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordActivityTaskHeartbeatByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActivityID) > 0 {
		i -= len(m.ActivityID)
		copy(dAtA[i:], m.ActivityID)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ActivityID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunID) > 0 {
		i -= len(m.RunID)
		copy(dAtA[i:], m.RunID)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RunID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowID) > 0 {
		i -= len(m.WorkflowID)
		copy(dAtA[i:], m.WorkflowID)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.WorkflowID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordActivityTaskHeartbeatByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordActivityTaskHeartbeatByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordActivityTaskHeartbeatByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CancelRequested {
		i--
		if m.CancelRequested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCompletedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCompletedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCompletedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCompletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCompletedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCompletedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCompletedByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCompletedByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCompletedByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActivityID) > 0 {
		i -= len(m.ActivityID)
		copy(dAtA[i:], m.ActivityID)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ActivityID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunID) > 0 {
		i -= len(m.RunID)
		copy(dAtA[i:], m.RunID)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RunID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowID) > 0 {
		i -= len(m.WorkflowID)
		copy(dAtA[i:], m.WorkflowID)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.WorkflowID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCompletedByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCompletedByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCompletedByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskFailedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskFailedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskFailedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskFailedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskFailedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskFailedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskFailedByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskFailedByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskFailedByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActivityID) > 0 {
		i -= len(m.ActivityID)
		copy(dAtA[i:], m.ActivityID)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ActivityID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunID) > 0 {
		i -= len(m.RunID)
		copy(dAtA[i:], m.RunID)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RunID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowID) > 0 {
		i -= len(m.WorkflowID)
		copy(dAtA[i:], m.WorkflowID)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.WorkflowID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskFailedByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskFailedByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskFailedByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCanceledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCanceledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCanceledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCanceledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCanceledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCanceledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCanceledByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCanceledByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCanceledByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActivityID) > 0 {
		i -= len(m.ActivityID)
		copy(dAtA[i:], m.ActivityID)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ActivityID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunID) > 0 {
		i -= len(m.RunID)
		copy(dAtA[i:], m.RunID)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RunID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowID) > 0 {
		i -= len(m.WorkflowID)
		copy(dAtA[i:], m.WorkflowID)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.WorkflowID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCanceledByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCanceledByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCanceledByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RequestCancelWorkflowExecutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelWorkflowExecutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelWorkflowExecutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelWorkflowExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelWorkflowExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelWorkflowExecutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SignalWorkflowExecutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalWorkflowExecutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalWorkflowExecutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SignalName) > 0 {
		i -= len(m.SignalName)
		copy(dAtA[i:], m.SignalName)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.SignalName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignalWorkflowExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalWorkflowExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalWorkflowExecutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SignalWithStartWorkflowExecutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalWithStartWorkflowExecutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalWithStartWorkflowExecutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.CronSchedule) > 0 {
		i -= len(m.CronSchedule)
		copy(dAtA[i:], m.CronSchedule)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.CronSchedule)))
		i--
		dAtA[i] = 0x7a
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SignalInput) > 0 {
		i -= len(m.SignalInput)
		copy(dAtA[i:], m.SignalInput)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.SignalInput)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SignalName) > 0 {
		i -= len(m.SignalName)
		copy(dAtA[i:], m.SignalName)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.SignalName)))
		i--
		dAtA[i] = 0x5a
	}
	if m.WorkflowIdReusePolicy != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.WorkflowIdReusePolicy))
		i--
		dAtA[i] = 0x50
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x42
	}
	if m.TaskStartToCloseTimeoutSeconds != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.TaskStartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x38
	}
	if m.ExecutionStartToCloseTimeoutSeconds != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.ExecutionStartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignalWithStartWorkflowExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalWithStartWorkflowExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalWithStartWorkflowExecutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResetWorkflowExecutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetWorkflowExecutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetWorkflowExecutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DecisionFinishEventId != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.DecisionFinishEventId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResetWorkflowExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetWorkflowExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetWorkflowExecutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TerminateWorkflowExecutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminateWorkflowExecutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerminateWorkflowExecutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TerminateWorkflowExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminateWorkflowExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerminateWorkflowExecutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListOpenWorkflowExecutionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOpenWorkflowExecutionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListOpenWorkflowExecutionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filters != nil {
		{
			size := m.Filters.Size()
			i -= size
			if _, err := m.Filters.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StartTimeFilter != nil {
		{
			size, err := m.StartTimeFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaximumPageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.MaximumPageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListOpenWorkflowExecutionsRequest_ExecutionFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListOpenWorkflowExecutionsRequest_ExecutionFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecutionFilter != nil {
		{
			size, err := m.ExecutionFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ListOpenWorkflowExecutionsRequest_TypeFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListOpenWorkflowExecutionsRequest_TypeFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TypeFilter != nil {
		{
			size, err := m.TypeFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ListOpenWorkflowExecutionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOpenWorkflowExecutionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListOpenWorkflowExecutionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executions) > 0 {
		for iNdEx := len(m.Executions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListClosedWorkflowExecutionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClosedWorkflowExecutionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListClosedWorkflowExecutionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filters != nil {
		{
			size := m.Filters.Size()
			i -= size
			if _, err := m.Filters.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StartTimeFilter != nil {
		{
			size, err := m.StartTimeFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaximumPageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.MaximumPageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListClosedWorkflowExecutionsRequest_ExecutionFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListClosedWorkflowExecutionsRequest_ExecutionFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecutionFilter != nil {
		{
			size, err := m.ExecutionFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ListClosedWorkflowExecutionsRequest_TypeFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListClosedWorkflowExecutionsRequest_TypeFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TypeFilter != nil {
		{
			size, err := m.TypeFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ListClosedWorkflowExecutionsRequest_StatusFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListClosedWorkflowExecutionsRequest_StatusFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StatusFilter != nil {
		{
			size, err := m.StatusFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ListClosedWorkflowExecutionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClosedWorkflowExecutionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListClosedWorkflowExecutionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executions) > 0 {
		for iNdEx := len(m.Executions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListWorkflowExecutionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkflowExecutionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkflowExecutionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x22
	}
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListWorkflowExecutionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkflowExecutionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkflowExecutionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executions) > 0 {
		for iNdEx := len(m.Executions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListArchivedWorkflowExecutionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListArchivedWorkflowExecutionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListArchivedWorkflowExecutionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x22
	}
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListArchivedWorkflowExecutionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListArchivedWorkflowExecutionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListArchivedWorkflowExecutionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executions) > 0 {
		for iNdEx := len(m.Executions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ScanWorkflowExecutionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanWorkflowExecutionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScanWorkflowExecutionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x22
	}
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScanWorkflowExecutionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanWorkflowExecutionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScanWorkflowExecutionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executions) > 0 {
		for iNdEx := len(m.Executions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CountWorkflowExecutionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountWorkflowExecutionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountWorkflowExecutionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CountWorkflowExecutionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountWorkflowExecutionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountWorkflowExecutionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSearchAttributesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSearchAttributesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSearchAttributesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetSearchAttributesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSearchAttributesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSearchAttributesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for k := range m.Keys {
			v := m.Keys[k]
			baseI := i
			i = encodeVarintRequestResponse(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRequestResponse(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RespondQueryTaskCompletedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondQueryTaskCompletedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondQueryTaskCompletedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkerVersionInfo != nil {
		{
			size, err := m.WorkerVersionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.QueryResult) > 0 {
		i -= len(m.QueryResult)
		copy(dAtA[i:], m.QueryResult)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.QueryResult)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CompletedType != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.CompletedType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondQueryTaskCompletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondQueryTaskCompletedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondQueryTaskCompletedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResetStickyTaskListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetStickyTaskListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetStickyTaskListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResetStickyTaskListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetStickyTaskListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetStickyTaskListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryWorkflowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkflowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkflowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryConsistencyLevel != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.QueryConsistencyLevel))
		i--
		dAtA[i] = 0x28
	}
	if m.QueryRejectCondition != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.QueryRejectCondition))
		i--
		dAtA[i] = 0x20
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkflowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkflowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkflowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryRejected != nil {
		{
			size, err := m.QueryRejected.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.QueryResult) > 0 {
		i -= len(m.QueryResult)
		copy(dAtA[i:], m.QueryResult)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.QueryResult)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkflowExecutionRawHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkflowExecutionRawHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkflowExecutionRawHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MaximumPageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.MaximumPageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkflowExecutionRawHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkflowExecutionRawHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkflowExecutionRawHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextPageToken != nil {
		{
			size, err := m.NextPageToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RawHistory) > 0 {
		for iNdEx := len(m.RawHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RawHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DescribeWorkflowExecutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescribeWorkflowExecutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescribeWorkflowExecutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DescribeWorkflowExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescribeWorkflowExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescribeWorkflowExecutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingChildren) > 0 {
		for iNdEx := len(m.PendingChildren) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingChildren[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PendingActivities) > 0 {
		for iNdEx := len(m.PendingActivities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingActivities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.WorkflowExecutionInfo != nil {
		{
			size, err := m.WorkflowExecutionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ExecutionConfiguration != nil {
		{
			size, err := m.ExecutionConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DescribeTaskListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescribeTaskListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescribeTaskListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeTaskListStatus {
		i--
		if m.IncludeTaskListStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.TaskListType != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.TaskListType))
		i--
		dAtA[i] = 0x18
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DescribeTaskListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescribeTaskListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescribeTaskListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskListStatus != nil {
		{
			size, err := m.TaskListStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pollers) > 0 {
		for iNdEx := len(m.Pollers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pollers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetClusterInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetClusterInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetClusterInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetClusterInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SupportedClientVersions != nil {
		{
			size, err := m.SupportedClientVersions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTaskListPartitionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTaskListPartitionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTaskListPartitionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTaskListPartitionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTaskListPartitionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTaskListPartitionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DecisionTaskListPartitions) > 0 {
		for iNdEx := len(m.DecisionTaskListPartitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DecisionTaskListPartitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ActivityTaskListPartitions) > 0 {
		for iNdEx := len(m.ActivityTaskListPartitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActivityTaskListPartitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequestResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequestResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.OwnerEmail)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowExecutionRetentionPeriodInDays != 0 {
		n += 1 + sovRequestResponse(uint64(m.WorkflowExecutionRetentionPeriodInDays))
	}
	if m.EmitMetric {
		n += 2
	}
	if len(m.Clusters) > 0 {
		for _, e := range m.Clusters {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	l = len(m.ActiveClusterName)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRequestResponse(uint64(len(k))) + 1 + len(v) + sovRequestResponse(uint64(len(v)))
			n += mapEntrySize + 1 + sovRequestResponse(uint64(mapEntrySize))
		}
	}
	l = len(m.SecurityToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.IsGlobalDomain {
		n += 2
	}
	if m.HistoryArchivalStatus != 0 {
		n += 1 + sovRequestResponse(uint64(m.HistoryArchivalStatus))
	}
	l = len(m.HistoryArchivalURI)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.VisibilityArchivalStatus != 0 {
		n += 1 + sovRequestResponse(uint64(m.VisibilityArchivalStatus))
	}
	l = len(m.VisibilityArchivalURI)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RegisterDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListDomainsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.PageSize))
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListDomainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, e := range m.Domains {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *DescribeDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *DescribeDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainInfo != nil {
		l = m.DomainInfo.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ReplicationConfiguration != nil {
		l = m.ReplicationConfiguration.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.FailoverVersion != 0 {
		n += 1 + sovRequestResponse(uint64(m.FailoverVersion))
	}
	if m.IsGlobalDomain {
		n += 2
	}
	return n
}

func (m *UpdateDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.UpdatedInfo != nil {
		l = m.UpdatedInfo.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ReplicationConfiguration != nil {
		l = m.ReplicationConfiguration.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.SecurityToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.DeleteBadBinary)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *UpdateDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainInfo != nil {
		l = m.DomainInfo.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ReplicationConfiguration != nil {
		l = m.ReplicationConfiguration.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.FailoverVersion != 0 {
		n += 1 + sovRequestResponse(uint64(m.FailoverVersion))
	}
	if m.IsGlobalDomain {
		n += 2
	}
	return n
}

func (m *DeprecateDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.SecurityToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *DeprecateDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StartWorkflowExecutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ExecutionStartToCloseTimeoutSeconds != 0 {
		n += 1 + sovRequestResponse(uint64(m.ExecutionStartToCloseTimeoutSeconds))
	}
	if m.TaskStartToCloseTimeoutSeconds != 0 {
		n += 1 + sovRequestResponse(uint64(m.TaskStartToCloseTimeoutSeconds))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowIdReusePolicy != 0 {
		n += 1 + sovRequestResponse(uint64(m.WorkflowIdReusePolicy))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.CronSchedule)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *StartWorkflowExecutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetWorkflowExecutionHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.MaximumPageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.MaximumPageSize))
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WaitForNewEvent {
		n += 2
	}
	if m.HistoryEventFilterType != 0 {
		n += 1 + sovRequestResponse(uint64(m.HistoryEventFilterType))
	}
	return n
}

func (m *GetWorkflowExecutionHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.History != nil {
		l = m.History.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Archived {
		n += 2
	}
	return n
}

func (m *PollForDecisionTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *PollForDecisionTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.PreviousStartedEventId != 0 {
		n += 1 + sovRequestResponse(uint64(m.PreviousStartedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovRequestResponse(uint64(m.StartedEventId))
	}
	if m.Attempt != 0 {
		n += 1 + sovRequestResponse(uint64(m.Attempt))
	}
	if m.BacklogCountHint != 0 {
		n += 1 + sovRequestResponse(uint64(m.BacklogCountHint))
	}
	if m.History != nil {
		l = m.History.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowExecutionTaskList != nil {
		l = m.WorkflowExecutionTaskList.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ScheduledTimestamp != 0 {
		n += 1 + sovRequestResponse(uint64(m.ScheduledTimestamp))
	}
	if m.StartedTimestamp != 0 {
		n += 1 + sovRequestResponse(uint64(m.StartedTimestamp))
	}
	if len(m.Queries) > 0 {
		for k, v := range m.Queries {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRequestResponse(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRequestResponse(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRequestResponse(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RespondDecisionTaskCompletedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if len(m.Decisions) > 0 {
		for _, e := range m.Decisions {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	l = len(m.ExecutionContext)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.StickyAttributes != nil {
		l = m.StickyAttributes.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ReturnNewDecisionTask {
		n += 2
	}
	if m.ForceCreateNewDecisionTask {
		n += 2
	}
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if len(m.QueryResults) > 0 {
		for k, v := range m.QueryResults {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRequestResponse(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRequestResponse(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRequestResponse(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RespondDecisionTaskCompletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecisionTask != nil {
		l = m.DecisionTask.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RespondDecisionTaskFailedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Cause != 0 {
		n += 1 + sovRequestResponse(uint64(m.Cause))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RespondDecisionTaskFailedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PollForActivityTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskListMetadata != nil {
		l = m.TaskListMetadata.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *PollForActivityTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ScheduledTimestamp != 0 {
		n += 1 + sovRequestResponse(uint64(m.ScheduledTimestamp))
	}
	if m.ScheduleToCloseTimeoutSeconds != 0 {
		n += 1 + sovRequestResponse(uint64(m.ScheduleToCloseTimeoutSeconds))
	}
	if m.StartedTimestamp != 0 {
		n += 1 + sovRequestResponse(uint64(m.StartedTimestamp))
	}
	if m.StartToCloseTimeoutSeconds != 0 {
		n += 1 + sovRequestResponse(uint64(m.StartToCloseTimeoutSeconds))
	}
	if m.HeartbeatTimeoutSeconds != 0 {
		n += 1 + sovRequestResponse(uint64(m.HeartbeatTimeoutSeconds))
	}
	if m.Attempt != 0 {
		n += 1 + sovRequestResponse(uint64(m.Attempt))
	}
	if m.ScheduledTimestampOfThisAttempt != 0 {
		n += 1 + sovRequestResponse(uint64(m.ScheduledTimestampOfThisAttempt))
	}
	l = len(m.HeartbeatDetails)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.WorkflowDomain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 2 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RecordActivityTaskHeartbeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RecordActivityTaskHeartbeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelRequested {
		n += 2
	}
	return n
}

func (m *RecordActivityTaskHeartbeatByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.WorkflowID)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RunID)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ActivityID)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RecordActivityTaskHeartbeatByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelRequested {
		n += 2
	}
	return n
}

func (m *RespondActivityTaskCompletedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RespondActivityTaskCompletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RespondActivityTaskCompletedByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.WorkflowID)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RunID)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ActivityID)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RespondActivityTaskCompletedByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RespondActivityTaskFailedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RespondActivityTaskFailedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RespondActivityTaskFailedByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.WorkflowID)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RunID)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ActivityID)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RespondActivityTaskFailedByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RespondActivityTaskCanceledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RespondActivityTaskCanceledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RespondActivityTaskCanceledByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.WorkflowID)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RunID)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ActivityID)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RespondActivityTaskCanceledByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestCancelWorkflowExecutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RequestCancelWorkflowExecutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SignalWorkflowExecutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.SignalName)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *SignalWorkflowExecutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SignalWithStartWorkflowExecutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ExecutionStartToCloseTimeoutSeconds != 0 {
		n += 1 + sovRequestResponse(uint64(m.ExecutionStartToCloseTimeoutSeconds))
	}
	if m.TaskStartToCloseTimeoutSeconds != 0 {
		n += 1 + sovRequestResponse(uint64(m.TaskStartToCloseTimeoutSeconds))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowIdReusePolicy != 0 {
		n += 1 + sovRequestResponse(uint64(m.WorkflowIdReusePolicy))
	}
	l = len(m.SignalName)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.SignalInput)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.CronSchedule)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 2 + l + sovRequestResponse(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 2 + l + sovRequestResponse(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 2 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *SignalWithStartWorkflowExecutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ResetWorkflowExecutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.DecisionFinishEventId != 0 {
		n += 1 + sovRequestResponse(uint64(m.DecisionFinishEventId))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ResetWorkflowExecutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *TerminateWorkflowExecutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *TerminateWorkflowExecutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListOpenWorkflowExecutionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.MaximumPageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.MaximumPageSize))
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.StartTimeFilter != nil {
		l = m.StartTimeFilter.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Filters != nil {
		n += m.Filters.Size()
	}
	return n
}

func (m *ListOpenWorkflowExecutionsRequest_ExecutionFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutionFilter != nil {
		l = m.ExecutionFilter.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}
func (m *ListOpenWorkflowExecutionsRequest_TypeFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeFilter != nil {
		l = m.TypeFilter.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}
func (m *ListOpenWorkflowExecutionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Executions) > 0 {
		for _, e := range m.Executions {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListClosedWorkflowExecutionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.MaximumPageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.MaximumPageSize))
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.StartTimeFilter != nil {
		l = m.StartTimeFilter.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Filters != nil {
		n += m.Filters.Size()
	}
	return n
}

func (m *ListClosedWorkflowExecutionsRequest_ExecutionFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutionFilter != nil {
		l = m.ExecutionFilter.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}
func (m *ListClosedWorkflowExecutionsRequest_TypeFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeFilter != nil {
		l = m.TypeFilter.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}
func (m *ListClosedWorkflowExecutionsRequest_StatusFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusFilter != nil {
		l = m.StatusFilter.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}
func (m *ListClosedWorkflowExecutionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Executions) > 0 {
		for _, e := range m.Executions {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListWorkflowExecutionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.PageSize))
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListWorkflowExecutionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Executions) > 0 {
		for _, e := range m.Executions {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListArchivedWorkflowExecutionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.PageSize))
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListArchivedWorkflowExecutionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Executions) > 0 {
		for _, e := range m.Executions {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ScanWorkflowExecutionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.PageSize))
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ScanWorkflowExecutionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Executions) > 0 {
		for _, e := range m.Executions {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *CountWorkflowExecutionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *CountWorkflowExecutionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovRequestResponse(uint64(m.Count))
	}
	return n
}

func (m *GetSearchAttributesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetSearchAttributesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for k, v := range m.Keys {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRequestResponse(uint64(len(k))) + 1 + sovRequestResponse(uint64(v))
			n += mapEntrySize + 1 + sovRequestResponse(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RespondQueryTaskCompletedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.CompletedType != 0 {
		n += 1 + sovRequestResponse(uint64(m.CompletedType))
	}
	l = len(m.QueryResult)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkerVersionInfo != nil {
		l = m.WorkerVersionInfo.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RespondQueryTaskCompletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResetStickyTaskListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ResetStickyTaskListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryWorkflowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.QueryRejectCondition != 0 {
		n += 1 + sovRequestResponse(uint64(m.QueryRejectCondition))
	}
	if m.QueryConsistencyLevel != 0 {
		n += 1 + sovRequestResponse(uint64(m.QueryConsistencyLevel))
	}
	return n
}

func (m *QueryWorkflowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryResult)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.QueryRejected != nil {
		l = m.QueryRejected.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetWorkflowExecutionRawHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.MaximumPageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.MaximumPageSize))
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetWorkflowExecutionRawHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RawHistory) > 0 {
		for _, e := range m.RawHistory {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if m.NextPageToken != nil {
		l = m.NextPageToken.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *DescribeWorkflowExecutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *DescribeWorkflowExecutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutionConfiguration != nil {
		l = m.ExecutionConfiguration.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowExecutionInfo != nil {
		l = m.WorkflowExecutionInfo.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if len(m.PendingActivities) > 0 {
		for _, e := range m.PendingActivities {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if len(m.PendingChildren) > 0 {
		for _, e := range m.PendingChildren {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	return n
}

func (m *DescribeTaskListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskListType != 0 {
		n += 1 + sovRequestResponse(uint64(m.TaskListType))
	}
	if m.IncludeTaskListStatus {
		n += 2
	}
	return n
}

func (m *DescribeTaskListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pollers) > 0 {
		for _, e := range m.Pollers {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if m.TaskListStatus != nil {
		l = m.TaskListStatus.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetClusterInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetClusterInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SupportedClientVersions != nil {
		l = m.SupportedClientVersions.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListTaskListPartitionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListTaskListPartitionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActivityTaskListPartitions) > 0 {
		for _, e := range m.ActivityTaskListPartitions {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if len(m.DecisionTaskListPartitions) > 0 {
		for _, e := range m.DecisionTaskListPartitions {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	return n
}

func sovRequestResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequestResponse(x uint64) (n int) {
	return sovRequestResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RegisterDomainRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForClusters := "[]*ClusterReplicationConfiguration{"
	for _, f := range this.Clusters {
		repeatedStringForClusters += strings.Replace(fmt.Sprintf("%v", f), "ClusterReplicationConfiguration", "common.ClusterReplicationConfiguration", 1) + ","
	}
	repeatedStringForClusters += "}"
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	s := strings.Join([]string{`&RegisterDomainRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`OwnerEmail:` + fmt.Sprintf("%v", this.OwnerEmail) + `,`,
		`WorkflowExecutionRetentionPeriodInDays:` + fmt.Sprintf("%v", this.WorkflowExecutionRetentionPeriodInDays) + `,`,
		`EmitMetric:` + fmt.Sprintf("%v", this.EmitMetric) + `,`,
		`Clusters:` + repeatedStringForClusters + `,`,
		`ActiveClusterName:` + fmt.Sprintf("%v", this.ActiveClusterName) + `,`,
		`Data:` + mapStringForData + `,`,
		`SecurityToken:` + fmt.Sprintf("%v", this.SecurityToken) + `,`,
		`IsGlobalDomain:` + fmt.Sprintf("%v", this.IsGlobalDomain) + `,`,
		`HistoryArchivalStatus:` + fmt.Sprintf("%v", this.HistoryArchivalStatus) + `,`,
		`HistoryArchivalURI:` + fmt.Sprintf("%v", this.HistoryArchivalURI) + `,`,
		`VisibilityArchivalStatus:` + fmt.Sprintf("%v", this.VisibilityArchivalStatus) + `,`,
		`VisibilityArchivalURI:` + fmt.Sprintf("%v", this.VisibilityArchivalURI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterDomainResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterDomainResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ListDomainsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListDomainsRequest{`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDomainsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDomains := "[]*DescribeDomainResponse{"
	for _, f := range this.Domains {
		repeatedStringForDomains += strings.Replace(f.String(), "DescribeDomainResponse", "DescribeDomainResponse", 1) + ","
	}
	repeatedStringForDomains += "}"
	s := strings.Join([]string{`&ListDomainsResponse{`,
		`Domains:` + repeatedStringForDomains + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DescribeDomainRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DescribeDomainRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DescribeDomainResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DescribeDomainResponse{`,
		`DomainInfo:` + strings.Replace(fmt.Sprintf("%v", this.DomainInfo), "DomainInfo", "common.DomainInfo", 1) + `,`,
		`Configuration:` + strings.Replace(fmt.Sprintf("%v", this.Configuration), "DomainConfiguration", "common.DomainConfiguration", 1) + `,`,
		`ReplicationConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ReplicationConfiguration), "DomainReplicationConfiguration", "common.DomainReplicationConfiguration", 1) + `,`,
		`FailoverVersion:` + fmt.Sprintf("%v", this.FailoverVersion) + `,`,
		`IsGlobalDomain:` + fmt.Sprintf("%v", this.IsGlobalDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateDomainRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateDomainRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`UpdatedInfo:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedInfo), "UpdateDomainInfo", "common.UpdateDomainInfo", 1) + `,`,
		`Configuration:` + strings.Replace(fmt.Sprintf("%v", this.Configuration), "DomainConfiguration", "common.DomainConfiguration", 1) + `,`,
		`ReplicationConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ReplicationConfiguration), "DomainReplicationConfiguration", "common.DomainReplicationConfiguration", 1) + `,`,
		`SecurityToken:` + fmt.Sprintf("%v", this.SecurityToken) + `,`,
		`DeleteBadBinary:` + fmt.Sprintf("%v", this.DeleteBadBinary) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateDomainResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateDomainResponse{`,
		`DomainInfo:` + strings.Replace(fmt.Sprintf("%v", this.DomainInfo), "DomainInfo", "common.DomainInfo", 1) + `,`,
		`Configuration:` + strings.Replace(fmt.Sprintf("%v", this.Configuration), "DomainConfiguration", "common.DomainConfiguration", 1) + `,`,
		`ReplicationConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ReplicationConfiguration), "DomainReplicationConfiguration", "common.DomainReplicationConfiguration", 1) + `,`,
		`FailoverVersion:` + fmt.Sprintf("%v", this.FailoverVersion) + `,`,
		`IsGlobalDomain:` + fmt.Sprintf("%v", this.IsGlobalDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeprecateDomainRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeprecateDomainRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`SecurityToken:` + fmt.Sprintf("%v", this.SecurityToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeprecateDomainResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeprecateDomainResponse{`,
		`}`,
	}, "")
	return s
}
func (this *StartWorkflowExecutionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartWorkflowExecutionRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "common.WorkflowType", 1) + `,`,
		`TaskList:` + strings.Replace(fmt.Sprintf("%v", this.TaskList), "TaskList", "common.TaskList", 1) + `,`,
		`Input:` + fmt.Sprintf("%v", this.Input) + `,`,
		`ExecutionStartToCloseTimeoutSeconds:` + fmt.Sprintf("%v", this.ExecutionStartToCloseTimeoutSeconds) + `,`,
		`TaskStartToCloseTimeoutSeconds:` + fmt.Sprintf("%v", this.TaskStartToCloseTimeoutSeconds) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`WorkflowIdReusePolicy:` + fmt.Sprintf("%v", this.WorkflowIdReusePolicy) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicy", "common.RetryPolicy", 1) + `,`,
		`CronSchedule:` + fmt.Sprintf("%v", this.CronSchedule) + `,`,
		`Memo:` + strings.Replace(fmt.Sprintf("%v", this.Memo), "Memo", "common.Memo", 1) + `,`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "common.SearchAttributes", 1) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "common.Header", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartWorkflowExecutionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartWorkflowExecutionResponse{`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetWorkflowExecutionHistoryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetWorkflowExecutionHistoryRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "WorkflowExecution", "common.WorkflowExecution", 1) + `,`,
		`MaximumPageSize:` + fmt.Sprintf("%v", this.MaximumPageSize) + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`WaitForNewEvent:` + fmt.Sprintf("%v", this.WaitForNewEvent) + `,`,
		`HistoryEventFilterType:` + fmt.Sprintf("%v", this.HistoryEventFilterType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetWorkflowExecutionHistoryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetWorkflowExecutionHistoryResponse{`,
		`History:` + strings.Replace(fmt.Sprintf("%v", this.History), "History", "common.History", 1) + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`Archived:` + fmt.Sprintf("%v", this.Archived) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollForDecisionTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollForDecisionTaskRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`TaskList:` + strings.Replace(fmt.Sprintf("%v", this.TaskList), "TaskList", "common.TaskList", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`BinaryChecksum:` + fmt.Sprintf("%v", this.BinaryChecksum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollForDecisionTaskResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForQueries := make([]string, 0, len(this.Queries))
	for k, _ := range this.Queries {
		keysForQueries = append(keysForQueries, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQueries)
	mapStringForQueries := "map[string]*common.WorkflowQuery{"
	for _, k := range keysForQueries {
		mapStringForQueries += fmt.Sprintf("%v: %v,", k, this.Queries[k])
	}
	mapStringForQueries += "}"
	s := strings.Join([]string{`&PollForDecisionTaskResponse{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "common.WorkflowExecution", 1) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "common.WorkflowType", 1) + `,`,
		`PreviousStartedEventId:` + fmt.Sprintf("%v", this.PreviousStartedEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`BacklogCountHint:` + fmt.Sprintf("%v", this.BacklogCountHint) + `,`,
		`History:` + strings.Replace(fmt.Sprintf("%v", this.History), "History", "common.History", 1) + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "WorkflowQuery", "common.WorkflowQuery", 1) + `,`,
		`WorkflowExecutionTaskList:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionTaskList), "TaskList", "common.TaskList", 1) + `,`,
		`ScheduledTimestamp:` + fmt.Sprintf("%v", this.ScheduledTimestamp) + `,`,
		`StartedTimestamp:` + fmt.Sprintf("%v", this.StartedTimestamp) + `,`,
		`Queries:` + mapStringForQueries + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondDecisionTaskCompletedRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDecisions := "[]*Decision{"
	for _, f := range this.Decisions {
		repeatedStringForDecisions += strings.Replace(fmt.Sprintf("%v", f), "Decision", "common.Decision", 1) + ","
	}
	repeatedStringForDecisions += "}"
	keysForQueryResults := make([]string, 0, len(this.QueryResults))
	for k, _ := range this.QueryResults {
		keysForQueryResults = append(keysForQueryResults, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQueryResults)
	mapStringForQueryResults := "map[string]*common.WorkflowQueryResult{"
	for _, k := range keysForQueryResults {
		mapStringForQueryResults += fmt.Sprintf("%v: %v,", k, this.QueryResults[k])
	}
	mapStringForQueryResults += "}"
	s := strings.Join([]string{`&RespondDecisionTaskCompletedRequest{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`Decisions:` + repeatedStringForDecisions + `,`,
		`ExecutionContext:` + fmt.Sprintf("%v", this.ExecutionContext) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`StickyAttributes:` + strings.Replace(fmt.Sprintf("%v", this.StickyAttributes), "StickyExecutionAttributes", "common.StickyExecutionAttributes", 1) + `,`,
		`ReturnNewDecisionTask:` + fmt.Sprintf("%v", this.ReturnNewDecisionTask) + `,`,
		`ForceCreateNewDecisionTask:` + fmt.Sprintf("%v", this.ForceCreateNewDecisionTask) + `,`,
		`BinaryChecksum:` + fmt.Sprintf("%v", this.BinaryChecksum) + `,`,
		`QueryResults:` + mapStringForQueryResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondDecisionTaskCompletedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondDecisionTaskCompletedResponse{`,
		`DecisionTask:` + strings.Replace(this.DecisionTask.String(), "PollForDecisionTaskResponse", "PollForDecisionTaskResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondDecisionTaskFailedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondDecisionTaskFailedRequest{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`BinaryChecksum:` + fmt.Sprintf("%v", this.BinaryChecksum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondDecisionTaskFailedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondDecisionTaskFailedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *PollForActivityTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollForActivityTaskRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`TaskList:` + strings.Replace(fmt.Sprintf("%v", this.TaskList), "TaskList", "common.TaskList", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`TaskListMetadata:` + strings.Replace(fmt.Sprintf("%v", this.TaskListMetadata), "TaskListMetadata", "common.TaskListMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollForActivityTaskResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollForActivityTaskResponse{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "common.WorkflowExecution", 1) + `,`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`ActivityType:` + strings.Replace(fmt.Sprintf("%v", this.ActivityType), "ActivityType", "common.ActivityType", 1) + `,`,
		`Input:` + fmt.Sprintf("%v", this.Input) + `,`,
		`ScheduledTimestamp:` + fmt.Sprintf("%v", this.ScheduledTimestamp) + `,`,
		`ScheduleToCloseTimeoutSeconds:` + fmt.Sprintf("%v", this.ScheduleToCloseTimeoutSeconds) + `,`,
		`StartedTimestamp:` + fmt.Sprintf("%v", this.StartedTimestamp) + `,`,
		`StartToCloseTimeoutSeconds:` + fmt.Sprintf("%v", this.StartToCloseTimeoutSeconds) + `,`,
		`HeartbeatTimeoutSeconds:` + fmt.Sprintf("%v", this.HeartbeatTimeoutSeconds) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`ScheduledTimestampOfThisAttempt:` + fmt.Sprintf("%v", this.ScheduledTimestampOfThisAttempt) + `,`,
		`HeartbeatDetails:` + fmt.Sprintf("%v", this.HeartbeatDetails) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "common.WorkflowType", 1) + `,`,
		`WorkflowDomain:` + fmt.Sprintf("%v", this.WorkflowDomain) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "common.Header", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordActivityTaskHeartbeatRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordActivityTaskHeartbeatRequest{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordActivityTaskHeartbeatResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordActivityTaskHeartbeatResponse{`,
		`CancelRequested:` + fmt.Sprintf("%v", this.CancelRequested) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordActivityTaskHeartbeatByIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordActivityTaskHeartbeatByIDRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowID:` + fmt.Sprintf("%v", this.WorkflowID) + `,`,
		`RunID:` + fmt.Sprintf("%v", this.RunID) + `,`,
		`ActivityID:` + fmt.Sprintf("%v", this.ActivityID) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordActivityTaskHeartbeatByIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordActivityTaskHeartbeatByIDResponse{`,
		`CancelRequested:` + fmt.Sprintf("%v", this.CancelRequested) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCompletedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCompletedRequest{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCompletedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCompletedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCompletedByIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCompletedByIDRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowID:` + fmt.Sprintf("%v", this.WorkflowID) + `,`,
		`RunID:` + fmt.Sprintf("%v", this.RunID) + `,`,
		`ActivityID:` + fmt.Sprintf("%v", this.ActivityID) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCompletedByIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCompletedByIDResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskFailedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskFailedRequest{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskFailedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskFailedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskFailedByIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskFailedByIDRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowID:` + fmt.Sprintf("%v", this.WorkflowID) + `,`,
		`RunID:` + fmt.Sprintf("%v", this.RunID) + `,`,
		`ActivityID:` + fmt.Sprintf("%v", this.ActivityID) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskFailedByIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskFailedByIDResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCanceledRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCanceledRequest{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCanceledResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCanceledResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCanceledByIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCanceledByIDRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowID:` + fmt.Sprintf("%v", this.WorkflowID) + `,`,
		`RunID:` + fmt.Sprintf("%v", this.RunID) + `,`,
		`ActivityID:` + fmt.Sprintf("%v", this.ActivityID) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCanceledByIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCanceledByIDResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelWorkflowExecutionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelWorkflowExecutionRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "common.WorkflowExecution", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelWorkflowExecutionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelWorkflowExecutionResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SignalWorkflowExecutionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignalWorkflowExecutionRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "common.WorkflowExecution", 1) + `,`,
		`SignalName:` + fmt.Sprintf("%v", this.SignalName) + `,`,
		`Input:` + fmt.Sprintf("%v", this.Input) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignalWorkflowExecutionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignalWorkflowExecutionResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SignalWithStartWorkflowExecutionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignalWithStartWorkflowExecutionRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "common.WorkflowType", 1) + `,`,
		`TaskList:` + strings.Replace(fmt.Sprintf("%v", this.TaskList), "TaskList", "common.TaskList", 1) + `,`,
		`Input:` + fmt.Sprintf("%v", this.Input) + `,`,
		`ExecutionStartToCloseTimeoutSeconds:` + fmt.Sprintf("%v", this.ExecutionStartToCloseTimeoutSeconds) + `,`,
		`TaskStartToCloseTimeoutSeconds:` + fmt.Sprintf("%v", this.TaskStartToCloseTimeoutSeconds) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`WorkflowIdReusePolicy:` + fmt.Sprintf("%v", this.WorkflowIdReusePolicy) + `,`,
		`SignalName:` + fmt.Sprintf("%v", this.SignalName) + `,`,
		`SignalInput:` + fmt.Sprintf("%v", this.SignalInput) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicy", "common.RetryPolicy", 1) + `,`,
		`CronSchedule:` + fmt.Sprintf("%v", this.CronSchedule) + `,`,
		`Memo:` + strings.Replace(fmt.Sprintf("%v", this.Memo), "Memo", "common.Memo", 1) + `,`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "common.SearchAttributes", 1) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "common.Header", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignalWithStartWorkflowExecutionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignalWithStartWorkflowExecutionResponse{`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetWorkflowExecutionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetWorkflowExecutionRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "common.WorkflowExecution", 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`DecisionFinishEventId:` + fmt.Sprintf("%v", this.DecisionFinishEventId) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetWorkflowExecutionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetWorkflowExecutionResponse{`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TerminateWorkflowExecutionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TerminateWorkflowExecutionRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "common.WorkflowExecution", 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TerminateWorkflowExecutionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TerminateWorkflowExecutionResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ListOpenWorkflowExecutionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListOpenWorkflowExecutionsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`MaximumPageSize:` + fmt.Sprintf("%v", this.MaximumPageSize) + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`StartTimeFilter:` + strings.Replace(fmt.Sprintf("%v", this.StartTimeFilter), "StartTimeFilter", "common.StartTimeFilter", 1) + `,`,
		`Filters:` + fmt.Sprintf("%v", this.Filters) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListOpenWorkflowExecutionsRequest_ExecutionFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListOpenWorkflowExecutionsRequest_ExecutionFilter{`,
		`ExecutionFilter:` + strings.Replace(fmt.Sprintf("%v", this.ExecutionFilter), "WorkflowExecutionFilter", "common.WorkflowExecutionFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListOpenWorkflowExecutionsRequest_TypeFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListOpenWorkflowExecutionsRequest_TypeFilter{`,
		`TypeFilter:` + strings.Replace(fmt.Sprintf("%v", this.TypeFilter), "WorkflowTypeFilter", "common.WorkflowTypeFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListOpenWorkflowExecutionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecutions := "[]*WorkflowExecutionInfo{"
	for _, f := range this.Executions {
		repeatedStringForExecutions += strings.Replace(fmt.Sprintf("%v", f), "WorkflowExecutionInfo", "common.WorkflowExecutionInfo", 1) + ","
	}
	repeatedStringForExecutions += "}"
	s := strings.Join([]string{`&ListOpenWorkflowExecutionsResponse{`,
		`Executions:` + repeatedStringForExecutions + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClosedWorkflowExecutionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClosedWorkflowExecutionsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`MaximumPageSize:` + fmt.Sprintf("%v", this.MaximumPageSize) + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`StartTimeFilter:` + strings.Replace(fmt.Sprintf("%v", this.StartTimeFilter), "StartTimeFilter", "common.StartTimeFilter", 1) + `,`,
		`Filters:` + fmt.Sprintf("%v", this.Filters) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClosedWorkflowExecutionsRequest_ExecutionFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClosedWorkflowExecutionsRequest_ExecutionFilter{`,
		`ExecutionFilter:` + strings.Replace(fmt.Sprintf("%v", this.ExecutionFilter), "WorkflowExecutionFilter", "common.WorkflowExecutionFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClosedWorkflowExecutionsRequest_TypeFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClosedWorkflowExecutionsRequest_TypeFilter{`,
		`TypeFilter:` + strings.Replace(fmt.Sprintf("%v", this.TypeFilter), "WorkflowTypeFilter", "common.WorkflowTypeFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClosedWorkflowExecutionsRequest_StatusFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClosedWorkflowExecutionsRequest_StatusFilter{`,
		`StatusFilter:` + strings.Replace(fmt.Sprintf("%v", this.StatusFilter), "StatusFilter", "common.StatusFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClosedWorkflowExecutionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecutions := "[]*WorkflowExecutionInfo{"
	for _, f := range this.Executions {
		repeatedStringForExecutions += strings.Replace(fmt.Sprintf("%v", f), "WorkflowExecutionInfo", "common.WorkflowExecutionInfo", 1) + ","
	}
	repeatedStringForExecutions += "}"
	s := strings.Join([]string{`&ListClosedWorkflowExecutionsResponse{`,
		`Executions:` + repeatedStringForExecutions + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListWorkflowExecutionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListWorkflowExecutionsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListWorkflowExecutionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecutions := "[]*WorkflowExecutionInfo{"
	for _, f := range this.Executions {
		repeatedStringForExecutions += strings.Replace(fmt.Sprintf("%v", f), "WorkflowExecutionInfo", "common.WorkflowExecutionInfo", 1) + ","
	}
	repeatedStringForExecutions += "}"
	s := strings.Join([]string{`&ListWorkflowExecutionsResponse{`,
		`Executions:` + repeatedStringForExecutions + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListArchivedWorkflowExecutionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListArchivedWorkflowExecutionsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListArchivedWorkflowExecutionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecutions := "[]*WorkflowExecutionInfo{"
	for _, f := range this.Executions {
		repeatedStringForExecutions += strings.Replace(fmt.Sprintf("%v", f), "WorkflowExecutionInfo", "common.WorkflowExecutionInfo", 1) + ","
	}
	repeatedStringForExecutions += "}"
	s := strings.Join([]string{`&ListArchivedWorkflowExecutionsResponse{`,
		`Executions:` + repeatedStringForExecutions + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScanWorkflowExecutionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScanWorkflowExecutionsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScanWorkflowExecutionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecutions := "[]*WorkflowExecutionInfo{"
	for _, f := range this.Executions {
		repeatedStringForExecutions += strings.Replace(fmt.Sprintf("%v", f), "WorkflowExecutionInfo", "common.WorkflowExecutionInfo", 1) + ","
	}
	repeatedStringForExecutions += "}"
	s := strings.Join([]string{`&ScanWorkflowExecutionsResponse{`,
		`Executions:` + repeatedStringForExecutions + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CountWorkflowExecutionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CountWorkflowExecutionsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CountWorkflowExecutionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CountWorkflowExecutionsResponse{`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSearchAttributesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSearchAttributesRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetSearchAttributesResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForKeys := make([]string, 0, len(this.Keys))
	for k, _ := range this.Keys {
		keysForKeys = append(keysForKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForKeys)
	mapStringForKeys := "map[string]enums.IndexedValueType{"
	for _, k := range keysForKeys {
		mapStringForKeys += fmt.Sprintf("%v: %v,", k, this.Keys[k])
	}
	mapStringForKeys += "}"
	s := strings.Join([]string{`&GetSearchAttributesResponse{`,
		`Keys:` + mapStringForKeys + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondQueryTaskCompletedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondQueryTaskCompletedRequest{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`CompletedType:` + fmt.Sprintf("%v", this.CompletedType) + `,`,
		`QueryResult:` + fmt.Sprintf("%v", this.QueryResult) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`WorkerVersionInfo:` + strings.Replace(fmt.Sprintf("%v", this.WorkerVersionInfo), "WorkerVersionInfo", "common.WorkerVersionInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondQueryTaskCompletedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondQueryTaskCompletedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ResetStickyTaskListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetStickyTaskListRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "WorkflowExecution", "common.WorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetStickyTaskListResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetStickyTaskListResponse{`,
		`}`,
	}, "")
	return s
}
func (this *QueryWorkflowRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryWorkflowRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "WorkflowExecution", "common.WorkflowExecution", 1) + `,`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "WorkflowQuery", "common.WorkflowQuery", 1) + `,`,
		`QueryRejectCondition:` + fmt.Sprintf("%v", this.QueryRejectCondition) + `,`,
		`QueryConsistencyLevel:` + fmt.Sprintf("%v", this.QueryConsistencyLevel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryWorkflowResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryWorkflowResponse{`,
		`QueryResult:` + fmt.Sprintf("%v", this.QueryResult) + `,`,
		`QueryRejected:` + strings.Replace(fmt.Sprintf("%v", this.QueryRejected), "QueryRejected", "common.QueryRejected", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetWorkflowExecutionRawHistoryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetWorkflowExecutionRawHistoryRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "WorkflowExecution", "common.WorkflowExecution", 1) + `,`,
		`MaximumPageSize:` + fmt.Sprintf("%v", this.MaximumPageSize) + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetWorkflowExecutionRawHistoryResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRawHistory := "[]*DataBlob{"
	for _, f := range this.RawHistory {
		repeatedStringForRawHistory += strings.Replace(fmt.Sprintf("%v", f), "DataBlob", "common.DataBlob", 1) + ","
	}
	repeatedStringForRawHistory += "}"
	s := strings.Join([]string{`&GetWorkflowExecutionRawHistoryResponse{`,
		`RawHistory:` + repeatedStringForRawHistory + `,`,
		`NextPageToken:` + strings.Replace(fmt.Sprintf("%v", this.NextPageToken), "HistoryContinuationToken", "token.HistoryContinuationToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DescribeWorkflowExecutionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DescribeWorkflowExecutionRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "WorkflowExecution", "common.WorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DescribeWorkflowExecutionResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPendingActivities := "[]*PendingActivityInfo{"
	for _, f := range this.PendingActivities {
		repeatedStringForPendingActivities += strings.Replace(fmt.Sprintf("%v", f), "PendingActivityInfo", "common.PendingActivityInfo", 1) + ","
	}
	repeatedStringForPendingActivities += "}"
	repeatedStringForPendingChildren := "[]*PendingChildExecutionInfo{"
	for _, f := range this.PendingChildren {
		repeatedStringForPendingChildren += strings.Replace(fmt.Sprintf("%v", f), "PendingChildExecutionInfo", "common.PendingChildExecutionInfo", 1) + ","
	}
	repeatedStringForPendingChildren += "}"
	s := strings.Join([]string{`&DescribeWorkflowExecutionResponse{`,
		`ExecutionConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ExecutionConfiguration), "WorkflowExecutionConfiguration", "common.WorkflowExecutionConfiguration", 1) + `,`,
		`WorkflowExecutionInfo:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionInfo), "WorkflowExecutionInfo", "common.WorkflowExecutionInfo", 1) + `,`,
		`PendingActivities:` + repeatedStringForPendingActivities + `,`,
		`PendingChildren:` + repeatedStringForPendingChildren + `,`,
		`}`,
	}, "")
	return s
}
func (this *DescribeTaskListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DescribeTaskListRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`TaskList:` + strings.Replace(fmt.Sprintf("%v", this.TaskList), "TaskList", "common.TaskList", 1) + `,`,
		`TaskListType:` + fmt.Sprintf("%v", this.TaskListType) + `,`,
		`IncludeTaskListStatus:` + fmt.Sprintf("%v", this.IncludeTaskListStatus) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DescribeTaskListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPollers := "[]*PollerInfo{"
	for _, f := range this.Pollers {
		repeatedStringForPollers += strings.Replace(fmt.Sprintf("%v", f), "PollerInfo", "common.PollerInfo", 1) + ","
	}
	repeatedStringForPollers += "}"
	s := strings.Join([]string{`&DescribeTaskListResponse{`,
		`Pollers:` + repeatedStringForPollers + `,`,
		`TaskListStatus:` + strings.Replace(fmt.Sprintf("%v", this.TaskListStatus), "TaskListStatus", "common.TaskListStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetClusterInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetClusterInfoRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetClusterInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetClusterInfoResponse{`,
		`SupportedClientVersions:` + strings.Replace(fmt.Sprintf("%v", this.SupportedClientVersions), "SupportedClientVersions", "common.SupportedClientVersions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTaskListPartitionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTaskListPartitionsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`TaskList:` + strings.Replace(fmt.Sprintf("%v", this.TaskList), "TaskList", "common.TaskList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTaskListPartitionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForActivityTaskListPartitions := "[]*TaskListPartitionMetadata{"
	for _, f := range this.ActivityTaskListPartitions {
		repeatedStringForActivityTaskListPartitions += strings.Replace(fmt.Sprintf("%v", f), "TaskListPartitionMetadata", "common.TaskListPartitionMetadata", 1) + ","
	}
	repeatedStringForActivityTaskListPartitions += "}"
	repeatedStringForDecisionTaskListPartitions := "[]*TaskListPartitionMetadata{"
	for _, f := range this.DecisionTaskListPartitions {
		repeatedStringForDecisionTaskListPartitions += strings.Replace(fmt.Sprintf("%v", f), "TaskListPartitionMetadata", "common.TaskListPartitionMetadata", 1) + ","
	}
	repeatedStringForDecisionTaskListPartitions += "}"
	s := strings.Join([]string{`&ListTaskListPartitionsResponse{`,
		`ActivityTaskListPartitions:` + repeatedStringForActivityTaskListPartitions + `,`,
		`DecisionTaskListPartitions:` + repeatedStringForDecisionTaskListPartitions + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRequestResponse(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RegisterDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionRetentionPeriodInDays", wireType)
			}
			m.WorkflowExecutionRetentionPeriodInDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowExecutionRetentionPeriodInDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmitMetric", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmitMetric = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, &common.ClusterReplicationConfiguration{})
			if err := m.Clusters[len(m.Clusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequestResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRequestResponse(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGlobalDomain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGlobalDomain = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryArchivalStatus", wireType)
			}
			m.HistoryArchivalStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryArchivalStatus |= enums.ArchivalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryArchivalURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryArchivalURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityArchivalStatus", wireType)
			}
			m.VisibilityArchivalStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisibilityArchivalStatus |= enums.ArchivalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityArchivalURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisibilityArchivalURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDomainsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDomainsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDomainsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDomainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDomainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDomainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, &DescribeDomainResponse{})
			if err := m.Domains[len(m.Domains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DomainInfo == nil {
				m.DomainInfo = &common.DomainInfo{}
			}
			if err := m.DomainInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &common.DomainConfiguration{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationConfiguration == nil {
				m.ReplicationConfiguration = &common.DomainReplicationConfiguration{}
			}
			if err := m.ReplicationConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverVersion", wireType)
			}
			m.FailoverVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGlobalDomain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGlobalDomain = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedInfo == nil {
				m.UpdatedInfo = &common.UpdateDomainInfo{}
			}
			if err := m.UpdatedInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &common.DomainConfiguration{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationConfiguration == nil {
				m.ReplicationConfiguration = &common.DomainReplicationConfiguration{}
			}
			if err := m.ReplicationConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteBadBinary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeleteBadBinary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DomainInfo == nil {
				m.DomainInfo = &common.DomainInfo{}
			}
			if err := m.DomainInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &common.DomainConfiguration{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationConfiguration == nil {
				m.ReplicationConfiguration = &common.DomainReplicationConfiguration{}
			}
			if err := m.ReplicationConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverVersion", wireType)
			}
			m.FailoverVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGlobalDomain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGlobalDomain = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeprecateDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeprecateDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeprecateDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeprecateDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeprecateDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeprecateDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartWorkflowExecutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartWorkflowExecutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartWorkflowExecutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &common.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionStartToCloseTimeoutSeconds", wireType)
			}
			m.ExecutionStartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionStartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStartToCloseTimeoutSeconds", wireType)
			}
			m.TaskStartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskStartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowIdReusePolicy", wireType)
			}
			m.WorkflowIdReusePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowIdReusePolicy |= enums.WorkflowIdReusePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &common.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &common.Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &common.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartWorkflowExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartWorkflowExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartWorkflowExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkflowExecutionHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkflowExecutionHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkflowExecutionHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &common.WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumPageSize", wireType)
			}
			m.MaximumPageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumPageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitForNewEvent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WaitForNewEvent = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryEventFilterType", wireType)
			}
			m.HistoryEventFilterType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryEventFilterType |= enums.HistoryEventFilterType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkflowExecutionHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkflowExecutionHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkflowExecutionHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = &common.History{}
			}
			if err := m.History.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollForDecisionTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollForDecisionTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollForDecisionTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &common.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollForDecisionTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollForDecisionTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollForDecisionTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &common.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousStartedEventId", wireType)
			}
			m.PreviousStartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousStartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BacklogCountHint", wireType)
			}
			m.BacklogCountHint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BacklogCountHint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = &common.History{}
			}
			if err := m.History.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &common.WorkflowQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecutionTaskList == nil {
				m.WorkflowExecutionTaskList = &common.TaskList{}
			}
			if err := m.WorkflowExecutionTaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTimestamp", wireType)
			}
			m.ScheduledTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTimestamp", wireType)
			}
			m.StartedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Queries == nil {
				m.Queries = make(map[string]*common.WorkflowQuery)
			}
			var mapkey string
			var mapvalue *common.WorkflowQuery
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequestResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &common.WorkflowQuery{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRequestResponse(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Queries[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondDecisionTaskCompletedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondDecisionTaskCompletedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondDecisionTaskCompletedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decisions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decisions = append(m.Decisions, &common.Decision{})
			if err := m.Decisions[len(m.Decisions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionContext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionContext = append(m.ExecutionContext[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecutionContext == nil {
				m.ExecutionContext = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickyAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickyAttributes == nil {
				m.StickyAttributes = &common.StickyExecutionAttributes{}
			}
			if err := m.StickyAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnNewDecisionTask", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnNewDecisionTask = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceCreateNewDecisionTask", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceCreateNewDecisionTask = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryResults == nil {
				m.QueryResults = make(map[string]*common.WorkflowQueryResult)
			}
			var mapkey string
			var mapvalue *common.WorkflowQueryResult
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequestResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &common.WorkflowQueryResult{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRequestResponse(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.QueryResults[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondDecisionTaskCompletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondDecisionTaskCompletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondDecisionTaskCompletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecisionTask == nil {
				m.DecisionTask = &PollForDecisionTaskResponse{}
			}
			if err := m.DecisionTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondDecisionTaskFailedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondDecisionTaskFailedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondDecisionTaskFailedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= enums.DecisionTaskFailedCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details[:0], dAtA[iNdEx:postIndex]...)
			if m.Details == nil {
				m.Details = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondDecisionTaskFailedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondDecisionTaskFailedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondDecisionTaskFailedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollForActivityTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollForActivityTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollForActivityTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &common.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskListMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskListMetadata == nil {
				m.TaskListMetadata = &common.TaskListMetadata{}
			}
			if err := m.TaskListMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollForActivityTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollForActivityTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollForActivityTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &common.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &common.ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTimestamp", wireType)
			}
			m.ScheduledTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToCloseTimeoutSeconds", wireType)
			}
			m.ScheduleToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTimestamp", wireType)
			}
			m.StartedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToCloseTimeoutSeconds", wireType)
			}
			m.StartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTimeoutSeconds", wireType)
			}
			m.HeartbeatTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTimestampOfThisAttempt", wireType)
			}
			m.ScheduledTimestampOfThisAttempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledTimestampOfThisAttempt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatDetails", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeartbeatDetails = append(m.HeartbeatDetails[:0], dAtA[iNdEx:postIndex]...)
			if m.HeartbeatDetails == nil {
				m.HeartbeatDetails = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordActivityTaskHeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details[:0], dAtA[iNdEx:postIndex]...)
			if m.Details == nil {
				m.Details = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordActivityTaskHeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRequested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelRequested = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordActivityTaskHeartbeatByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details[:0], dAtA[iNdEx:postIndex]...)
			if m.Details == nil {
				m.Details = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordActivityTaskHeartbeatByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRequested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelRequested = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCompletedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCompletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCompletedByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCompletedByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskFailedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskFailedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskFailedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details[:0], dAtA[iNdEx:postIndex]...)
			if m.Details == nil {
				m.Details = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskFailedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskFailedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskFailedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskFailedByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskFailedByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskFailedByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details[:0], dAtA[iNdEx:postIndex]...)
			if m.Details == nil {
				m.Details = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskFailedByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskFailedByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskFailedByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCanceledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details[:0], dAtA[iNdEx:postIndex]...)
			if m.Details == nil {
				m.Details = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCanceledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCanceledByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details[:0], dAtA[iNdEx:postIndex]...)
			if m.Details == nil {
				m.Details = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCanceledByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelWorkflowExecutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelWorkflowExecutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelWorkflowExecutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &common.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelWorkflowExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelWorkflowExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelWorkflowExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalWorkflowExecutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalWorkflowExecutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalWorkflowExecutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &common.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = append(m.Control[:0], dAtA[iNdEx:postIndex]...)
			if m.Control == nil {
				m.Control = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalWorkflowExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalWorkflowExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalWorkflowExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalWithStartWorkflowExecutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalWithStartWorkflowExecutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalWithStartWorkflowExecutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &common.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionStartToCloseTimeoutSeconds", wireType)
			}
			m.ExecutionStartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionStartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStartToCloseTimeoutSeconds", wireType)
			}
			m.TaskStartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskStartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowIdReusePolicy", wireType)
			}
			m.WorkflowIdReusePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowIdReusePolicy |= enums.WorkflowIdReusePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalInput", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalInput = append(m.SignalInput[:0], dAtA[iNdEx:postIndex]...)
			if m.SignalInput == nil {
				m.SignalInput = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = append(m.Control[:0], dAtA[iNdEx:postIndex]...)
			if m.Control == nil {
				m.Control = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &common.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &common.Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &common.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalWithStartWorkflowExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalWithStartWorkflowExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalWithStartWorkflowExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetWorkflowExecutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetWorkflowExecutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetWorkflowExecutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &common.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionFinishEventId", wireType)
			}
			m.DecisionFinishEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionFinishEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetWorkflowExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetWorkflowExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetWorkflowExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TerminateWorkflowExecutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminateWorkflowExecutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminateWorkflowExecutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &common.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details[:0], dAtA[iNdEx:postIndex]...)
			if m.Details == nil {
				m.Details = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TerminateWorkflowExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminateWorkflowExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminateWorkflowExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOpenWorkflowExecutionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOpenWorkflowExecutionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOpenWorkflowExecutionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumPageSize", wireType)
			}
			m.MaximumPageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumPageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTimeFilter == nil {
				m.StartTimeFilter = &common.StartTimeFilter{}
			}
			if err := m.StartTimeFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common.WorkflowExecutionFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filters = &ListOpenWorkflowExecutionsRequest_ExecutionFilter{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common.WorkflowTypeFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filters = &ListOpenWorkflowExecutionsRequest_TypeFilter{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOpenWorkflowExecutionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOpenWorkflowExecutionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOpenWorkflowExecutionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executions = append(m.Executions, &common.WorkflowExecutionInfo{})
			if err := m.Executions[len(m.Executions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClosedWorkflowExecutionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClosedWorkflowExecutionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClosedWorkflowExecutionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumPageSize", wireType)
			}
			m.MaximumPageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumPageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTimeFilter == nil {
				m.StartTimeFilter = &common.StartTimeFilter{}
			}
			if err := m.StartTimeFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common.WorkflowExecutionFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filters = &ListClosedWorkflowExecutionsRequest_ExecutionFilter{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common.WorkflowTypeFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filters = &ListClosedWorkflowExecutionsRequest_TypeFilter{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common.StatusFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filters = &ListClosedWorkflowExecutionsRequest_StatusFilter{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClosedWorkflowExecutionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClosedWorkflowExecutionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClosedWorkflowExecutionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executions = append(m.Executions, &common.WorkflowExecutionInfo{})
			if err := m.Executions[len(m.Executions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWorkflowExecutionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkflowExecutionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkflowExecutionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWorkflowExecutionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkflowExecutionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkflowExecutionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executions = append(m.Executions, &common.WorkflowExecutionInfo{})
			if err := m.Executions[len(m.Executions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListArchivedWorkflowExecutionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListArchivedWorkflowExecutionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListArchivedWorkflowExecutionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListArchivedWorkflowExecutionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListArchivedWorkflowExecutionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListArchivedWorkflowExecutionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executions = append(m.Executions, &common.WorkflowExecutionInfo{})
			if err := m.Executions[len(m.Executions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanWorkflowExecutionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScanWorkflowExecutionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScanWorkflowExecutionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanWorkflowExecutionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScanWorkflowExecutionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScanWorkflowExecutionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executions = append(m.Executions, &common.WorkflowExecutionInfo{})
			if err := m.Executions[len(m.Executions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountWorkflowExecutionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountWorkflowExecutionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountWorkflowExecutionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountWorkflowExecutionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountWorkflowExecutionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountWorkflowExecutionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSearchAttributesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSearchAttributesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSearchAttributesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSearchAttributesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSearchAttributesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSearchAttributesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keys == nil {
				m.Keys = make(map[string]enums.IndexedValueType)
			}
			var mapkey string
			var mapvalue enums.IndexedValueType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequestResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= enums.IndexedValueType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRequestResponse(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Keys[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondQueryTaskCompletedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedType", wireType)
			}
			m.CompletedType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletedType |= enums.QueryTaskCompletedType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryResult = append(m.QueryResult[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryResult == nil {
				m.QueryResult = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerVersionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkerVersionInfo == nil {
				m.WorkerVersionInfo = &common.WorkerVersionInfo{}
			}
			if err := m.WorkerVersionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondQueryTaskCompletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetStickyTaskListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetStickyTaskListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetStickyTaskListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &common.WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetStickyTaskListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetStickyTaskListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetStickyTaskListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkflowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkflowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkflowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &common.WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &common.WorkflowQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryRejectCondition", wireType)
			}
			m.QueryRejectCondition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryRejectCondition |= enums.QueryRejectCondition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryConsistencyLevel", wireType)
			}
			m.QueryConsistencyLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryConsistencyLevel |= enums.QueryConsistencyLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkflowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkflowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkflowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryResult = append(m.QueryResult[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryResult == nil {
				m.QueryResult = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryRejected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryRejected == nil {
				m.QueryRejected = &common.QueryRejected{}
			}
			if err := m.QueryRejected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkflowExecutionRawHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkflowExecutionRawHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkflowExecutionRawHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &common.WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumPageSize", wireType)
			}
			m.MaximumPageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumPageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkflowExecutionRawHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkflowExecutionRawHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkflowExecutionRawHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawHistory = append(m.RawHistory, &common.DataBlob{})
			if err := m.RawHistory[len(m.RawHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPageToken == nil {
				m.NextPageToken = &token.HistoryContinuationToken{}
			}
			if err := m.NextPageToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeWorkflowExecutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeWorkflowExecutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeWorkflowExecutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &common.WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeWorkflowExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeWorkflowExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeWorkflowExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionConfiguration == nil {
				m.ExecutionConfiguration = &common.WorkflowExecutionConfiguration{}
			}
			if err := m.ExecutionConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecutionInfo == nil {
				m.WorkflowExecutionInfo = &common.WorkflowExecutionInfo{}
			}
			if err := m.WorkflowExecutionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingActivities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingActivities = append(m.PendingActivities, &common.PendingActivityInfo{})
			if err := m.PendingActivities[len(m.PendingActivities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingChildren", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingChildren = append(m.PendingChildren, &common.PendingChildExecutionInfo{})
			if err := m.PendingChildren[len(m.PendingChildren)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeTaskListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeTaskListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeTaskListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &common.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskListType", wireType)
			}
			m.TaskListType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskListType |= enums.TaskListType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeTaskListStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeTaskListStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeTaskListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeTaskListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeTaskListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pollers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pollers = append(m.Pollers, &common.PollerInfo{})
			if err := m.Pollers[len(m.Pollers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskListStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskListStatus == nil {
				m.TaskListStatus = &common.TaskListStatus{}
			}
			if err := m.TaskListStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedClientVersions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SupportedClientVersions == nil {
				m.SupportedClientVersions = &common.SupportedClientVersions{}
			}
			if err := m.SupportedClientVersions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTaskListPartitionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTaskListPartitionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTaskListPartitionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &common.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTaskListPartitionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTaskListPartitionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTaskListPartitionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskListPartitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityTaskListPartitions = append(m.ActivityTaskListPartitions, &common.TaskListPartitionMetadata{})
			if err := m.ActivityTaskListPartitions[len(m.ActivityTaskListPartitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskListPartitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecisionTaskListPartitions = append(m.DecisionTaskListPartitions, &common.TaskListPartitionMetadata{})
			if err := m.DecisionTaskListPartitions[len(m.DecisionTaskListPartitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequestResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequestResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequestResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequestResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequestResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequestResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequestResponse = fmt.Errorf("proto: unexpected end of group")
)
