// The MIT License (MIT)
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: errordetails/error_details.proto

package errordetails

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowExecutionAlreadyStartedFailure struct {
	StartRequestId string `protobuf:"bytes,1,opt,name=startRequestId,proto3" json:"startRequestId,omitempty"`
	RunId          string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
}

func (m *WorkflowExecutionAlreadyStartedFailure) Reset() {
	*m = WorkflowExecutionAlreadyStartedFailure{}
}
func (*WorkflowExecutionAlreadyStartedFailure) ProtoMessage() {}
func (*WorkflowExecutionAlreadyStartedFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ac0eeeb3160cc8e, []int{0}
}
func (m *WorkflowExecutionAlreadyStartedFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionAlreadyStartedFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionAlreadyStartedFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionAlreadyStartedFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionAlreadyStartedFailure.Merge(m, src)
}
func (m *WorkflowExecutionAlreadyStartedFailure) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionAlreadyStartedFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionAlreadyStartedFailure.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionAlreadyStartedFailure proto.InternalMessageInfo

func (m *WorkflowExecutionAlreadyStartedFailure) GetStartRequestId() string {
	if m != nil {
		return m.StartRequestId
	}
	return ""
}

func (m *WorkflowExecutionAlreadyStartedFailure) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type DomainNotActiveFailure struct {
	DomainName     string `protobuf:"bytes,1,opt,name=domainName,proto3" json:"domainName,omitempty"`
	CurrentCluster string `protobuf:"bytes,2,opt,name=currentCluster,proto3" json:"currentCluster,omitempty"`
	ActiveCluster  string `protobuf:"bytes,3,opt,name=activeCluster,proto3" json:"activeCluster,omitempty"`
}

func (m *DomainNotActiveFailure) Reset()      { *m = DomainNotActiveFailure{} }
func (*DomainNotActiveFailure) ProtoMessage() {}
func (*DomainNotActiveFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ac0eeeb3160cc8e, []int{1}
}
func (m *DomainNotActiveFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainNotActiveFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainNotActiveFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainNotActiveFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainNotActiveFailure.Merge(m, src)
}
func (m *DomainNotActiveFailure) XXX_Size() int {
	return m.Size()
}
func (m *DomainNotActiveFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainNotActiveFailure.DiscardUnknown(m)
}

var xxx_messageInfo_DomainNotActiveFailure proto.InternalMessageInfo

func (m *DomainNotActiveFailure) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *DomainNotActiveFailure) GetCurrentCluster() string {
	if m != nil {
		return m.CurrentCluster
	}
	return ""
}

func (m *DomainNotActiveFailure) GetActiveCluster() string {
	if m != nil {
		return m.ActiveCluster
	}
	return ""
}

type RetryTaskFailure struct {
	DomainId    string `protobuf:"bytes,1,opt,name=domainId,proto3" json:"domainId,omitempty"`
	WorkflowId  string `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	RunId       string `protobuf:"bytes,3,opt,name=runId,proto3" json:"runId,omitempty"`
	NextEventId int64  `protobuf:"varint,4,opt,name=nextEventId,proto3" json:"nextEventId,omitempty"`
}

func (m *RetryTaskFailure) Reset()      { *m = RetryTaskFailure{} }
func (*RetryTaskFailure) ProtoMessage() {}
func (*RetryTaskFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ac0eeeb3160cc8e, []int{2}
}
func (m *RetryTaskFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetryTaskFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetryTaskFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetryTaskFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryTaskFailure.Merge(m, src)
}
func (m *RetryTaskFailure) XXX_Size() int {
	return m.Size()
}
func (m *RetryTaskFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryTaskFailure.DiscardUnknown(m)
}

var xxx_messageInfo_RetryTaskFailure proto.InternalMessageInfo

func (m *RetryTaskFailure) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *RetryTaskFailure) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *RetryTaskFailure) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *RetryTaskFailure) GetNextEventId() int64 {
	if m != nil {
		return m.NextEventId
	}
	return 0
}

type RetryTaskV2Failure struct {
	DomainId          string `protobuf:"bytes,1,opt,name=domainId,proto3" json:"domainId,omitempty"`
	WorkflowId        string `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	RunId             string `protobuf:"bytes,3,opt,name=runId,proto3" json:"runId,omitempty"`
	StartEventId      int64  `protobuf:"varint,4,opt,name=startEventId,proto3" json:"startEventId,omitempty"`
	StartEventVersion int64  `protobuf:"varint,5,opt,name=startEventVersion,proto3" json:"startEventVersion,omitempty"`
	EndEventId        int64  `protobuf:"varint,6,opt,name=endEventId,proto3" json:"endEventId,omitempty"`
	EndEventVersion   int64  `protobuf:"varint,7,opt,name=endEventVersion,proto3" json:"endEventVersion,omitempty"`
}

func (m *RetryTaskV2Failure) Reset()      { *m = RetryTaskV2Failure{} }
func (*RetryTaskV2Failure) ProtoMessage() {}
func (*RetryTaskV2Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ac0eeeb3160cc8e, []int{3}
}
func (m *RetryTaskV2Failure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetryTaskV2Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetryTaskV2Failure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetryTaskV2Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryTaskV2Failure.Merge(m, src)
}
func (m *RetryTaskV2Failure) XXX_Size() int {
	return m.Size()
}
func (m *RetryTaskV2Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryTaskV2Failure.DiscardUnknown(m)
}

var xxx_messageInfo_RetryTaskV2Failure proto.InternalMessageInfo

func (m *RetryTaskV2Failure) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *RetryTaskV2Failure) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *RetryTaskV2Failure) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *RetryTaskV2Failure) GetStartEventId() int64 {
	if m != nil {
		return m.StartEventId
	}
	return 0
}

func (m *RetryTaskV2Failure) GetStartEventVersion() int64 {
	if m != nil {
		return m.StartEventVersion
	}
	return 0
}

func (m *RetryTaskV2Failure) GetEndEventId() int64 {
	if m != nil {
		return m.EndEventId
	}
	return 0
}

func (m *RetryTaskV2Failure) GetEndEventVersion() int64 {
	if m != nil {
		return m.EndEventVersion
	}
	return 0
}

type ClientVersionNotSupportedFailure struct {
	FeatureVersion    string `protobuf:"bytes,1,opt,name=featureVersion,proto3" json:"featureVersion,omitempty"`
	ClientImpl        string `protobuf:"bytes,2,opt,name=clientImpl,proto3" json:"clientImpl,omitempty"`
	SupportedVersions string `protobuf:"bytes,3,opt,name=supportedVersions,proto3" json:"supportedVersions,omitempty"`
}

func (m *ClientVersionNotSupportedFailure) Reset()      { *m = ClientVersionNotSupportedFailure{} }
func (*ClientVersionNotSupportedFailure) ProtoMessage() {}
func (*ClientVersionNotSupportedFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ac0eeeb3160cc8e, []int{4}
}
func (m *ClientVersionNotSupportedFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientVersionNotSupportedFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientVersionNotSupportedFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientVersionNotSupportedFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientVersionNotSupportedFailure.Merge(m, src)
}
func (m *ClientVersionNotSupportedFailure) XXX_Size() int {
	return m.Size()
}
func (m *ClientVersionNotSupportedFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientVersionNotSupportedFailure.DiscardUnknown(m)
}

var xxx_messageInfo_ClientVersionNotSupportedFailure proto.InternalMessageInfo

func (m *ClientVersionNotSupportedFailure) GetFeatureVersion() string {
	if m != nil {
		return m.FeatureVersion
	}
	return ""
}

func (m *ClientVersionNotSupportedFailure) GetClientImpl() string {
	if m != nil {
		return m.ClientImpl
	}
	return ""
}

func (m *ClientVersionNotSupportedFailure) GetSupportedVersions() string {
	if m != nil {
		return m.SupportedVersions
	}
	return ""
}

type CurrentBranchChangedFailure struct {
	CurrentBranchToken []byte `protobuf:"bytes,1,opt,name=currentBranchToken,proto3" json:"currentBranchToken,omitempty"`
}

func (m *CurrentBranchChangedFailure) Reset()      { *m = CurrentBranchChangedFailure{} }
func (*CurrentBranchChangedFailure) ProtoMessage() {}
func (*CurrentBranchChangedFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ac0eeeb3160cc8e, []int{5}
}
func (m *CurrentBranchChangedFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentBranchChangedFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentBranchChangedFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentBranchChangedFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentBranchChangedFailure.Merge(m, src)
}
func (m *CurrentBranchChangedFailure) XXX_Size() int {
	return m.Size()
}
func (m *CurrentBranchChangedFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentBranchChangedFailure.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentBranchChangedFailure proto.InternalMessageInfo

func (m *CurrentBranchChangedFailure) GetCurrentBranchToken() []byte {
	if m != nil {
		return m.CurrentBranchToken
	}
	return nil
}

type DomainAlreadyExistsFailure struct {
}

func (m *DomainAlreadyExistsFailure) Reset()      { *m = DomainAlreadyExistsFailure{} }
func (*DomainAlreadyExistsFailure) ProtoMessage() {}
func (*DomainAlreadyExistsFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ac0eeeb3160cc8e, []int{6}
}
func (m *DomainAlreadyExistsFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainAlreadyExistsFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainAlreadyExistsFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainAlreadyExistsFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainAlreadyExistsFailure.Merge(m, src)
}
func (m *DomainAlreadyExistsFailure) XXX_Size() int {
	return m.Size()
}
func (m *DomainAlreadyExistsFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainAlreadyExistsFailure.DiscardUnknown(m)
}

var xxx_messageInfo_DomainAlreadyExistsFailure proto.InternalMessageInfo

type CancellationAlreadyRequestedFailure struct {
}

func (m *CancellationAlreadyRequestedFailure) Reset()      { *m = CancellationAlreadyRequestedFailure{} }
func (*CancellationAlreadyRequestedFailure) ProtoMessage() {}
func (*CancellationAlreadyRequestedFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ac0eeeb3160cc8e, []int{7}
}
func (m *CancellationAlreadyRequestedFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancellationAlreadyRequestedFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancellationAlreadyRequestedFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancellationAlreadyRequestedFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancellationAlreadyRequestedFailure.Merge(m, src)
}
func (m *CancellationAlreadyRequestedFailure) XXX_Size() int {
	return m.Size()
}
func (m *CancellationAlreadyRequestedFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_CancellationAlreadyRequestedFailure.DiscardUnknown(m)
}

var xxx_messageInfo_CancellationAlreadyRequestedFailure proto.InternalMessageInfo

type QueryFailedFailure struct {
}

func (m *QueryFailedFailure) Reset()      { *m = QueryFailedFailure{} }
func (*QueryFailedFailure) ProtoMessage() {}
func (*QueryFailedFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ac0eeeb3160cc8e, []int{8}
}
func (m *QueryFailedFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFailedFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFailedFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFailedFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFailedFailure.Merge(m, src)
}
func (m *QueryFailedFailure) XXX_Size() int {
	return m.Size()
}
func (m *QueryFailedFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFailedFailure.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFailedFailure proto.InternalMessageInfo

type EventAlreadyStartedFailure struct {
}

func (m *EventAlreadyStartedFailure) Reset()      { *m = EventAlreadyStartedFailure{} }
func (*EventAlreadyStartedFailure) ProtoMessage() {}
func (*EventAlreadyStartedFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ac0eeeb3160cc8e, []int{9}
}
func (m *EventAlreadyStartedFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAlreadyStartedFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAlreadyStartedFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAlreadyStartedFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAlreadyStartedFailure.Merge(m, src)
}
func (m *EventAlreadyStartedFailure) XXX_Size() int {
	return m.Size()
}
func (m *EventAlreadyStartedFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAlreadyStartedFailure.DiscardUnknown(m)
}

var xxx_messageInfo_EventAlreadyStartedFailure proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WorkflowExecutionAlreadyStartedFailure)(nil), "errordetails.WorkflowExecutionAlreadyStartedFailure")
	proto.RegisterType((*DomainNotActiveFailure)(nil), "errordetails.DomainNotActiveFailure")
	proto.RegisterType((*RetryTaskFailure)(nil), "errordetails.RetryTaskFailure")
	proto.RegisterType((*RetryTaskV2Failure)(nil), "errordetails.RetryTaskV2Failure")
	proto.RegisterType((*ClientVersionNotSupportedFailure)(nil), "errordetails.ClientVersionNotSupportedFailure")
	proto.RegisterType((*CurrentBranchChangedFailure)(nil), "errordetails.CurrentBranchChangedFailure")
	proto.RegisterType((*DomainAlreadyExistsFailure)(nil), "errordetails.DomainAlreadyExistsFailure")
	proto.RegisterType((*CancellationAlreadyRequestedFailure)(nil), "errordetails.CancellationAlreadyRequestedFailure")
	proto.RegisterType((*QueryFailedFailure)(nil), "errordetails.QueryFailedFailure")
	proto.RegisterType((*EventAlreadyStartedFailure)(nil), "errordetails.EventAlreadyStartedFailure")
}

func init() { proto.RegisterFile("errordetails/error_details.proto", fileDescriptor_9ac0eeeb3160cc8e) }

var fileDescriptor_9ac0eeeb3160cc8e = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xbd, 0xcd, 0xaf, 0xfd, 0xc1, 0x34, 0xfc, 0xb3, 0x2a, 0x14, 0x85, 0x6a, 0x15, 0x19,
	0xa8, 0x22, 0x04, 0x89, 0x04, 0x4f, 0xd0, 0x86, 0x20, 0xe5, 0x40, 0x25, 0xd2, 0xaa, 0x48, 0x5c,
	0xd0, 0x62, 0x4f, 0x5a, 0x2b, 0xce, 0x6e, 0x58, 0xaf, 0xdb, 0xe4, 0x86, 0x38, 0x70, 0xe6, 0xc8,
	0x23, 0xf0, 0x28, 0x1c, 0x73, 0xec, 0x91, 0x38, 0x17, 0x8e, 0x7d, 0x04, 0xe4, 0xf5, 0x6e, 0xec,
	0xa4, 0xbd, 0x72, 0xcb, 0x7c, 0x66, 0xf2, 0xdd, 0xef, 0x8c, 0x77, 0x16, 0x1a, 0x28, 0xa5, 0x90,
	0x01, 0x2a, 0x16, 0x46, 0x71, 0x5b, 0x07, 0x1f, 0x4d, 0xd4, 0x1a, 0x4b, 0xa1, 0x84, 0x5b, 0x2d,
	0x57, 0x78, 0x03, 0xd8, 0x7b, 0x2f, 0xe4, 0x70, 0x10, 0x89, 0x8b, 0xee, 0x04, 0xfd, 0x44, 0x85,
	0x82, 0xef, 0x47, 0x12, 0x59, 0x30, 0x3d, 0x52, 0x4c, 0x2a, 0x0c, 0xde, 0xb0, 0x30, 0x4a, 0x24,
	0xba, 0x7b, 0x70, 0x37, 0xce, 0x48, 0x1f, 0x3f, 0x27, 0x18, 0xab, 0x5e, 0x50, 0x23, 0x0d, 0xd2,
	0xbc, 0xdd, 0x5f, 0xa3, 0xee, 0x0e, 0x6c, 0xca, 0x84, 0xf7, 0x82, 0xda, 0x86, 0x4e, 0xe7, 0x81,
	0xf7, 0x8d, 0xc0, 0xc3, 0xd7, 0x62, 0xc4, 0x42, 0x7e, 0x28, 0xd4, 0xbe, 0xaf, 0xc2, 0x73, 0xb4,
	0xc2, 0x14, 0x20, 0xc8, 0x33, 0x6c, 0x84, 0x46, 0xb4, 0x44, 0xb2, 0x83, 0xfd, 0x44, 0x4a, 0xe4,
	0xaa, 0x13, 0x25, 0xb1, 0x42, 0x69, 0x94, 0xd7, 0xa8, 0xfb, 0x04, 0xee, 0x30, 0x2d, 0x6c, 0xcb,
	0x2a, 0xba, 0x6c, 0x15, 0x66, 0x46, 0xee, 0xf7, 0x51, 0xc9, 0xe9, 0x31, 0x8b, 0x87, 0xd6, 0x42,
	0x1d, 0x6e, 0xe5, 0x07, 0x2e, 0xbb, 0x5a, 0xc6, 0x99, 0xbd, 0x0b, 0x33, 0xa1, 0x65, 0x53, 0x25,
	0x52, 0xf4, 0x5b, 0x29, 0xf5, 0xeb, 0x36, 0x60, 0x9b, 0xe3, 0x44, 0x75, 0xcf, 0x91, 0x67, 0xa3,
	0xfa, 0xaf, 0x41, 0x9a, 0x95, 0x7e, 0x19, 0x79, 0x5f, 0x37, 0xc0, 0x5d, 0x1a, 0x39, 0x79, 0xf9,
	0xef, 0xac, 0x78, 0x50, 0xd5, 0x9f, 0x68, 0xd5, 0xcb, 0x0a, 0x73, 0x9f, 0xc3, 0x83, 0x22, 0x3e,
	0x41, 0x19, 0x87, 0x82, 0xd7, 0x36, 0x75, 0xe1, 0xf5, 0x44, 0xe6, 0x03, 0x79, 0x60, 0xf5, 0xb6,
	0x74, 0x59, 0x89, 0xb8, 0x4d, 0xb8, 0x67, 0x23, 0xab, 0xf5, 0xbf, 0x2e, 0x5a, 0xc7, 0xde, 0x0f,
	0x02, 0x8d, 0x4e, 0x14, 0x16, 0xe4, 0x50, 0xa8, 0xa3, 0x64, 0x3c, 0x16, 0x6b, 0x37, 0x6f, 0x80,
	0x4c, 0x25, 0x12, 0xad, 0x9a, 0xb9, 0x79, 0xab, 0x34, 0xb3, 0xe5, 0x6b, 0xad, 0xde, 0x68, 0x1c,
	0xd9, 0xf1, 0x14, 0x44, 0x37, 0x69, 0xb5, 0xcd, 0x7f, 0x62, 0x33, 0xaa, 0xeb, 0x09, 0xef, 0x2d,
	0x3c, 0xea, 0xe4, 0x17, 0xec, 0x40, 0x32, 0xee, 0x9f, 0x75, 0xce, 0x18, 0x3f, 0x2d, 0x4c, 0xb5,
	0xc0, 0xf5, 0xcb, 0xe9, 0x63, 0x31, 0xc4, 0xdc, 0x58, 0xb5, 0x7f, 0x43, 0xc6, 0xdb, 0x85, 0x7a,
	0x7e, 0xff, 0xcd, 0x76, 0x75, 0x27, 0x61, 0xac, 0x62, 0xa3, 0xe6, 0x3d, 0x85, 0xc7, 0x1d, 0xc6,
	0x7d, 0x8c, 0x22, 0x56, 0xda, 0x40, 0xb3, 0x54, 0xcb, 0x43, 0xbd, 0x1d, 0x70, 0xdf, 0x25, 0x28,
	0xa7, 0x59, 0x5c, 0xd0, 0x5d, 0xa8, 0xeb, 0xa1, 0xde, 0xb8, 0xb7, 0x07, 0xa3, 0xd9, 0x9c, 0x3a,
	0x97, 0x73, 0xea, 0x5c, 0xcd, 0x29, 0xf9, 0x92, 0x52, 0xf2, 0x33, 0xa5, 0xe4, 0x57, 0x4a, 0xc9,
	0x2c, 0xa5, 0xe4, 0x77, 0x4a, 0xc9, 0x9f, 0x94, 0x3a, 0x57, 0x29, 0x25, 0xdf, 0x17, 0xd4, 0x99,
	0x2d, 0xa8, 0x73, 0xb9, 0xa0, 0x0e, 0x6c, 0x87, 0xa2, 0xa5, 0x70, 0x34, 0x16, 0x92, 0x45, 0x1f,
	0x9e, 0x9d, 0x16, 0x41, 0x2b, 0x14, 0x6d, 0xfb, 0xfb, 0x85, 0x7e, 0x51, 0xda, 0xe5, 0x07, 0xe5,
	0xd3, 0x96, 0x66, 0xaf, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x01, 0xde, 0x54, 0x71, 0x89, 0x04,
	0x00, 0x00,
}

func (this *WorkflowExecutionAlreadyStartedFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionAlreadyStartedFailure)
	if !ok {
		that2, ok := that.(WorkflowExecutionAlreadyStartedFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartRequestId != that1.StartRequestId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	return true
}
func (this *DomainNotActiveFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainNotActiveFailure)
	if !ok {
		that2, ok := that.(DomainNotActiveFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainName != that1.DomainName {
		return false
	}
	if this.CurrentCluster != that1.CurrentCluster {
		return false
	}
	if this.ActiveCluster != that1.ActiveCluster {
		return false
	}
	return true
}
func (this *RetryTaskFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetryTaskFailure)
	if !ok {
		that2, ok := that.(RetryTaskFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainId != that1.DomainId {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.NextEventId != that1.NextEventId {
		return false
	}
	return true
}
func (this *RetryTaskV2Failure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetryTaskV2Failure)
	if !ok {
		that2, ok := that.(RetryTaskV2Failure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainId != that1.DomainId {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.StartEventId != that1.StartEventId {
		return false
	}
	if this.StartEventVersion != that1.StartEventVersion {
		return false
	}
	if this.EndEventId != that1.EndEventId {
		return false
	}
	if this.EndEventVersion != that1.EndEventVersion {
		return false
	}
	return true
}
func (this *ClientVersionNotSupportedFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientVersionNotSupportedFailure)
	if !ok {
		that2, ok := that.(ClientVersionNotSupportedFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FeatureVersion != that1.FeatureVersion {
		return false
	}
	if this.ClientImpl != that1.ClientImpl {
		return false
	}
	if this.SupportedVersions != that1.SupportedVersions {
		return false
	}
	return true
}
func (this *CurrentBranchChangedFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CurrentBranchChangedFailure)
	if !ok {
		that2, ok := that.(CurrentBranchChangedFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.CurrentBranchToken, that1.CurrentBranchToken) {
		return false
	}
	return true
}
func (this *DomainAlreadyExistsFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainAlreadyExistsFailure)
	if !ok {
		that2, ok := that.(DomainAlreadyExistsFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CancellationAlreadyRequestedFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancellationAlreadyRequestedFailure)
	if !ok {
		that2, ok := that.(CancellationAlreadyRequestedFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *QueryFailedFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryFailedFailure)
	if !ok {
		that2, ok := that.(QueryFailedFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *EventAlreadyStartedFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventAlreadyStartedFailure)
	if !ok {
		that2, ok := that.(EventAlreadyStartedFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *WorkflowExecutionAlreadyStartedFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&errordetails.WorkflowExecutionAlreadyStartedFailure{")
	s = append(s, "StartRequestId: "+fmt.Sprintf("%#v", this.StartRequestId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DomainNotActiveFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&errordetails.DomainNotActiveFailure{")
	s = append(s, "DomainName: "+fmt.Sprintf("%#v", this.DomainName)+",\n")
	s = append(s, "CurrentCluster: "+fmt.Sprintf("%#v", this.CurrentCluster)+",\n")
	s = append(s, "ActiveCluster: "+fmt.Sprintf("%#v", this.ActiveCluster)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetryTaskFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&errordetails.RetryTaskFailure{")
	s = append(s, "DomainId: "+fmt.Sprintf("%#v", this.DomainId)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "NextEventId: "+fmt.Sprintf("%#v", this.NextEventId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetryTaskV2Failure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&errordetails.RetryTaskV2Failure{")
	s = append(s, "DomainId: "+fmt.Sprintf("%#v", this.DomainId)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "StartEventId: "+fmt.Sprintf("%#v", this.StartEventId)+",\n")
	s = append(s, "StartEventVersion: "+fmt.Sprintf("%#v", this.StartEventVersion)+",\n")
	s = append(s, "EndEventId: "+fmt.Sprintf("%#v", this.EndEventId)+",\n")
	s = append(s, "EndEventVersion: "+fmt.Sprintf("%#v", this.EndEventVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientVersionNotSupportedFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&errordetails.ClientVersionNotSupportedFailure{")
	s = append(s, "FeatureVersion: "+fmt.Sprintf("%#v", this.FeatureVersion)+",\n")
	s = append(s, "ClientImpl: "+fmt.Sprintf("%#v", this.ClientImpl)+",\n")
	s = append(s, "SupportedVersions: "+fmt.Sprintf("%#v", this.SupportedVersions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CurrentBranchChangedFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&errordetails.CurrentBranchChangedFailure{")
	s = append(s, "CurrentBranchToken: "+fmt.Sprintf("%#v", this.CurrentBranchToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DomainAlreadyExistsFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&errordetails.DomainAlreadyExistsFailure{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancellationAlreadyRequestedFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&errordetails.CancellationAlreadyRequestedFailure{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryFailedFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&errordetails.QueryFailedFailure{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EventAlreadyStartedFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&errordetails.EventAlreadyStartedFailure{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringErrorDetails(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *WorkflowExecutionAlreadyStartedFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionAlreadyStartedFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionAlreadyStartedFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StartRequestId) > 0 {
		i -= len(m.StartRequestId)
		copy(dAtA[i:], m.StartRequestId)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.StartRequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DomainNotActiveFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainNotActiveFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainNotActiveFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActiveCluster) > 0 {
		i -= len(m.ActiveCluster)
		copy(dAtA[i:], m.ActiveCluster)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.ActiveCluster)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CurrentCluster) > 0 {
		i -= len(m.CurrentCluster)
		copy(dAtA[i:], m.CurrentCluster)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.CurrentCluster)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainName) > 0 {
		i -= len(m.DomainName)
		copy(dAtA[i:], m.DomainName)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.DomainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetryTaskFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetryTaskFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetryTaskFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextEventId != 0 {
		i = encodeVarintErrorDetails(dAtA, i, uint64(m.NextEventId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainId) > 0 {
		i -= len(m.DomainId)
		copy(dAtA[i:], m.DomainId)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.DomainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetryTaskV2Failure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetryTaskV2Failure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetryTaskV2Failure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndEventVersion != 0 {
		i = encodeVarintErrorDetails(dAtA, i, uint64(m.EndEventVersion))
		i--
		dAtA[i] = 0x38
	}
	if m.EndEventId != 0 {
		i = encodeVarintErrorDetails(dAtA, i, uint64(m.EndEventId))
		i--
		dAtA[i] = 0x30
	}
	if m.StartEventVersion != 0 {
		i = encodeVarintErrorDetails(dAtA, i, uint64(m.StartEventVersion))
		i--
		dAtA[i] = 0x28
	}
	if m.StartEventId != 0 {
		i = encodeVarintErrorDetails(dAtA, i, uint64(m.StartEventId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainId) > 0 {
		i -= len(m.DomainId)
		copy(dAtA[i:], m.DomainId)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.DomainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientVersionNotSupportedFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientVersionNotSupportedFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientVersionNotSupportedFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupportedVersions) > 0 {
		i -= len(m.SupportedVersions)
		copy(dAtA[i:], m.SupportedVersions)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.SupportedVersions)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientImpl) > 0 {
		i -= len(m.ClientImpl)
		copy(dAtA[i:], m.ClientImpl)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.ClientImpl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeatureVersion) > 0 {
		i -= len(m.FeatureVersion)
		copy(dAtA[i:], m.FeatureVersion)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.FeatureVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CurrentBranchChangedFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentBranchChangedFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentBranchChangedFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentBranchToken) > 0 {
		i -= len(m.CurrentBranchToken)
		copy(dAtA[i:], m.CurrentBranchToken)
		i = encodeVarintErrorDetails(dAtA, i, uint64(len(m.CurrentBranchToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DomainAlreadyExistsFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainAlreadyExistsFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainAlreadyExistsFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CancellationAlreadyRequestedFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancellationAlreadyRequestedFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancellationAlreadyRequestedFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFailedFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFailedFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFailedFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventAlreadyStartedFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAlreadyStartedFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAlreadyStartedFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintErrorDetails(dAtA []byte, offset int, v uint64) int {
	offset -= sovErrorDetails(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorkflowExecutionAlreadyStartedFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartRequestId)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	return n
}

func (m *DomainNotActiveFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	l = len(m.CurrentCluster)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	l = len(m.ActiveCluster)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	return n
}

func (m *RetryTaskFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainId)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	if m.NextEventId != 0 {
		n += 1 + sovErrorDetails(uint64(m.NextEventId))
	}
	return n
}

func (m *RetryTaskV2Failure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainId)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	if m.StartEventId != 0 {
		n += 1 + sovErrorDetails(uint64(m.StartEventId))
	}
	if m.StartEventVersion != 0 {
		n += 1 + sovErrorDetails(uint64(m.StartEventVersion))
	}
	if m.EndEventId != 0 {
		n += 1 + sovErrorDetails(uint64(m.EndEventId))
	}
	if m.EndEventVersion != 0 {
		n += 1 + sovErrorDetails(uint64(m.EndEventVersion))
	}
	return n
}

func (m *ClientVersionNotSupportedFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeatureVersion)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	l = len(m.ClientImpl)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	l = len(m.SupportedVersions)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	return n
}

func (m *CurrentBranchChangedFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentBranchToken)
	if l > 0 {
		n += 1 + l + sovErrorDetails(uint64(l))
	}
	return n
}

func (m *DomainAlreadyExistsFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CancellationAlreadyRequestedFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFailedFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventAlreadyStartedFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovErrorDetails(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozErrorDetails(x uint64) (n int) {
	return sovErrorDetails(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *WorkflowExecutionAlreadyStartedFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionAlreadyStartedFailure{`,
		`StartRequestId:` + fmt.Sprintf("%v", this.StartRequestId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainNotActiveFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainNotActiveFailure{`,
		`DomainName:` + fmt.Sprintf("%v", this.DomainName) + `,`,
		`CurrentCluster:` + fmt.Sprintf("%v", this.CurrentCluster) + `,`,
		`ActiveCluster:` + fmt.Sprintf("%v", this.ActiveCluster) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetryTaskFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetryTaskFailure{`,
		`DomainId:` + fmt.Sprintf("%v", this.DomainId) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`NextEventId:` + fmt.Sprintf("%v", this.NextEventId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetryTaskV2Failure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetryTaskV2Failure{`,
		`DomainId:` + fmt.Sprintf("%v", this.DomainId) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`StartEventId:` + fmt.Sprintf("%v", this.StartEventId) + `,`,
		`StartEventVersion:` + fmt.Sprintf("%v", this.StartEventVersion) + `,`,
		`EndEventId:` + fmt.Sprintf("%v", this.EndEventId) + `,`,
		`EndEventVersion:` + fmt.Sprintf("%v", this.EndEventVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientVersionNotSupportedFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientVersionNotSupportedFailure{`,
		`FeatureVersion:` + fmt.Sprintf("%v", this.FeatureVersion) + `,`,
		`ClientImpl:` + fmt.Sprintf("%v", this.ClientImpl) + `,`,
		`SupportedVersions:` + fmt.Sprintf("%v", this.SupportedVersions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CurrentBranchChangedFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CurrentBranchChangedFailure{`,
		`CurrentBranchToken:` + fmt.Sprintf("%v", this.CurrentBranchToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainAlreadyExistsFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainAlreadyExistsFailure{`,
		`}`,
	}, "")
	return s
}
func (this *CancellationAlreadyRequestedFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancellationAlreadyRequestedFailure{`,
		`}`,
	}, "")
	return s
}
func (this *QueryFailedFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryFailedFailure{`,
		`}`,
	}, "")
	return s
}
func (this *EventAlreadyStartedFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventAlreadyStartedFailure{`,
		`}`,
	}, "")
	return s
}
func valueToStringErrorDetails(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *WorkflowExecutionAlreadyStartedFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionAlreadyStartedFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionAlreadyStartedFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainNotActiveFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainNotActiveFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainNotActiveFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetryTaskFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetryTaskFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetryTaskFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEventId", wireType)
			}
			m.NextEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrorDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetryTaskV2Failure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetryTaskV2Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetryTaskV2Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEventId", wireType)
			}
			m.StartEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEventVersion", wireType)
			}
			m.StartEventVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEventVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndEventId", wireType)
			}
			m.EndEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndEventVersion", wireType)
			}
			m.EndEventVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndEventVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrorDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientVersionNotSupportedFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientVersionNotSupportedFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientVersionNotSupportedFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientImpl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientImpl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedVersions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedVersions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentBranchChangedFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentBranchChangedFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentBranchChangedFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBranchToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthErrorDetails
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentBranchToken = append(m.CurrentBranchToken[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentBranchToken == nil {
				m.CurrentBranchToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainAlreadyExistsFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainAlreadyExistsFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainAlreadyExistsFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancellationAlreadyRequestedFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancellationAlreadyRequestedFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancellationAlreadyRequestedFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFailedFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFailedFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFailedFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAlreadyStartedFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAlreadyStartedFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAlreadyStartedFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErrorDetails(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErrorDetails
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrorDetails
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthErrorDetails
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupErrorDetails
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthErrorDetails
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthErrorDetails        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErrorDetails          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupErrorDetails = fmt.Errorf("proto: unexpected end of group")
)
