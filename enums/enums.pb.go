// The MIT License (MIT)
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enums/enums.proto

package enums

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowIdReusePolicy int32

const (
	// Allow start a workflow execution using the same workflow ID, when workflow not running.
	WorkflowIdReusePolicyAllowDuplicate WorkflowIdReusePolicy = 0
	// Allow start a workflow execution using the same workflow ID, when workflow not running, and the last execution close state is in
	// [terminated, cancelled, timed out, failed].
	WorkflowIdReusePolicyAllowDuplicateFailedOnly WorkflowIdReusePolicy = 1
	// Do not allow start a workflow execution using the same workflow ID at all.
	WorkflowIdReusePolicyRejectDuplicate WorkflowIdReusePolicy = 2
)

var WorkflowIdReusePolicy_name = map[int32]string{
	0: "WorkflowIdReusePolicyAllowDuplicate",
	1: "WorkflowIdReusePolicyAllowDuplicateFailedOnly",
	2: "WorkflowIdReusePolicyRejectDuplicate",
}

var WorkflowIdReusePolicy_value = map[string]int32{
	"WorkflowIdReusePolicyAllowDuplicate":           0,
	"WorkflowIdReusePolicyAllowDuplicateFailedOnly": 1,
	"WorkflowIdReusePolicyRejectDuplicate":          2,
}

func (WorkflowIdReusePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{0}
}

type DomainStatus int32

const (
	DomainStatusRegistered DomainStatus = 0
	DomainStatusDeprecated DomainStatus = 1
	DomainStatusDeleted    DomainStatus = 2
)

var DomainStatus_name = map[int32]string{
	0: "DomainStatusRegistered",
	1: "DomainStatusDeprecated",
	2: "DomainStatusDeleted",
}

var DomainStatus_value = map[string]int32{
	"DomainStatusRegistered": 0,
	"DomainStatusDeprecated": 1,
	"DomainStatusDeleted":    2,
}

func (DomainStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{1}
}

type TimeoutType int32

const (
	TimeoutTypeStartToClose    TimeoutType = 0
	TimeoutTypeScheduleToStart TimeoutType = 1
	TimeoutTypeScheduleToClose TimeoutType = 2
	TimeoutTypeHeartbeat       TimeoutType = 3
)

var TimeoutType_name = map[int32]string{
	0: "TimeoutTypeStartToClose",
	1: "TimeoutTypeScheduleToStart",
	2: "TimeoutTypeScheduleToClose",
	3: "TimeoutTypeHeartbeat",
}

var TimeoutType_value = map[string]int32{
	"TimeoutTypeStartToClose":    0,
	"TimeoutTypeScheduleToStart": 1,
	"TimeoutTypeScheduleToClose": 2,
	"TimeoutTypeHeartbeat":       3,
}

func (TimeoutType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{2}
}

type ParentClosePolicy int32

const (
	ParentClosePolicyAbandon       ParentClosePolicy = 0
	ParentClosePolicyRequestCancel ParentClosePolicy = 1
	ParentClosePolicyTerminate     ParentClosePolicy = 2
)

var ParentClosePolicy_name = map[int32]string{
	0: "ParentClosePolicyAbandon",
	1: "ParentClosePolicyRequestCancel",
	2: "ParentClosePolicyTerminate",
}

var ParentClosePolicy_value = map[string]int32{
	"ParentClosePolicyAbandon":       0,
	"ParentClosePolicyRequestCancel": 1,
	"ParentClosePolicyTerminate":     2,
}

func (ParentClosePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{3}
}

// Whenever this list of decision is changed do change the function shouldBufferEvent in mutableStateBuilder.go
// to make sure to do the correct event ordering.
type DecisionType int32

const (
	DecisionTypeScheduleActivityTask                   DecisionType = 0
	DecisionTypeRequestCancelActivityTask              DecisionType = 1
	DecisionTypeStartTimer                             DecisionType = 2
	DecisionTypeCompleteWorkflowExecution              DecisionType = 3
	DecisionTypeFailWorkflowExecution                  DecisionType = 4
	DecisionTypeCancelTimer                            DecisionType = 5
	DecisionTypeCancelWorkflowExecution                DecisionType = 6
	DecisionTypeRequestCancelExternalWorkflowExecution DecisionType = 7
	DecisionTypeRecordMarker                           DecisionType = 8
	DecisionTypeContinueAsNewWorkflowExecution         DecisionType = 9
	DecisionTypeStartChildWorkflowExecution            DecisionType = 10
	DecisionTypeSignalExternalWorkflowExecution        DecisionType = 11
	DecisionTypeUpsertWorkflowSearchAttributes         DecisionType = 12
)

var DecisionType_name = map[int32]string{
	0:  "DecisionTypeScheduleActivityTask",
	1:  "DecisionTypeRequestCancelActivityTask",
	2:  "DecisionTypeStartTimer",
	3:  "DecisionTypeCompleteWorkflowExecution",
	4:  "DecisionTypeFailWorkflowExecution",
	5:  "DecisionTypeCancelTimer",
	6:  "DecisionTypeCancelWorkflowExecution",
	7:  "DecisionTypeRequestCancelExternalWorkflowExecution",
	8:  "DecisionTypeRecordMarker",
	9:  "DecisionTypeContinueAsNewWorkflowExecution",
	10: "DecisionTypeStartChildWorkflowExecution",
	11: "DecisionTypeSignalExternalWorkflowExecution",
	12: "DecisionTypeUpsertWorkflowSearchAttributes",
}

var DecisionType_value = map[string]int32{
	"DecisionTypeScheduleActivityTask":                   0,
	"DecisionTypeRequestCancelActivityTask":              1,
	"DecisionTypeStartTimer":                             2,
	"DecisionTypeCompleteWorkflowExecution":              3,
	"DecisionTypeFailWorkflowExecution":                  4,
	"DecisionTypeCancelTimer":                            5,
	"DecisionTypeCancelWorkflowExecution":                6,
	"DecisionTypeRequestCancelExternalWorkflowExecution": 7,
	"DecisionTypeRecordMarker":                           8,
	"DecisionTypeContinueAsNewWorkflowExecution":         9,
	"DecisionTypeStartChildWorkflowExecution":            10,
	"DecisionTypeSignalExternalWorkflowExecution":        11,
	"DecisionTypeUpsertWorkflowSearchAttributes":         12,
}

func (DecisionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{4}
}

type EventType int32

const (
	EventTypeWorkflowExecutionStarted                        EventType = 0
	EventTypeWorkflowExecutionCompleted                      EventType = 1
	EventTypeWorkflowExecutionFailed                         EventType = 2
	EventTypeWorkflowExecutionTimedOut                       EventType = 3
	EventTypeDecisionTaskScheduled                           EventType = 4
	EventTypeDecisionTaskStarted                             EventType = 5
	EventTypeDecisionTaskCompleted                           EventType = 6
	EventTypeDecisionTaskTimedOut                            EventType = 7
	EventTypeDecisionTaskFailed                              EventType = 8
	EventTypeActivityTaskScheduled                           EventType = 9
	EventTypeActivityTaskStarted                             EventType = 10
	EventTypeActivityTaskCompleted                           EventType = 11
	EventTypeActivityTaskFailed                              EventType = 12
	EventTypeActivityTaskTimedOut                            EventType = 13
	EventTypeActivityTaskCancelRequested                     EventType = 14
	EventTypeRequestCancelActivityTaskFailed                 EventType = 15
	EventTypeActivityTaskCanceled                            EventType = 16
	EventTypeTimerStarted                                    EventType = 17
	EventTypeTimerFired                                      EventType = 18
	EventTypeCancelTimerFailed                               EventType = 19
	EventTypeTimerCanceled                                   EventType = 20
	EventTypeWorkflowExecutionCancelRequested                EventType = 21
	EventTypeWorkflowExecutionCanceled                       EventType = 22
	EventTypeRequestCancelExternalWorkflowExecutionInitiated EventType = 23
	EventTypeRequestCancelExternalWorkflowExecutionFailed    EventType = 24
	EventTypeExternalWorkflowExecutionCancelRequested        EventType = 25
	EventTypeMarkerRecorded                                  EventType = 26
	EventTypeWorkflowExecutionSignaled                       EventType = 27
	EventTypeWorkflowExecutionTerminated                     EventType = 28
	EventTypeWorkflowExecutionContinuedAsNew                 EventType = 29
	EventTypeStartChildWorkflowExecutionInitiated            EventType = 30
	EventTypeStartChildWorkflowExecutionFailed               EventType = 31
	EventTypeChildWorkflowExecutionStarted                   EventType = 32
	EventTypeChildWorkflowExecutionCompleted                 EventType = 33
	EventTypeChildWorkflowExecutionFailed                    EventType = 34
	EventTypeChildWorkflowExecutionCanceled                  EventType = 35
	EventTypeChildWorkflowExecutionTimedOut                  EventType = 36
	EventTypeChildWorkflowExecutionTerminated                EventType = 37
	EventTypeSignalExternalWorkflowExecutionInitiated        EventType = 38
	EventTypeSignalExternalWorkflowExecutionFailed           EventType = 39
	EventTypeExternalWorkflowExecutionSignaled               EventType = 40
	EventTypeUpsertWorkflowSearchAttributes                  EventType = 41
)

var EventType_name = map[int32]string{
	0:  "EventTypeWorkflowExecutionStarted",
	1:  "EventTypeWorkflowExecutionCompleted",
	2:  "EventTypeWorkflowExecutionFailed",
	3:  "EventTypeWorkflowExecutionTimedOut",
	4:  "EventTypeDecisionTaskScheduled",
	5:  "EventTypeDecisionTaskStarted",
	6:  "EventTypeDecisionTaskCompleted",
	7:  "EventTypeDecisionTaskTimedOut",
	8:  "EventTypeDecisionTaskFailed",
	9:  "EventTypeActivityTaskScheduled",
	10: "EventTypeActivityTaskStarted",
	11: "EventTypeActivityTaskCompleted",
	12: "EventTypeActivityTaskFailed",
	13: "EventTypeActivityTaskTimedOut",
	14: "EventTypeActivityTaskCancelRequested",
	15: "EventTypeRequestCancelActivityTaskFailed",
	16: "EventTypeActivityTaskCanceled",
	17: "EventTypeTimerStarted",
	18: "EventTypeTimerFired",
	19: "EventTypeCancelTimerFailed",
	20: "EventTypeTimerCanceled",
	21: "EventTypeWorkflowExecutionCancelRequested",
	22: "EventTypeWorkflowExecutionCanceled",
	23: "EventTypeRequestCancelExternalWorkflowExecutionInitiated",
	24: "EventTypeRequestCancelExternalWorkflowExecutionFailed",
	25: "EventTypeExternalWorkflowExecutionCancelRequested",
	26: "EventTypeMarkerRecorded",
	27: "EventTypeWorkflowExecutionSignaled",
	28: "EventTypeWorkflowExecutionTerminated",
	29: "EventTypeWorkflowExecutionContinuedAsNew",
	30: "EventTypeStartChildWorkflowExecutionInitiated",
	31: "EventTypeStartChildWorkflowExecutionFailed",
	32: "EventTypeChildWorkflowExecutionStarted",
	33: "EventTypeChildWorkflowExecutionCompleted",
	34: "EventTypeChildWorkflowExecutionFailed",
	35: "EventTypeChildWorkflowExecutionCanceled",
	36: "EventTypeChildWorkflowExecutionTimedOut",
	37: "EventTypeChildWorkflowExecutionTerminated",
	38: "EventTypeSignalExternalWorkflowExecutionInitiated",
	39: "EventTypeSignalExternalWorkflowExecutionFailed",
	40: "EventTypeExternalWorkflowExecutionSignaled",
	41: "EventTypeUpsertWorkflowSearchAttributes",
}

var EventType_value = map[string]int32{
	"EventTypeWorkflowExecutionStarted":                        0,
	"EventTypeWorkflowExecutionCompleted":                      1,
	"EventTypeWorkflowExecutionFailed":                         2,
	"EventTypeWorkflowExecutionTimedOut":                       3,
	"EventTypeDecisionTaskScheduled":                           4,
	"EventTypeDecisionTaskStarted":                             5,
	"EventTypeDecisionTaskCompleted":                           6,
	"EventTypeDecisionTaskTimedOut":                            7,
	"EventTypeDecisionTaskFailed":                              8,
	"EventTypeActivityTaskScheduled":                           9,
	"EventTypeActivityTaskStarted":                             10,
	"EventTypeActivityTaskCompleted":                           11,
	"EventTypeActivityTaskFailed":                              12,
	"EventTypeActivityTaskTimedOut":                            13,
	"EventTypeActivityTaskCancelRequested":                     14,
	"EventTypeRequestCancelActivityTaskFailed":                 15,
	"EventTypeActivityTaskCanceled":                            16,
	"EventTypeTimerStarted":                                    17,
	"EventTypeTimerFired":                                      18,
	"EventTypeCancelTimerFailed":                               19,
	"EventTypeTimerCanceled":                                   20,
	"EventTypeWorkflowExecutionCancelRequested":                21,
	"EventTypeWorkflowExecutionCanceled":                       22,
	"EventTypeRequestCancelExternalWorkflowExecutionInitiated": 23,
	"EventTypeRequestCancelExternalWorkflowExecutionFailed":    24,
	"EventTypeExternalWorkflowExecutionCancelRequested":        25,
	"EventTypeMarkerRecorded":                                  26,
	"EventTypeWorkflowExecutionSignaled":                       27,
	"EventTypeWorkflowExecutionTerminated":                     28,
	"EventTypeWorkflowExecutionContinuedAsNew":                 29,
	"EventTypeStartChildWorkflowExecutionInitiated":            30,
	"EventTypeStartChildWorkflowExecutionFailed":               31,
	"EventTypeChildWorkflowExecutionStarted":                   32,
	"EventTypeChildWorkflowExecutionCompleted":                 33,
	"EventTypeChildWorkflowExecutionFailed":                    34,
	"EventTypeChildWorkflowExecutionCanceled":                  35,
	"EventTypeChildWorkflowExecutionTimedOut":                  36,
	"EventTypeChildWorkflowExecutionTerminated":                37,
	"EventTypeSignalExternalWorkflowExecutionInitiated":        38,
	"EventTypeSignalExternalWorkflowExecutionFailed":           39,
	"EventTypeExternalWorkflowExecutionSignaled":               40,
	"EventTypeUpsertWorkflowSearchAttributes":                  41,
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{5}
}

type DecisionTaskFailedCause int32

const (
	DecisionTaskFailedCauseUnhandledDecision                                   DecisionTaskFailedCause = 0
	DecisionTaskFailedCauseBadScheduleActivityAttributes                       DecisionTaskFailedCause = 1
	DecisionTaskFailedCauseBadRequestCancelActivityAttributes                  DecisionTaskFailedCause = 2
	DecisionTaskFailedCauseBadStartTimerAttributes                             DecisionTaskFailedCause = 3
	DecisionTaskFailedCauseBadCancelTimerAttributes                            DecisionTaskFailedCause = 4
	DecisionTaskFailedCauseBadRecordMarkerAttributes                           DecisionTaskFailedCause = 5
	DecisionTaskFailedCauseBadCompleteWorkflowExecutionAttributes              DecisionTaskFailedCause = 6
	DecisionTaskFailedCauseBadFailWorkflowExecutionAttributes                  DecisionTaskFailedCause = 7
	DecisionTaskFailedCauseBadCancelWorkflowExecutionAttributes                DecisionTaskFailedCause = 8
	DecisionTaskFailedCauseBadRequestCancelExternalWorkflowExecutionAttributes DecisionTaskFailedCause = 9
	DecisionTaskFailedCauseBadContinueAsNewAttributes                          DecisionTaskFailedCause = 10
	DecisionTaskFailedCauseStartTimerDuplicateId                               DecisionTaskFailedCause = 11
	DecisionTaskFailedCauseResetStickyTasklist                                 DecisionTaskFailedCause = 12
	DecisionTaskFailedCauseWorkflowWorkerUnhandledFailure                      DecisionTaskFailedCause = 13
	DecisionTaskFailedCauseBadSignalWorkflowExecutionAttributes                DecisionTaskFailedCause = 14
	DecisionTaskFailedCauseBadStartChildExecutionAttributes                    DecisionTaskFailedCause = 15
	DecisionTaskFailedCauseForceCloseDecision                                  DecisionTaskFailedCause = 16
	DecisionTaskFailedCauseFailoverCloseDecision                               DecisionTaskFailedCause = 17
	DecisionTaskFailedCauseBadSignalInputSize                                  DecisionTaskFailedCause = 18
	DecisionTaskFailedCauseResetWorkflow                                       DecisionTaskFailedCause = 19
	DecisionTaskFailedCauseBadBinary                                           DecisionTaskFailedCause = 20
	DecisionTaskFailedCauseScheduleActivityDuplicateId                         DecisionTaskFailedCause = 21
	DecisionTaskFailedCauseBadSearchAttributes                                 DecisionTaskFailedCause = 22
)

var DecisionTaskFailedCause_name = map[int32]string{
	0:  "DecisionTaskFailedCauseUnhandledDecision",
	1:  "DecisionTaskFailedCauseBadScheduleActivityAttributes",
	2:  "DecisionTaskFailedCauseBadRequestCancelActivityAttributes",
	3:  "DecisionTaskFailedCauseBadStartTimerAttributes",
	4:  "DecisionTaskFailedCauseBadCancelTimerAttributes",
	5:  "DecisionTaskFailedCauseBadRecordMarkerAttributes",
	6:  "DecisionTaskFailedCauseBadCompleteWorkflowExecutionAttributes",
	7:  "DecisionTaskFailedCauseBadFailWorkflowExecutionAttributes",
	8:  "DecisionTaskFailedCauseBadCancelWorkflowExecutionAttributes",
	9:  "DecisionTaskFailedCauseBadRequestCancelExternalWorkflowExecutionAttributes",
	10: "DecisionTaskFailedCauseBadContinueAsNewAttributes",
	11: "DecisionTaskFailedCauseStartTimerDuplicateId",
	12: "DecisionTaskFailedCauseResetStickyTasklist",
	13: "DecisionTaskFailedCauseWorkflowWorkerUnhandledFailure",
	14: "DecisionTaskFailedCauseBadSignalWorkflowExecutionAttributes",
	15: "DecisionTaskFailedCauseBadStartChildExecutionAttributes",
	16: "DecisionTaskFailedCauseForceCloseDecision",
	17: "DecisionTaskFailedCauseFailoverCloseDecision",
	18: "DecisionTaskFailedCauseBadSignalInputSize",
	19: "DecisionTaskFailedCauseResetWorkflow",
	20: "DecisionTaskFailedCauseBadBinary",
	21: "DecisionTaskFailedCauseScheduleActivityDuplicateId",
	22: "DecisionTaskFailedCauseBadSearchAttributes",
}

var DecisionTaskFailedCause_value = map[string]int32{
	"DecisionTaskFailedCauseUnhandledDecision":                                   0,
	"DecisionTaskFailedCauseBadScheduleActivityAttributes":                       1,
	"DecisionTaskFailedCauseBadRequestCancelActivityAttributes":                  2,
	"DecisionTaskFailedCauseBadStartTimerAttributes":                             3,
	"DecisionTaskFailedCauseBadCancelTimerAttributes":                            4,
	"DecisionTaskFailedCauseBadRecordMarkerAttributes":                           5,
	"DecisionTaskFailedCauseBadCompleteWorkflowExecutionAttributes":              6,
	"DecisionTaskFailedCauseBadFailWorkflowExecutionAttributes":                  7,
	"DecisionTaskFailedCauseBadCancelWorkflowExecutionAttributes":                8,
	"DecisionTaskFailedCauseBadRequestCancelExternalWorkflowExecutionAttributes": 9,
	"DecisionTaskFailedCauseBadContinueAsNewAttributes":                          10,
	"DecisionTaskFailedCauseStartTimerDuplicateId":                               11,
	"DecisionTaskFailedCauseResetStickyTasklist":                                 12,
	"DecisionTaskFailedCauseWorkflowWorkerUnhandledFailure":                      13,
	"DecisionTaskFailedCauseBadSignalWorkflowExecutionAttributes":                14,
	"DecisionTaskFailedCauseBadStartChildExecutionAttributes":                    15,
	"DecisionTaskFailedCauseForceCloseDecision":                                  16,
	"DecisionTaskFailedCauseFailoverCloseDecision":                               17,
	"DecisionTaskFailedCauseBadSignalInputSize":                                  18,
	"DecisionTaskFailedCauseResetWorkflow":                                       19,
	"DecisionTaskFailedCauseBadBinary":                                           20,
	"DecisionTaskFailedCauseScheduleActivityDuplicateId":                         21,
	"DecisionTaskFailedCauseBadSearchAttributes":                                 22,
}

func (DecisionTaskFailedCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{6}
}

type CancelExternalWorkflowExecutionFailedCause int32

const (
	CancelExternalWorkflowExecutionFailedCauseUnknownExternalWorkflowExecution CancelExternalWorkflowExecutionFailedCause = 0
)

var CancelExternalWorkflowExecutionFailedCause_name = map[int32]string{
	0: "CancelExternalWorkflowExecutionFailedCauseUnknownExternalWorkflowExecution",
}

var CancelExternalWorkflowExecutionFailedCause_value = map[string]int32{
	"CancelExternalWorkflowExecutionFailedCauseUnknownExternalWorkflowExecution": 0,
}

func (CancelExternalWorkflowExecutionFailedCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{7}
}

type SignalExternalWorkflowExecutionFailedCause int32

const (
	SignalExternalWorkflowExecutionFailedCauseUnknownExternalWorkflowExecution SignalExternalWorkflowExecutionFailedCause = 0
)

var SignalExternalWorkflowExecutionFailedCause_name = map[int32]string{
	0: "SignalExternalWorkflowExecutionFailedCauseUnknownExternalWorkflowExecution",
}

var SignalExternalWorkflowExecutionFailedCause_value = map[string]int32{
	"SignalExternalWorkflowExecutionFailedCauseUnknownExternalWorkflowExecution": 0,
}

func (SignalExternalWorkflowExecutionFailedCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{8}
}

type ChildWorkflowExecutionFailedCause int32

const (
	ChildWorkflowExecutionFailedCauseWorkflowAlreadyRunning ChildWorkflowExecutionFailedCause = 0
)

var ChildWorkflowExecutionFailedCause_name = map[int32]string{
	0: "ChildWorkflowExecutionFailedCauseWorkflowAlreadyRunning",
}

var ChildWorkflowExecutionFailedCause_value = map[string]int32{
	"ChildWorkflowExecutionFailedCauseWorkflowAlreadyRunning": 0,
}

func (ChildWorkflowExecutionFailedCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{9}
}

// TODO: Rename to WorkflowExecutionStatus
type WorkflowExecutionCloseStatus int32

const (
	WorkflowExecutionCloseStatusRunning        WorkflowExecutionCloseStatus = 0
	WorkflowExecutionCloseStatusCompleted      WorkflowExecutionCloseStatus = 1
	WorkflowExecutionCloseStatusFailed         WorkflowExecutionCloseStatus = 2
	WorkflowExecutionCloseStatusCanceled       WorkflowExecutionCloseStatus = 3
	WorkflowExecutionCloseStatusTerminated     WorkflowExecutionCloseStatus = 4
	WorkflowExecutionCloseStatusContinuedAsNew WorkflowExecutionCloseStatus = 5
	WorkflowExecutionCloseStatusTimedOut       WorkflowExecutionCloseStatus = 6
)

var WorkflowExecutionCloseStatus_name = map[int32]string{
	0: "WorkflowExecutionCloseStatusRunning",
	1: "WorkflowExecutionCloseStatusCompleted",
	2: "WorkflowExecutionCloseStatusFailed",
	3: "WorkflowExecutionCloseStatusCanceled",
	4: "WorkflowExecutionCloseStatusTerminated",
	5: "WorkflowExecutionCloseStatusContinuedAsNew",
	6: "WorkflowExecutionCloseStatusTimedOut",
}

var WorkflowExecutionCloseStatus_value = map[string]int32{
	"WorkflowExecutionCloseStatusRunning":        0,
	"WorkflowExecutionCloseStatusCompleted":      1,
	"WorkflowExecutionCloseStatusFailed":         2,
	"WorkflowExecutionCloseStatusCanceled":       3,
	"WorkflowExecutionCloseStatusTerminated":     4,
	"WorkflowExecutionCloseStatusContinuedAsNew": 5,
	"WorkflowExecutionCloseStatusTimedOut":       6,
}

func (WorkflowExecutionCloseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{10}
}

type QueryTaskCompletedType int32

const (
	QueryTaskCompletedTypeCompleted QueryTaskCompletedType = 0
	QueryTaskCompletedTypeFailed    QueryTaskCompletedType = 1
)

var QueryTaskCompletedType_name = map[int32]string{
	0: "QueryTaskCompletedTypeCompleted",
	1: "QueryTaskCompletedTypeFailed",
}

var QueryTaskCompletedType_value = map[string]int32{
	"QueryTaskCompletedTypeCompleted": 0,
	"QueryTaskCompletedTypeFailed":    1,
}

func (QueryTaskCompletedType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{11}
}

type QueryResultType int32

const (
	QueryResultTypeAnswered QueryResultType = 0
	QueryResultTypeFailed   QueryResultType = 1
)

var QueryResultType_name = map[int32]string{
	0: "QueryResultTypeAnswered",
	1: "QueryResultTypeFailed",
}

var QueryResultType_value = map[string]int32{
	"QueryResultTypeAnswered": 0,
	"QueryResultTypeFailed":   1,
}

func (QueryResultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{12}
}

type PendingActivityState int32

const (
	PendingActivityStateScheduled       PendingActivityState = 0
	PendingActivityStateStarted         PendingActivityState = 1
	PendingActivityStateCancelRequested PendingActivityState = 2
)

var PendingActivityState_name = map[int32]string{
	0: "PendingActivityStateScheduled",
	1: "PendingActivityStateStarted",
	2: "PendingActivityStateCancelRequested",
}

var PendingActivityState_value = map[string]int32{
	"PendingActivityStateScheduled":       0,
	"PendingActivityStateStarted":         1,
	"PendingActivityStateCancelRequested": 2,
}

func (PendingActivityState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{13}
}

type HistoryEventFilterType int32

const (
	HistoryEventFilterTypeAllEvent   HistoryEventFilterType = 0
	HistoryEventFilterTypeCloseEvent HistoryEventFilterType = 1
)

var HistoryEventFilterType_name = map[int32]string{
	0: "HistoryEventFilterTypeAllEvent",
	1: "HistoryEventFilterTypeCloseEvent",
}

var HistoryEventFilterType_value = map[string]int32{
	"HistoryEventFilterTypeAllEvent":   0,
	"HistoryEventFilterTypeCloseEvent": 1,
}

func (HistoryEventFilterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{14}
}

type TaskListKind int32

const (
	TaskListKindNormal TaskListKind = 0
	TaskListKindSticky TaskListKind = 1
)

var TaskListKind_name = map[int32]string{
	0: "TaskListKindNormal",
	1: "TaskListKindSticky",
}

var TaskListKind_value = map[string]int32{
	"TaskListKindNormal": 0,
	"TaskListKindSticky": 1,
}

func (TaskListKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{15}
}

type ArchivalStatus int32

const (
	ArchivalStatusDefault  ArchivalStatus = 0
	ArchivalStatusDisabled ArchivalStatus = 1
	ArchivalStatusEnabled  ArchivalStatus = 2
)

var ArchivalStatus_name = map[int32]string{
	0: "ArchivalStatusDefault",
	1: "ArchivalStatusDisabled",
	2: "ArchivalStatusEnabled",
}

var ArchivalStatus_value = map[string]int32{
	"ArchivalStatusDefault":  0,
	"ArchivalStatusDisabled": 1,
	"ArchivalStatusEnabled":  2,
}

func (ArchivalStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{16}
}

type IndexedValueType int32

const (
	IndexedValueTypeString   IndexedValueType = 0
	IndexedValueTypeKeyword  IndexedValueType = 1
	IndexedValueTypeInt      IndexedValueType = 2
	IndexedValueTypeDouble   IndexedValueType = 3
	IndexedValueTypeBool     IndexedValueType = 4
	IndexedValueTypeDatetime IndexedValueType = 5
)

var IndexedValueType_name = map[int32]string{
	0: "IndexedValueTypeString",
	1: "IndexedValueTypeKeyword",
	2: "IndexedValueTypeInt",
	3: "IndexedValueTypeDouble",
	4: "IndexedValueTypeBool",
	5: "IndexedValueTypeDatetime",
}

var IndexedValueType_value = map[string]int32{
	"IndexedValueTypeString":   0,
	"IndexedValueTypeKeyword":  1,
	"IndexedValueTypeInt":      2,
	"IndexedValueTypeDouble":   3,
	"IndexedValueTypeBool":     4,
	"IndexedValueTypeDatetime": 5,
}

func (IndexedValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{17}
}

type EncodingType int32

const (
	EncodingTypeProto3   EncodingType = 0
	EncodingTypeJSON     EncodingType = 1
	EncodingTypeThriftRW EncodingType = 2
)

var EncodingType_name = map[int32]string{
	0: "EncodingTypeProto3",
	1: "EncodingTypeJSON",
	2: "EncodingTypeThriftRW",
}

var EncodingType_value = map[string]int32{
	"EncodingTypeProto3":   0,
	"EncodingTypeJSON":     1,
	"EncodingTypeThriftRW": 2,
}

func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{18}
}

type QueryRejectCondition int32

const (
	// None indicates that query should not be rejected.
	QueryRejectConditionNone QueryRejectCondition = 0
	// NotOpen indicates that query should be rejected if workflow is not open.
	QueryRejectConditionNotOpen QueryRejectCondition = 1
	// NotCompletedCleanly indicates that query should be rejected if workflow did not complete cleanly.
	QueryRejectConditionNotCompletedCleanly QueryRejectCondition = 2
)

var QueryRejectCondition_name = map[int32]string{
	0: "QueryRejectConditionNone",
	1: "QueryRejectConditionNotOpen",
	2: "QueryRejectConditionNotCompletedCleanly",
}

var QueryRejectCondition_value = map[string]int32{
	"QueryRejectConditionNone":                0,
	"QueryRejectConditionNotOpen":             1,
	"QueryRejectConditionNotCompletedCleanly": 2,
}

func (QueryRejectCondition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{19}
}

type QueryConsistencyLevel int32

const (
	// Eventual indicates that query should be eventually consistent.
	QueryConsistencyLevelEventual QueryConsistencyLevel = 0
	// Strong indicates that any events that came before query should be reflected in workflow state before running query.
	QueryConsistencyLevelStrong QueryConsistencyLevel = 1
)

var QueryConsistencyLevel_name = map[int32]string{
	0: "QueryConsistencyLevelEventual",
	1: "QueryConsistencyLevelStrong",
}

var QueryConsistencyLevel_value = map[string]int32{
	"QueryConsistencyLevelEventual": 0,
	"QueryConsistencyLevelStrong":   1,
}

func (QueryConsistencyLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{20}
}

type ContinueAsNewInitiator int32

const (
	ContinueAsNewInitiatorDecider      ContinueAsNewInitiator = 0
	ContinueAsNewInitiatorRetryPolicy  ContinueAsNewInitiator = 1
	ContinueAsNewInitiatorCronSchedule ContinueAsNewInitiator = 2
)

var ContinueAsNewInitiator_name = map[int32]string{
	0: "ContinueAsNewInitiatorDecider",
	1: "ContinueAsNewInitiatorRetryPolicy",
	2: "ContinueAsNewInitiatorCronSchedule",
}

var ContinueAsNewInitiator_value = map[string]int32{
	"ContinueAsNewInitiatorDecider":      0,
	"ContinueAsNewInitiatorRetryPolicy":  1,
	"ContinueAsNewInitiatorCronSchedule": 2,
}

func (ContinueAsNewInitiator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{21}
}

type TaskListType int32

const (
	// Decision type of task list.
	TaskListTypeDecision TaskListType = 0
	// Activity type of task list.
	TaskListTypeActivity TaskListType = 1
)

var TaskListType_name = map[int32]string{
	0: "TaskListTypeDecision",
	1: "TaskListTypeActivity",
}

var TaskListType_value = map[string]int32{
	"TaskListTypeDecision": 0,
	"TaskListTypeActivity": 1,
}

func (TaskListType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{22}
}

type ReplicationTaskType int32

const (
	ReplicationTaskTypeDomain          ReplicationTaskType = 0
	ReplicationTaskTypeHistory         ReplicationTaskType = 1
	ReplicationTaskTypeSyncShardStatus ReplicationTaskType = 2
	ReplicationTaskTypeSyncActivity    ReplicationTaskType = 3
	ReplicationTaskTypeHistoryMetadata ReplicationTaskType = 4
	ReplicationTaskTypeHistoryV2       ReplicationTaskType = 5
)

var ReplicationTaskType_name = map[int32]string{
	0: "ReplicationTaskTypeDomain",
	1: "ReplicationTaskTypeHistory",
	2: "ReplicationTaskTypeSyncShardStatus",
	3: "ReplicationTaskTypeSyncActivity",
	4: "ReplicationTaskTypeHistoryMetadata",
	5: "ReplicationTaskTypeHistoryV2",
}

var ReplicationTaskType_value = map[string]int32{
	"ReplicationTaskTypeDomain":          0,
	"ReplicationTaskTypeHistory":         1,
	"ReplicationTaskTypeSyncShardStatus": 2,
	"ReplicationTaskTypeSyncActivity":    3,
	"ReplicationTaskTypeHistoryMetadata": 4,
	"ReplicationTaskTypeHistoryV2":       5,
}

func (ReplicationTaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{23}
}

type DomainOperation int32

const (
	DomainOperationCreate DomainOperation = 0
	DomainOperationUpdate DomainOperation = 1
)

var DomainOperation_name = map[int32]string{
	0: "DomainOperationCreate",
	1: "DomainOperationUpdate",
}

var DomainOperation_value = map[string]int32{
	"DomainOperationCreate": 0,
	"DomainOperationUpdate": 1,
}

func (DomainOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{24}
}

type MessageType int32

const (
	MessageTypeIndex  MessageType = 0
	MessageTypeDelete MessageType = 1
)

var MessageType_name = map[int32]string{
	0: "MessageTypeIndex",
	1: "MessageTypeDelete",
}

var MessageType_value = map[string]int32{
	"MessageTypeIndex":  0,
	"MessageTypeDelete": 1,
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{25}
}

type FieldType int32

const (
	FieldTypeString FieldType = 0
	FieldTypeInt    FieldType = 1
	FieldTypeBool   FieldType = 2
	FieldTypeBinary FieldType = 3
)

var FieldType_name = map[int32]string{
	0: "FieldTypeString",
	1: "FieldTypeInt",
	2: "FieldTypeBool",
	3: "FieldTypeBinary",
}

var FieldType_value = map[string]int32{
	"FieldTypeString": 0,
	"FieldTypeInt":    1,
	"FieldTypeBool":   2,
	"FieldTypeBinary": 3,
}

func (FieldType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{26}
}

type DLQType int32

const (
	DLQTypeReplication DLQType = 0
	DLQTypeDomain      DLQType = 1
)

var DLQType_name = map[int32]string{
	0: "DLQTypeReplication",
	1: "DLQTypeDomain",
}

var DLQType_value = map[string]int32{
	"DLQTypeReplication": 0,
	"DLQTypeDomain":      1,
}

func (DLQType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d309503070cc86c, []int{27}
}

func init() {
	proto.RegisterEnum("enums.WorkflowIdReusePolicy", WorkflowIdReusePolicy_name, WorkflowIdReusePolicy_value)
	proto.RegisterEnum("enums.DomainStatus", DomainStatus_name, DomainStatus_value)
	proto.RegisterEnum("enums.TimeoutType", TimeoutType_name, TimeoutType_value)
	proto.RegisterEnum("enums.ParentClosePolicy", ParentClosePolicy_name, ParentClosePolicy_value)
	proto.RegisterEnum("enums.DecisionType", DecisionType_name, DecisionType_value)
	proto.RegisterEnum("enums.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("enums.DecisionTaskFailedCause", DecisionTaskFailedCause_name, DecisionTaskFailedCause_value)
	proto.RegisterEnum("enums.CancelExternalWorkflowExecutionFailedCause", CancelExternalWorkflowExecutionFailedCause_name, CancelExternalWorkflowExecutionFailedCause_value)
	proto.RegisterEnum("enums.SignalExternalWorkflowExecutionFailedCause", SignalExternalWorkflowExecutionFailedCause_name, SignalExternalWorkflowExecutionFailedCause_value)
	proto.RegisterEnum("enums.ChildWorkflowExecutionFailedCause", ChildWorkflowExecutionFailedCause_name, ChildWorkflowExecutionFailedCause_value)
	proto.RegisterEnum("enums.WorkflowExecutionCloseStatus", WorkflowExecutionCloseStatus_name, WorkflowExecutionCloseStatus_value)
	proto.RegisterEnum("enums.QueryTaskCompletedType", QueryTaskCompletedType_name, QueryTaskCompletedType_value)
	proto.RegisterEnum("enums.QueryResultType", QueryResultType_name, QueryResultType_value)
	proto.RegisterEnum("enums.PendingActivityState", PendingActivityState_name, PendingActivityState_value)
	proto.RegisterEnum("enums.HistoryEventFilterType", HistoryEventFilterType_name, HistoryEventFilterType_value)
	proto.RegisterEnum("enums.TaskListKind", TaskListKind_name, TaskListKind_value)
	proto.RegisterEnum("enums.ArchivalStatus", ArchivalStatus_name, ArchivalStatus_value)
	proto.RegisterEnum("enums.IndexedValueType", IndexedValueType_name, IndexedValueType_value)
	proto.RegisterEnum("enums.EncodingType", EncodingType_name, EncodingType_value)
	proto.RegisterEnum("enums.QueryRejectCondition", QueryRejectCondition_name, QueryRejectCondition_value)
	proto.RegisterEnum("enums.QueryConsistencyLevel", QueryConsistencyLevel_name, QueryConsistencyLevel_value)
	proto.RegisterEnum("enums.ContinueAsNewInitiator", ContinueAsNewInitiator_name, ContinueAsNewInitiator_value)
	proto.RegisterEnum("enums.TaskListType", TaskListType_name, TaskListType_value)
	proto.RegisterEnum("enums.ReplicationTaskType", ReplicationTaskType_name, ReplicationTaskType_value)
	proto.RegisterEnum("enums.DomainOperation", DomainOperation_name, DomainOperation_value)
	proto.RegisterEnum("enums.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("enums.FieldType", FieldType_name, FieldType_value)
	proto.RegisterEnum("enums.DLQType", DLQType_name, DLQType_value)
}

func init() { proto.RegisterFile("enums/enums.proto", fileDescriptor_4d309503070cc86c) }

var fileDescriptor_4d309503070cc86c = []byte{
	// 2029 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x59, 0x5f, 0x53, 0x1c, 0xc7,
	0x11, 0xdf, 0x3d, 0x40, 0xb2, 0x5a, 0x48, 0x1a, 0x46, 0x80, 0x40, 0x42, 0x27, 0x01, 0x42, 0x7f,
	0xd6, 0x16, 0xb2, 0x25, 0x39, 0xb6, 0xa3, 0x38, 0xa9, 0xe3, 0x80, 0x18, 0x59, 0x02, 0x7c, 0x87,
	0xe4, 0x2a, 0xe7, 0xc1, 0x59, 0x6e, 0x5b, 0x30, 0x66, 0x99, 0xbd, 0xcc, 0xce, 0x82, 0x2e, 0x95,
	0x87, 0x54, 0x92, 0xa7, 0x54, 0x1e, 0xf2, 0x05, 0xf2, 0x9c, 0x7c, 0x84, 0x7c, 0x84, 0x54, 0xaa,
	0x52, 0xa5, 0x47, 0x3f, 0x46, 0xe8, 0x25, 0x55, 0x79, 0xf1, 0x47, 0x48, 0xcd, 0xfe, 0xbb, 0xd9,
	0xbd, 0xdd, 0xe5, 0xf2, 0x02, 0x37, 0xd3, 0xbf, 0xee, 0xe9, 0xee, 0xe9, 0xee, 0xe9, 0x99, 0x85,
	0x09, 0xe4, 0xc1, 0xa1, 0xff, 0x20, 0xfc, 0xbb, 0xdc, 0x15, 0x9e, 0xf4, 0xe8, 0x58, 0x38, 0xb0,
	0xfe, 0x62, 0xc2, 0xd4, 0xd7, 0x9e, 0x38, 0x78, 0xe5, 0x7a, 0xc7, 0x1b, 0x4e, 0x0b, 0x03, 0x1f,
	0xb7, 0x3d, 0x97, 0x75, 0x7a, 0xf4, 0x0e, 0x2c, 0x16, 0x12, 0x1a, 0xae, 0xeb, 0x1d, 0xaf, 0x06,
	0x5d, 0x97, 0x75, 0x6c, 0x89, 0xc4, 0xa0, 0x1f, 0xc1, 0xfd, 0x21, 0x80, 0xeb, 0x36, 0x73, 0xd1,
	0xd9, 0xe2, 0x6e, 0x8f, 0x98, 0xf4, 0x2e, 0xdc, 0x2a, 0x64, 0x69, 0xe1, 0x77, 0xd8, 0x91, 0x7d,
	0xe1, 0x35, 0xeb, 0x5b, 0x18, 0x5f, 0xf5, 0x0e, 0x6d, 0xc6, 0xdb, 0xd2, 0x96, 0x81, 0x4f, 0xaf,
	0xc2, 0xb4, 0x3e, 0x6e, 0xe1, 0x1e, 0xf3, 0x25, 0x0a, 0x74, 0x88, 0x91, 0xa7, 0xad, 0x62, 0x57,
	0xa0, 0x12, 0xe3, 0x10, 0x93, 0x5e, 0x81, 0xcb, 0x59, 0x9a, 0x8b, 0x8a, 0x50, 0xb3, 0xfe, 0x60,
	0xc2, 0xf9, 0x1d, 0x76, 0x88, 0x5e, 0x20, 0x77, 0x7a, 0x5d, 0xa4, 0xd7, 0xe0, 0x8a, 0x36, 0x6c,
	0x4b, 0x5b, 0xc8, 0x1d, 0xaf, 0xe9, 0x7a, 0xbe, 0x32, 0xb5, 0x0e, 0x57, 0x75, 0x62, 0x67, 0x1f,
	0x9d, 0xc0, 0xc5, 0x1d, 0x2f, 0x84, 0x11, 0xb3, 0x94, 0x1e, 0xf1, 0xd7, 0xe8, 0x0c, 0x4c, 0x6a,
	0xf4, 0x2f, 0xd0, 0x16, 0x72, 0x17, 0x6d, 0x49, 0x46, 0xac, 0x00, 0x26, 0xb6, 0x6d, 0x81, 0x5c,
	0x86, 0xd0, 0x78, 0x0b, 0xe6, 0x60, 0x66, 0x60, 0xb2, 0xb1, 0x6b, 0x73, 0xc7, 0xe3, 0xc4, 0xa0,
	0x0b, 0x50, 0x1f, 0xa0, 0xb6, 0xf0, 0x57, 0x01, 0xfa, 0xb2, 0x69, 0xf3, 0x0e, 0xba, 0x91, 0x42,
	0x03, 0x98, 0x1d, 0x14, 0x87, 0x8c, 0x47, 0xee, 0xfd, 0xeb, 0x28, 0x8c, 0xaf, 0x62, 0x87, 0xf9,
	0xcc, 0xe3, 0xa1, 0xf9, 0xb7, 0xe0, 0xa6, 0x3e, 0x4e, 0x4c, 0x68, 0x74, 0x24, 0x3b, 0x62, 0xb2,
	0xb7, 0x63, 0xfb, 0x07, 0xc4, 0xa0, 0xf7, 0x60, 0x49, 0x47, 0x65, 0x56, 0xcd, 0x40, 0xcd, 0x70,
	0x53, 0x74, 0x81, 0xa1, 0x43, 0xd9, 0x21, 0x0a, 0x52, 0xcb, 0x8b, 0x69, 0x7a, 0x87, 0x5d, 0xb5,
	0x2d, 0x49, 0x68, 0xac, 0xbd, 0xc6, 0x4e, 0x20, 0x99, 0xc7, 0xc9, 0x08, 0x5d, 0x82, 0x79, 0x1d,
	0xaa, 0xa2, 0x69, 0x10, 0x36, 0xaa, 0x76, 0x2f, 0x23, 0x31, 0xd4, 0x28, 0x5a, 0x6e, 0x4c, 0x45,
	0xf4, 0x20, 0x71, 0x50, 0xca, 0x19, 0xfa, 0x23, 0x78, 0x58, 0x6a, 0xde, 0xda, 0x6b, 0x89, 0x82,
	0xdb, 0x05, 0x7c, 0x67, 0xd5, 0x7e, 0x65, 0xf9, 0x3a, 0x9e, 0x70, 0x9e, 0xdb, 0xe2, 0x00, 0x05,
	0x79, 0x8f, 0x2e, 0x83, 0x95, 0xb5, 0x96, 0x4b, 0xc6, 0x03, 0x6c, 0xf8, 0x9b, 0x78, 0x3c, 0x28,
	0xed, 0x1c, 0x7d, 0x1f, 0xee, 0x0c, 0x78, 0xae, 0xb9, 0xcf, 0x5c, 0x67, 0x10, 0x0c, 0xf4, 0x01,
	0xbc, 0x9f, 0x01, 0xb3, 0x3d, 0x6e, 0x57, 0xe8, 0x7a, 0x3e, 0xaf, 0xcd, 0x8b, 0xae, 0x8f, 0x42,
	0x26, 0xc0, 0x36, 0xda, 0xa2, 0xb3, 0xdf, 0x90, 0x52, 0xb0, 0xdd, 0x40, 0xa2, 0x4f, 0xc6, 0xad,
	0x7f, 0x5d, 0x80, 0x73, 0x6b, 0x47, 0xc8, 0xa3, 0x2c, 0x59, 0x82, 0xf9, 0x74, 0x30, 0x20, 0x3d,
	0xd4, 0x34, 0xcc, 0xc8, 0x3b, 0xb0, 0x58, 0x0e, 0x4b, 0xb6, 0x5b, 0xa5, 0xe7, 0x2d, 0xb8, 0x59,
	0x0e, 0x8c, 0x4a, 0x07, 0xa9, 0xd1, 0xdb, 0xb0, 0x50, 0x8e, 0x52, 0xbb, 0xec, 0x6c, 0x05, 0x92,
	0x8c, 0xa8, 0xcc, 0x48, 0x71, 0xa9, 0x91, 0xb6, 0x7f, 0x90, 0x44, 0xb3, 0x43, 0x46, 0xe9, 0x4d,
	0x98, 0x2b, 0xc6, 0xc4, 0xca, 0x8f, 0x95, 0x4a, 0xe9, 0xeb, 0x7d, 0x86, 0xce, 0xc3, 0xf5, 0x42,
	0x4c, 0xaa, 0xcc, 0x59, 0x7a, 0x03, 0xae, 0x15, 0x42, 0x62, 0xab, 0xde, 0xcb, 0xac, 0xa3, 0x27,
	0x4f, 0x5f, 0xdb, 0x73, 0x19, 0x6d, 0x33, 0x98, 0x58, 0x5b, 0x28, 0x95, 0xd2, 0xd7, 0xf6, 0x7c,
	0x46, 0x15, 0x1d, 0x13, 0xab, 0x32, 0x9e, 0x31, 0x47, 0x07, 0xa4, 0xe6, 0x5c, 0x50, 0xa5, 0xbb,
	0x78, 0x9d, 0x30, 0x3b, 0xe2, 0x54, 0x41, 0x87, 0x5c, 0xa4, 0x1f, 0xc0, 0xdd, 0x14, 0x59, 0x5a,
	0x21, 0xe2, 0xa5, 0x2f, 0x95, 0x2e, 0x1d, 0xb1, 0xa0, 0x43, 0x08, 0x9d, 0x85, 0xa9, 0x14, 0x12,
	0xe6, 0x74, 0x62, 0xfd, 0x84, 0x2a, 0xef, 0x59, 0xd2, 0x3a, 0x53, 0x67, 0x02, 0x55, 0x05, 0x30,
	0x25, 0x68, 0xd5, 0x20, 0x5e, 0xf6, 0xb2, 0x2a, 0x4f, 0x59, 0xc6, 0x74, 0xbd, 0x49, 0x7a, 0x1f,
	0xee, 0x55, 0x44, 0x6f, 0xce, 0xde, 0xa9, 0xea, 0xe8, 0x4c, 0xc5, 0x4e, 0xd3, 0x9f, 0xc0, 0xa7,
	0xc5, 0x7e, 0x29, 0x4d, 0xd7, 0x0d, 0xce, 0x24, 0x0b, 0x0f, 0xb2, 0x2b, 0xf4, 0x33, 0xf8, 0xf8,
	0xff, 0xe4, 0x8e, 0x6d, 0x9d, 0xa1, 0x1f, 0xc3, 0x47, 0x29, 0x6b, 0x29, 0x3a, 0x6f, 0xd7, 0xac,
	0xaa, 0xa9, 0x29, 0x5b, 0x54, 0xcc, 0xa2, 0xc2, 0x86, 0x0e, 0xb9, 0x5a, 0x6d, 0x74, 0x54, 0x85,
	0xd0, 0x21, 0xd7, 0x32, 0x61, 0x33, 0x98, 0xba, 0xc9, 0x89, 0xe4, 0x90, 0xb9, 0x4c, 0xd8, 0x14,
	0xd4, 0x8c, 0xa8, 0x68, 0x3a, 0x61, 0xd5, 0x24, 0xd7, 0x55, 0xf3, 0x91, 0xa2, 0x2b, 0x2a, 0x64,
	0xdf, 0x83, 0x75, 0x55, 0xf9, 0x86, 0x61, 0x89, 0xdd, 0x76, 0x83, 0x5a, 0x70, 0xbb, 0x1f, 0x42,
	0x85, 0xd0, 0x24, 0x0e, 0x6f, 0x66, 0x94, 0x2f, 0xc6, 0xf6, 0xf3, 0x71, 0x5e, 0x9d, 0x7f, 0xa7,
	0xa0, 0x63, 0x25, 0x16, 0xd4, 0x61, 0x70, 0x9a, 0xe0, 0x24, 0xc2, 0x16, 0x87, 0x00, 0xa7, 0x09,
	0x7d, 0x2b, 0x13, 0xe5, 0x25, 0xe0, 0xfe, 0xf6, 0x2c, 0x65, 0x82, 0xe8, 0x94, 0x53, 0xa6, 0xef,
	0xf4, 0xdb, 0xf4, 0x21, 0x2c, 0x0f, 0xcb, 0x16, 0xdb, 0x7c, 0x27, 0xb3, 0x51, 0xa5, 0xe8, 0x34,
	0xc6, 0xee, 0x66, 0xcc, 0x3e, 0xe5, 0x3c, 0xbb, 0x67, 0xfd, 0x09, 0xb4, 0x56, 0x21, 0x2d, 0x44,
	0x4d, 0x3b, 0xf0, 0x51, 0xed, 0x62, 0x09, 0xe9, 0x05, 0xdf, 0xb7, 0xb9, 0xe3, 0xa2, 0x93, 0xd0,
	0x89, 0x41, 0x3f, 0x85, 0xc7, 0x25, 0xe8, 0x15, 0xdb, 0xc9, 0x37, 0x50, 0x9a, 0x0e, 0x26, 0xfd,
	0x1c, 0x3e, 0x2b, 0xe7, 0x2c, 0x2c, 0x99, 0x1a, 0x7b, 0x4d, 0xf9, 0xb4, 0x62, 0xe1, 0xb4, 0xd1,
	0xd2, 0x78, 0x46, 0xe8, 0x23, 0x78, 0x50, 0xce, 0xa3, 0x15, 0x48, 0x8d, 0x69, 0x94, 0x3e, 0x86,
	0x0f, 0xab, 0xf4, 0xec, 0x77, 0x39, 0x1a, 0xd7, 0x18, 0x6d, 0xc0, 0xe7, 0x15, 0x4b, 0x95, 0xf5,
	0x7a, 0x9a, 0x88, 0x33, 0xd5, 0x0e, 0x2a, 0xec, 0x01, 0x35, 0xf6, 0xb3, 0xf4, 0x67, 0xf0, 0xe4,
	0x34, 0x63, 0xab, 0x04, 0xbc, 0x47, 0x37, 0xe1, 0xe9, 0x90, 0x1b, 0x54, 0x1a, 0x9f, 0x9a, 0xbc,
	0x73, 0x2a, 0x79, 0xaa, 0x5c, 0xa2, 0x35, 0x84, 0x1a, 0x1b, 0xd0, 0x0f, 0xe1, 0x83, 0x12, 0xb6,
	0xfe, 0x2e, 0xa7, 0x97, 0xa6, 0x0d, 0x27, 0xd7, 0xdd, 0x65, 0x39, 0x5a, 0xe8, 0xa3, 0x6c, 0x4b,
	0xd6, 0x39, 0x08, 0x8f, 0x57, 0x97, 0xf9, 0x92, 0x8c, 0xab, 0x53, 0xa5, 0x04, 0x9f, 0x18, 0xa4,
	0xfe, 0xa3, 0x48, 0xe3, 0x5f, 0x21, 0x02, 0x81, 0xe4, 0x42, 0xb5, 0x93, 0xa3, 0xec, 0xac, 0x72,
	0xca, 0x45, 0xfa, 0x04, 0x3e, 0x39, 0x25, 0x8c, 0xc3, 0xb2, 0x54, 0xc4, 0x7c, 0x49, 0x55, 0xaf,
	0x12, 0xe6, 0x75, 0x4f, 0x74, 0x30, 0xbc, 0xf6, 0xa4, 0xb9, 0x4a, 0x2a, 0x3c, 0xa9, 0x7e, 0x7a,
	0x47, 0x28, 0xb2, 0x1c, 0x13, 0x15, 0x0b, 0xa4, 0xe6, 0x6d, 0xf0, 0x6e, 0x20, 0xdb, 0xec, 0xd7,
	0x48, 0xa8, 0x3a, 0xe7, 0xaa, 0x1c, 0x9f, 0x78, 0x82, 0x5c, 0xce, 0xdc, 0xb4, 0x06, 0x04, 0xaf,
	0x30, 0x6e, 0x8b, 0x1e, 0x99, 0xcc, 0x5c, 0x45, 0x72, 0x5b, 0x9f, 0xab, 0x2c, 0x7a, 0x00, 0x4c,
	0x55, 0x04, 0x80, 0x52, 0x3b, 0x5f, 0x0e, 0xa7, 0xad, 0xdf, 0x80, 0x35, 0x54, 0x1b, 0x11, 0x15,
	0xc8, 0x4d, 0x78, 0x3a, 0x3c, 0xfa, 0x05, 0x3f, 0xe0, 0xde, 0x31, 0x2f, 0xbf, 0x8c, 0x18, 0x6a,
	0xf5, 0xa1, 0x0e, 0x85, 0x74, 0xf5, 0xe1, 0xd1, 0x43, 0xac, 0xfe, 0x4b, 0x98, 0xaf, 0x3a, 0x7d,
	0xa3, 0x45, 0x9f, 0xc0, 0x27, 0xa7, 0x82, 0x12, 0x5a, 0xc3, 0x15, 0x68, 0x3b, 0xbd, 0x56, 0xc0,
	0x39, 0xe3, 0x7b, 0xc4, 0xb0, 0xfe, 0x59, 0x83, 0xb9, 0xc1, 0x03, 0x5b, 0x45, 0x5a, 0xfc, 0xac,
	0xa1, 0x3d, 0xb6, 0x14, 0xd1, 0x53, 0x49, 0xaa, 0x65, 0xa8, 0x02, 0xea, 0x77, 0xaa, 0xdb, 0xb0,
	0x50, 0x05, 0x4d, 0x6f, 0x55, 0xda, 0x63, 0x4c, 0xa1, 0xc8, 0xa4, 0xaf, 0x18, 0x51, 0x9d, 0x50,
	0x15, 0x52, 0xeb, 0x13, 0x46, 0x55, 0x00, 0x56, 0x2b, 0x9a, 0x69, 0xe4, 0xc6, 0x4e, 0xd3, 0x22,
	0x6d, 0x58, 0xce, 0x58, 0xdf, 0xc2, 0xf4, 0x57, 0x01, 0x8a, 0xec, 0xed, 0x26, 0xbc, 0x95, 0x2e,
	0xc2, 0x8d, 0x62, 0x4a, 0xdf, 0x2d, 0x86, 0xba, 0x4a, 0x15, 0x83, 0x62, 0x87, 0x98, 0xd6, 0x06,
	0x5c, 0x0a, 0x11, 0x2d, 0xf4, 0x03, 0x37, 0x7d, 0x15, 0xca, 0x4d, 0x35, 0xb8, 0x7f, 0x1c, 0xbf,
	0x3b, 0xcd, 0xc2, 0x54, 0x8e, 0x98, 0x8a, 0xfa, 0xbd, 0x09, 0x93, 0xdb, 0xc8, 0x1d, 0xc6, 0xf7,
	0x92, 0x3c, 0x55, 0xf6, 0xa0, 0xba, 0xee, 0x14, 0xcd, 0xf7, 0xef, 0x7c, 0x86, 0xba, 0xad, 0x15,
	0x42, 0xe2, 0x66, 0xd3, 0x54, 0x41, 0x53, 0x04, 0xc8, 0x77, 0xf0, 0x35, 0x6b, 0x17, 0xa6, 0xbf,
	0x60, 0xbe, 0xf4, 0x44, 0x2f, 0xec, 0x8f, 0xd6, 0x99, 0x2b, 0x51, 0x84, 0x76, 0x2d, 0x40, 0xbd,
	0x98, 0xd2, 0x70, 0xdd, 0x70, 0x86, 0x18, 0xaa, 0x50, 0x15, 0x63, 0xc2, 0xed, 0x89, 0x50, 0xa6,
	0xf5, 0x53, 0x18, 0x57, 0x1e, 0x7d, 0xc6, 0x7c, 0xf9, 0x25, 0xe3, 0x0e, 0x9d, 0x06, 0xaa, 0x8f,
	0x37, 0x3d, 0x71, 0x68, 0xbb, 0xc4, 0xc8, 0xcf, 0x47, 0x27, 0x11, 0x31, 0xad, 0x5d, 0xb8, 0xd8,
	0x10, 0x9d, 0x7d, 0x76, 0x64, 0xbb, 0x71, 0x4e, 0xcc, 0xc2, 0x54, 0x76, 0x66, 0x15, 0x5f, 0xd9,
	0x81, 0x2b, 0xa3, 0x97, 0xbe, 0x1c, 0x89, 0xf9, 0xf6, 0x6e, 0xe8, 0xf2, 0x41, 0xb6, 0x35, 0x1e,
	0x91, 0x6a, 0xd6, 0xdf, 0x4d, 0x20, 0x1b, 0xdc, 0xc1, 0xd7, 0xe8, 0xbc, 0xb4, 0xdd, 0x00, 0x43,
	0x17, 0x5c, 0x85, 0xe9, 0xfc, 0x5c, 0x5b, 0x8a, 0x28, 0xdb, 0xae, 0xc1, 0x95, 0x3c, 0xed, 0x4b,
	0xec, 0x1d, 0x7b, 0x22, 0x7e, 0x52, 0xcc, 0x13, 0x37, 0xb8, 0x24, 0xb5, 0x22, 0x89, 0xab, 0x5e,
	0xb0, 0xeb, 0x22, 0x19, 0xa1, 0x33, 0x30, 0x99, 0xa7, 0xad, 0x78, 0x9e, 0x4b, 0x46, 0xe9, 0x1c,
	0xcc, 0x0c, 0x70, 0xd9, 0x12, 0x25, 0x3b, 0x44, 0x32, 0x66, 0xbd, 0x84, 0xf1, 0x35, 0xde, 0xf1,
	0xd4, 0x66, 0x87, 0x5a, 0x4f, 0x03, 0xd5, 0xc7, 0xdb, 0xc2, 0x93, 0xde, 0x23, 0x62, 0xd0, 0x49,
	0x20, 0xfa, 0xfc, 0xd3, 0xf6, 0xd6, 0x26, 0x31, 0xd5, 0xaa, 0xfa, 0xec, 0xce, 0xbe, 0x60, 0xaf,
	0x64, 0xeb, 0x6b, 0x52, 0xb3, 0x7e, 0x67, 0xc2, 0x64, 0x1c, 0xbc, 0xdf, 0x61, 0x47, 0x36, 0x3d,
	0xee, 0x30, 0x95, 0x7a, 0x4a, 0x9d, 0xa2, 0xf9, 0x4d, 0x8f, 0x63, 0x14, 0x9b, 0xc5, 0x54, 0xb9,
	0xd5, 0x45, 0x4e, 0x4c, 0xd5, 0x8b, 0x97, 0x00, 0xd2, 0x9c, 0x6b, 0xba, 0x68, 0x73, 0xb7, 0x47,
	0x6a, 0xd6, 0x2f, 0xe2, 0x04, 0x6a, 0x7a, 0xdc, 0x67, 0xbe, 0x44, 0xde, 0xe9, 0x3d, 0xc3, 0x23,
	0x74, 0x55, 0x96, 0x14, 0x12, 0xc2, 0xa0, 0x0b, 0xc2, 0x78, 0x4a, 0x34, 0xc9, 0x43, 0xda, 0x52,
	0x78, 0x7c, 0x8f, 0x98, 0xd6, 0x1f, 0x4d, 0x98, 0xce, 0xb4, 0x56, 0xf1, 0xb5, 0xc4, 0x13, 0x4a,
	0x7c, 0x31, 0x45, 0x1d, 0x9d, 0x0e, 0x0a, 0x62, 0xd0, 0x25, 0x98, 0x2f, 0x86, 0xb4, 0x50, 0x8a,
	0x5e, 0xf4, 0xa0, 0x1a, 0xd5, 0xda, 0x62, 0x58, 0x53, 0x78, 0x3c, 0x49, 0x6a, 0x52, 0xb3, 0x56,
	0xfa, 0x59, 0x12, 0x6e, 0xe3, 0x0c, 0x4c, 0xea, 0x63, 0xed, 0x56, 0x91, 0xa3, 0x24, 0x19, 0x4e,
	0x4c, 0xeb, 0xbf, 0x26, 0x5c, 0x6e, 0x61, 0x74, 0xd8, 0x27, 0xcf, 0x4d, 0x4a, 0xd6, 0x75, 0x98,
	0x2d, 0x98, 0x8e, 0x5e, 0xbd, 0xa3, 0xb7, 0xeb, 0x02, 0x72, 0x9c, 0xd9, 0x91, 0x09, 0x05, 0xf4,
	0x76, 0x8f, 0x77, 0xda, 0xfb, 0xb6, 0x70, 0xa2, 0x5c, 0x22, 0x35, 0x55, 0x64, 0x4b, 0x70, 0xa9,
	0x8e, 0x23, 0x25, 0xc2, 0xe2, 0xc5, 0x9e, 0xa3, 0xb4, 0x1d, 0x5b, 0xda, 0xd1, 0x2b, 0x5c, 0x39,
	0xee, 0xe5, 0x43, 0x32, 0x66, 0xfd, 0x1c, 0x2e, 0x45, 0x26, 0x6c, 0x75, 0x51, 0x84, 0x28, 0x95,
	0xe1, 0xb9, 0xa9, 0xa6, 0xc0, 0xe8, 0x5b, 0xc4, 0x20, 0xe9, 0x45, 0xd7, 0x51, 0x24, 0xd3, 0xfa,
	0x31, 0x9c, 0x7f, 0x8e, 0xbe, 0x6f, 0xef, 0x45, 0x69, 0x3f, 0x09, 0x44, 0x1b, 0x86, 0x99, 0x47,
	0x0c, 0x3a, 0x05, 0x13, 0xda, 0x6c, 0xf4, 0x95, 0x80, 0x98, 0xd6, 0x37, 0x70, 0x6e, 0x9d, 0xa1,
	0x1b, 0x9d, 0x32, 0x97, 0xe1, 0x52, 0x3a, 0x48, 0x2b, 0x05, 0x81, 0xf1, 0x74, 0x52, 0x55, 0x01,
	0x93, 0x4e, 0xc0, 0x85, 0x74, 0x26, 0x4c, 0xf1, 0x5a, 0x86, 0x33, 0xee, 0xf0, 0x46, 0xac, 0xc7,
	0x70, 0x76, 0xf5, 0xd9, 0x57, 0x49, 0x52, 0xc7, 0x3f, 0x35, 0xa7, 0x10, 0x43, 0x89, 0x8a, 0xe7,
	0xe3, 0xdd, 0x34, 0x57, 0xe4, 0x9b, 0xb7, 0x75, 0xe3, 0xfb, 0xb7, 0x75, 0xe3, 0x87, 0xb7, 0x75,
	0xf3, 0xb7, 0x27, 0x75, 0xf3, 0x6f, 0x27, 0x75, 0xf3, 0x1f, 0x27, 0x75, 0xf3, 0xcd, 0x49, 0xdd,
	0xfc, 0xf7, 0x49, 0xdd, 0xfc, 0xcf, 0x49, 0xdd, 0xf8, 0xe1, 0xa4, 0x6e, 0xfe, 0xf9, 0x5d, 0xdd,
	0x78, 0xf3, 0xae, 0x6e, 0x7c, 0xff, 0xae, 0x6e, 0xc0, 0x15, 0xe6, 0x2d, 0x4b, 0x3c, 0xec, 0x7a,
	0xc2, 0x76, 0xa3, 0xef, 0x40, 0xcb, 0xe1, 0x67, 0xa0, 0x6d, 0xf3, 0x9b, 0xc5, 0x3d, 0x8d, 0xc4,
	0xbc, 0x07, 0xc9, 0xef, 0xfb, 0x21, 0x2c, 0xfa, 0x74, 0xb4, 0x7b, 0x26, 0x1c, 0x3c, 0xfa, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xe1, 0x90, 0xa4, 0x50, 0x1a, 0x00, 0x00,
}

func (x WorkflowIdReusePolicy) String() string {
	s, ok := WorkflowIdReusePolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DomainStatus) String() string {
	s, ok := DomainStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TimeoutType) String() string {
	s, ok := TimeoutType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ParentClosePolicy) String() string {
	s, ok := ParentClosePolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DecisionType) String() string {
	s, ok := DecisionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EventType) String() string {
	s, ok := EventType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DecisionTaskFailedCause) String() string {
	s, ok := DecisionTaskFailedCause_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CancelExternalWorkflowExecutionFailedCause) String() string {
	s, ok := CancelExternalWorkflowExecutionFailedCause_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SignalExternalWorkflowExecutionFailedCause) String() string {
	s, ok := SignalExternalWorkflowExecutionFailedCause_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ChildWorkflowExecutionFailedCause) String() string {
	s, ok := ChildWorkflowExecutionFailedCause_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x WorkflowExecutionCloseStatus) String() string {
	s, ok := WorkflowExecutionCloseStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x QueryTaskCompletedType) String() string {
	s, ok := QueryTaskCompletedType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x QueryResultType) String() string {
	s, ok := QueryResultType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PendingActivityState) String() string {
	s, ok := PendingActivityState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x HistoryEventFilterType) String() string {
	s, ok := HistoryEventFilterType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TaskListKind) String() string {
	s, ok := TaskListKind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ArchivalStatus) String() string {
	s, ok := ArchivalStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x IndexedValueType) String() string {
	s, ok := IndexedValueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EncodingType) String() string {
	s, ok := EncodingType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x QueryRejectCondition) String() string {
	s, ok := QueryRejectCondition_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x QueryConsistencyLevel) String() string {
	s, ok := QueryConsistencyLevel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ContinueAsNewInitiator) String() string {
	s, ok := ContinueAsNewInitiator_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TaskListType) String() string {
	s, ok := TaskListType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ReplicationTaskType) String() string {
	s, ok := ReplicationTaskType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DomainOperation) String() string {
	s, ok := DomainOperation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MessageType) String() string {
	s, ok := MessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x FieldType) String() string {
	s, ok := FieldType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DLQType) String() string {
	s, ok := DLQType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
